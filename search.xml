<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>butterfly主题文章段落标题美化</title>
      <link href="/post/1f839f2c.html"/>
      <url>/post/1f839f2c.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在网上找了一些文章段落标题美化的文章，在这里汇总记录一下。</p><h2 id="标题左侧显示美化"><a href="#标题左侧显示美化" class="headerlink" title="标题左侧显示美化"></a>标题左侧显示美化</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">查看效果</button></li><li class="tab"><button type="button" data-href="#-2">实现方式</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20220626093654.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p>在custom.css（如果没有需要自己新建，并添加到对应的butterfly配置文件中，<a href="https://akilar.top/posts/ebf20e02/">查看引入自定义css教程</a>）文件中添加以下代码:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 文章页H1-H6图标 显示H1~H6 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> ccc &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">1turn</span>);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">1turn</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> ccc &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">1turn</span>);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">1turn</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h1</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#eaeaea</span> ;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">1.55rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.3rem</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">0.23rem</span>;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;H₁&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h2</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#eaeaea</span> ;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">1.55rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">0.12rem</span>;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;H₂&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h3</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#eaeaea</span> ;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">1.22rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.95rem</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">0.09rem</span>;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;H₃&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h4</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#eaeaea</span> ;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">1.05rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.8rem</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">0.09rem</span>;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;H₄&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h5</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#eaeaea</span> ;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">0.9rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.7rem</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0.0rem</span>;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;H₅&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#content-inner</span><span class="selector-class">.layout</span> <span class="selector-tag">h6</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#eaeaea</span> ;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">0.9rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.66rem</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0.0rem</span>;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;H₆&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="标题右侧显示复制锚点按钮"><a href="#标题右侧显示复制锚点按钮" class="headerlink" title="标题右侧显示复制锚点按钮"></a>标题右侧显示复制锚点按钮</h2><p>butterfly自带锚点如果开启了话，当浏览文章到不同的锚点时，会出现大量的浏览历史记录，建议把这个功能关掉。但是在分享文章时，又希望能直接到达指定的段落，这时候就需要锚点复制的功能。</p><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">查看效果</button></li><li class="tab"><button type="button" data-href="#-2">实现方式</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20220626105227.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p>在custom.css（如果没有需要自己新建，并添加到对应的butterfly配置文件中，<a href="https://akilar.top/posts/ebf20e02/">查看引入自定义css教程</a>）文件中添加以下代码:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 文章页H1-H6图标 显示H1~H6 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*文章标题右侧显示锚点*/</span></span><br><span class="line"><span class="selector-id">#article-container</span><span class="selector-class">.post-content</span> <span class="selector-class">.headerlink</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">90%</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#article-container</span><span class="selector-class">.post-content</span> <span class="selector-class">.headerlink</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;\f0c1&#x27;</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Font Awesome 6 Free&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly主题魔改教程</title>
      <link href="/post/975f8665.html"/>
      <url>/post/975f8665.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>收集的各种butterfly主题魔改教程，会持续更新的。。。</p><h2 id="分类标签右上角显示数量"><a href="#分类标签右上角显示数量" class="headerlink" title="分类标签右上角显示数量"></a>分类标签右上角显示数量</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">教程地址</button></li><li class="tab"><button type="button" data-href="#-2">查看效果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><div class="tag link"><a class="link-card" title="Eurkon-Butterfly 标签云增加文章数上下标" href="https://blog.eurkon.com/post/6687849c.html"><div class="left"><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20220625225250.png"/></div><div class="right"><p class="text">Eurkon-Butterfly 标签云增加文章数上下标</p><p class="url">https://blog.eurkon.com/post/6687849c.html</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p><strong><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20220625223101.png" alt=""></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="归档（时间轴）页面显示生肖LOGO"><a href="#归档（时间轴）页面显示生肖LOGO" class="headerlink" title="归档（时间轴）页面显示生肖LOGO"></a>归档（时间轴）页面显示生肖LOGO</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">教程地址</button></li><li class="tab"><button type="button" data-href="#-2">查看效果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><div class="tag link"><a class="link-card" title="糖果屋-时间轴生肖图标教程贴" href="https://akilar.top/posts/22257072/"><div class="left"><img src="https://npm.elemecdn.com/akilar-candyassets/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋-时间轴生肖图标教程贴</p><p class="url">https://akilar.top/posts/22257072/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p><strong><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20220625223154.png" alt=""></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="hexo-butterfly底部信息的修改"><a href="#hexo-butterfly底部信息的修改" class="headerlink" title="hexo-butterfly底部信息的修改"></a>hexo-butterfly底部信息的修改</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">教程地址</button></li><li class="tab"><button type="button" data-href="#-2">查看效果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><div class="tag link"><a class="link-card" title="Harry の 心 阁-hexo-butterfly底部信息的修改" href="https://u.mr90.top/posts/83507599/"><div class="left"><img src="https://cloud.mr90.top/file/imagecloud/admin/qqavatar.jpeg"/></div><div class="right"><p class="text">Harry の 心 阁-hexo-butterfly底部信息的修改</p><p class="url">https://u.mr90.top/posts/83507599/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p><strong><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20220625235147.png" alt=""></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="文章段落美化"><a href="#文章段落美化" class="headerlink" title="文章段落美化"></a>文章段落美化</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">教程地址</button></li><li class="tab"><button type="button" data-href="#-2">查看效果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><div class="tag link"><a class="link-card" title="butterfly主题文章段落标题美化" href="https://www.yuweizhan.cn/post/1f839f2c.html"><div class="left"><img src="https://www.yuweizhan.cn/img/va.jpg"/></div><div class="right"><p class="text">butterfly主题文章段落标题美化</p><p class="url">https://www.yuweizhan.cn/post/1f839f2c.html</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20220626105714.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka学习笔记01-kafka概述与安装</title>
      <link href="/post/b9644516.html"/>
      <url>/post/b9644516.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是kafka学习笔记的第一篇文章，主要的内容是kafka的概述以及安装，对应着<a href="https://www.bilibili.com/video/BV1vr4y1677k?p=1">尚硅谷2022版Kafka3.x教程（P1~P7)</a></p><h2 id="kafka概述"><a href="#kafka概述" class="headerlink" title="kafka概述"></a>kafka概述</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li><p>kafka传统定义：Kafka是一个分布式的基于发布/订阅模式的消息队列（MessageQueue），主要应用于大数据实时处理领域。</p></li><li><p>kafka最新定义：Kafka是 一个开源的<span class='p red'>分布式事件流平台</span>（Event StreamingPlatform），被数千家公司用于高性能数据管道、流分析、数据集成和关键任务应用。</p></li></ul><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><ul><li><p>目 前企 业中比 较常 见的 消息 队列产 品主 要有 Kafka、ActiveMQ 、RabbitMQ 、RocketMQ 等。</p></li><li><p>在大数据场景主要采用 Kafka 作为消息队列。在 JavaEE 开发中主要采用 ActiveMQ、RabbitMQ、RocketMQ。</p></li></ul><h4 id="传统消息队列的应用场景"><a href="#传统消息队列的应用场景" class="headerlink" title="传统消息队列的应用场景"></a>传统消息队列的应用场景</h4><blockquote><p>传统的消息队列的主要应用场景包括：<strong>缓存/消峰</strong>、<strong>解耦</strong>和<strong>异步通信</strong>。</p></blockquote><ul><li>缓冲/消峰：有助于控制和优化数据流经过系统的速度，解决生产消息和消费消息的处理速度不一致的情况。</li><li>解耦：允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。</li><li>异步通信：允许用户把一个消息放入队列，但并不立即处理它，然后在需要的时候再去处理它们。</li></ul><h4 id="消息队列的两种模式"><a href="#消息队列的两种模式" class="headerlink" title="消息队列的两种模式"></a>消息队列的两种模式</h4><ul><li><p>点对点模式：</p><ul><li><p>消费者主动拉取数据，消息收到后清除消息</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20220626133528.png" alt=""></p></li></ul></li><li><p>发布/订阅模式：</p><ul><li>可以有多个topic主题（浏览、点赞、收藏、评论等）</li><li>消费者消费数据后，不删除数据</li><li>每个消费者互相独立，都可以消费到数据</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20220626133836.png" alt=""></p></li></ul><h3 id="kafka基础架构"><a href="#kafka基础架构" class="headerlink" title="kafka基础架构"></a>kafka基础架构</h3><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20220626134023.png" alt=""></p><h4 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h4><p>消息生产者，就是向 Kafka broker 发消息的客户端。</p><h4 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h4><p>消息消费者，向 Kafka broker 取消息的客户端。</p><h4 id="Consumer-Group（CG）"><a href="#Consumer-Group（CG）" class="headerlink" title="Consumer Group（CG）"></a>Consumer Group（CG）</h4><p>消费者组，由多个 consumer 组成。消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费；消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。</p><h4 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h4><p>一台 Kafka 服务器就是一个 broker。一个集群由多个 broker 组成。一个broker 可以容纳多个 topic。</p><h4 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h4><p>可以理解为一个队列，<strong>生产者和消费者面向的都是一个</strong> <strong>topic</strong>。</p><h4 id="Partition"><a href="#Partition" class="headerlink" title="Partition"></a>Partition</h4><p>为了实现扩展性，一个非常大的 topic 可以分布到多个 broker（即服务器）上，一个topic可以分为多个partition，每个 partition 是一个有序的队列。 </p><h4 id="Replica"><a href="#Replica" class="headerlink" title="Replica"></a>Replica</h4><p>副本，一个 topic 的每个分区都有若干个副本，一个 <strong>Leader</strong> 和若干个<strong>Follower</strong></p><h4 id="Leader"><a href="#Leader" class="headerlink" title="Leader"></a>Leader</h4><p>每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数据的对象都是 Leader。 </p><h4 id="Follower"><a href="#Follower" class="headerlink" title="Follower"></a>Follower</h4><p>每个分区多个副本中的“从”，实时从 Leader 中同步数据，保持和Leader 数据的同步。Leader 发生故障时，某个 Follower 会成为新的 Leader。</p><h2 id="kafka集群安装部署"><a href="#kafka集群安装部署" class="headerlink" title="kafka集群安装部署"></a>kafka集群安装部署</h2><p>kafka在2.8.0版本之前安装部署需要依赖zookeeper，2.8.0之后的版本可以不依赖，但是大多数的企业还没用到这么新的版本。</p><h3 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h3><div class="table-container"><table><thead><tr><th>Hadoop102</th><th>Hadoop103</th><th>Hadoop104</th></tr></thead><tbody><tr><td>Zk</td><td>Zk</td><td>Zk</td></tr><tr><td>Kafka</td><td>Kafka</td><td>Kafka</td></tr></tbody></table></div><h3 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h3><blockquote><p>官方下载地址：<a href="http://kafka.apache.org/downloads.html">http://kafka.apache.org/downloads.html</a></p></blockquote><h4 id="解压安装包"><a href="#解压安装包" class="headerlink" title="解压安装包"></a>解压安装包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf kafka_2.12-3.0.0.tgz -C /opt/module/</span><br></pre></td></tr></table></figure><h4 id="修改解压后的文件名称"><a href="#修改解压后的文件名称" class="headerlink" title="修改解压后的文件名称"></a>修改解压后的文件名称</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv kafka_2.12-3.0.0/ kafka</span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd config/</span><br><span class="line">vim server.properties</span><br></pre></td></tr></table></figure><p>修改以下内容：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#broker 的全局唯一编号，不能重复，只能是数字。</span><br><span class="line"><span class="deletion">- broker.id=</span></span><br><span class="line"><span class="addition">+ broker.id=0</span></span><br><span class="line"></span><br><span class="line">#kafka 运行日志(数据)存放的路径，路径不需要提前创建，kafka 自动帮你创建，可以配置多个磁盘路径，路径与路径之间可以用&quot;，&quot;分隔</span><br><span class="line"><span class="deletion">- log.dirs=</span></span><br><span class="line"><span class="addition">+ log.dirs=/opt/module/kafka/datas</span></span><br><span class="line"></span><br><span class="line">#配置连接 Zookeeper 集群地址（在 zk 根目录下创建/kafka，方便管理）</span><br><span class="line"><span class="deletion">- zookeeper.connect=</span></span><br><span class="line"><span class="addition">+ zookeeper.connect=hadoop102:2181,hadoop103:2181,hadoop104:2181/kafka</span></span><br></pre></td></tr></table></figure><h4 id="分发安装包"><a href="#分发安装包" class="headerlink" title="分发安装包"></a>分发安装包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分发到hadoop103</span></span><br><span class="line">scp -r kafka root@hadoop103:/opt/module/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分发到hadoop104</span></span><br><span class="line">scp -r kafka root@hadoop104:/opt/module/</span><br></pre></td></tr></table></figure><h4 id="修改103-104配置文件"><a href="#修改103-104配置文件" class="headerlink" title="修改103,104配置文件"></a>修改103,104配置文件</h4><p>分别在 hadoop103 和 hadoop104 上修改配置文件/opt/module/kafka/config/server.properties中的 broker.id=1、broker.id=2</p><span class='p red'>其中broker.id不能重复，整个集群中唯一</span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改hadoop103 kafka配置文件</span></span><br><span class="line">vim kafka/config/server.properties</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The <span class="built_in">id</span> of the broker. This must be <span class="built_in">set</span> to a unique <span class="built_in">integer</span> <span class="keyword">for</span> each broker.</span></span><br><span class="line">broker.id=1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改hadoop104 kafka配置文件</span></span><br><span class="line"> vim kafka/config/server.properties</span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">The <span class="built_in">id</span> of the broker. This must be <span class="built_in">set</span> to a unique <span class="built_in">integer</span> <span class="keyword">for</span> each broker.</span></span><br><span class="line">broker.id=2</span><br></pre></td></tr></table></figure><h4 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h4><p>依次在 hadoop102、hadoop103、hadoop104 节点上启动 Kafka。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-start.sh -daemon config/server.properties</span><br></pre></td></tr></table></figure><h4 id="停止集群"><a href="#停止集群" class="headerlink" title="停止集群"></a>停止集群</h4><p>依次在 hadoop102、hadoop103、hadoop104 节点上停止 Kafka。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-stop.sh</span><br></pre></td></tr></table></figure><h4 id="集群启停脚本"><a href="#集群启停脚本" class="headerlink" title="集群启停脚本"></a>集群启停脚本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vim kf.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">脚本内容如下：</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)&#123;</span><br><span class="line">for i in hadoop102 hadoop103 hadoop104</span><br><span class="line">do</span><br><span class="line">echo &quot; --------启动 $i Kafka-------&quot;</span><br><span class="line">ssh $i &quot;/opt/module/kafka/bin/kafka-server-start.sh -</span><br><span class="line">daemon /opt/module/kafka/config/server.properties&quot;</span><br><span class="line">done</span><br><span class="line">&#125;;;</span><br><span class="line">&quot;stop&quot;)&#123;</span><br><span class="line">for i in hadoop102 hadoop103 hadoop104</span><br><span class="line">do</span><br><span class="line">echo &quot; --------停止 $i Kafka-------&quot;</span><br><span class="line">ssh $i &quot;/opt/module/kafka/bin/kafka-server-stop.sh &quot;</span><br><span class="line">done</span><br><span class="line">&#125;;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x kf.sh</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动集群命令</span></span><br><span class="line">kf.sh start</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止集群命令</span></span><br><span class="line">kf.sh stop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flink学习笔记04-flink高级API</title>
      <link href="/post/74803824.html"/>
      <url>/post/74803824.html</url>
      
        <content type="html"><![CDATA[<h2 id="Flink四大基石"><a href="#Flink四大基石" class="headerlink" title="Flink四大基石"></a>Flink四大基石</h2><p>Flink之所以能这么流行，离不开它最重要的四个基石：Checkpoint、State、Time、Window。</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213204052.png" alt=""></p><h3 id="Checkpoint"><a href="#Checkpoint" class="headerlink" title="Checkpoint"></a>Checkpoint</h3><p>这是Flink最重要的一个特性。</p><ul><li><p>Flink基于Chandy-Lamport算法实现了一个分布式的一致性的快照，从而提供了一致性的语义。</p></li><li><p>Chandy-Lamport算法实际上在1985年的时候已经被提出来，但并没有被很广泛的应用，而Flink则把这个算法发扬光大了。</p></li><li><p>Spark最近在实现Continue streaming，Continue streaming的目的是为了降低处理的延时，其也需要提供这种一致性的语义，最终也采用了Chandy-Lamport这个算法，说明Chandy-Lamport算法在业界得到了一定的肯定。</p></li></ul><blockquote><p>分布式快照算法: <a href="https://zhuanlan.zhihu.com/p/53482103">https://zhuanlan.zhihu.com/p/53482103</a></p></blockquote><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><p>提供了一致性的语义之后，Flink为了让用户在编程时能够更轻松、更容易地去管理状态，还提供了一套非常简单明了的State API，包括ValueState、ListState、MapState，BroadcastState。</p><h3 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h3><p>除此之外，Flink还实现了Watermark的机制，能够支持基于事件的时间的处理，能够容忍迟到/乱序的数据。</p><h3 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h3><p>另外流计算中一般在对流数据进行操作之前都会先进行开窗，即基于一个什么样的窗口上做这个计算。Flink提供了开箱即用的各种窗口，比如滑动窗口、滚动窗口、会话窗口以及非常灵活的自定义的窗口。</p><h2 id="Flink-Window操作"><a href="#Flink-Window操作" class="headerlink" title="Flink-Window操作"></a>Flink-Window操作</h2><h3 id="为什么需要Window"><a href="#为什么需要Window" class="headerlink" title="为什么需要Window"></a>为什么需要Window</h3><p>在流处理应用中，数据是连续不断的，有时我们需要做一些聚合类的处理，例如：在过去的1分钟内有多少用户点击了我们的网页。</p><p>在这种情况下，我们必须定义一个窗口(window)，用来收集最近1分钟内的数据，并对这个窗口内的数据进行计算。</p><h3 id="Window的分类"><a href="#Window的分类" class="headerlink" title="Window的分类"></a>Window的分类</h3><h4 id="按照time和count分类"><a href="#按照time和count分类" class="headerlink" title="按照time和count分类"></a>按照time和count分类</h4><ul><li>time-window:时间窗口:根据时间划分窗口,如:每xx分钟统计最近xx分钟的数据</li><li>count-window:数量窗口:根据数量划分窗口,如:每xx个数据统计最近xx个数据</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213182442.png" alt=""></p><h4 id="按照slide和size分类"><a href="#按照slide和size分类" class="headerlink" title="按照slide和size分类"></a>按照slide和size分类</h4><p>窗口有两个重要的属性: 窗口大小<strong>size</strong>和滑动间隔<strong>slide</strong>,根据它们的大小关系可分为:</p><ul><li><p>tumbling-window:滚动窗口:size=slide,如:每隔10s统计最近10s的数据</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213182855.png" alt=""></p></li><li><p>sliding-window:滑动窗口:size&gt;slide,如:每隔5s统计最近10s的数据</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213182920.png" alt=""></p></li></ul><p><strong>注意</strong>:当size&lt;slide的时候,如每隔15s统计最近10s的数据,那么中间5s的数据会丢失,所有开发中不用</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>按照上面窗口的分类方式进行组合,可以得出如下的窗口:</p><ul><li>基于时间的滚动窗口tumbling-time-window—用的较多</li><li>基于时间的滑动窗口sliding-time-window—用的较多</li><li>基于数量的滚动窗口tumbling-count-window—用的较少</li><li>基于数量的滑动窗口sliding-count-window—用的较少</li></ul><p><strong>注意</strong>:Flink还支持一个特殊的窗口:Session会话窗口,需要设置一个会话超时时间,如30s,则表示30s内没有数据到来,则触发上个窗口的计算</p><h3 id="Window的API"><a href="#Window的API" class="headerlink" title="Window的API"></a>Window的API</h3><h4 id="window和windowAll"><a href="#window和windowAll" class="headerlink" title="window和windowAll"></a>window和windowAll</h4><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213183548.png" alt=""></p><ul><li>使用keyby的流,应该使用window方法</li><li>未使用keyby的流,应该调用windowAll方法</li></ul><h4 id="WindowAssigner"><a href="#WindowAssigner" class="headerlink" title="WindowAssigner"></a>WindowAssigner</h4><p>window/windowAll 方法接收的输入是一个 WindowAssigner， WindowAssigner 负责将每条输入的数据分发到正确的 window 中，Flink提供了很多各种场景用的WindowAssigner：</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213184025.png" alt=""></p><p>如果需要自己定制数据分发策略，则可以实现一个 class，继承自 WindowAssigner。</p><h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><h4 id="基于时间的滚动和滑动窗口"><a href="#基于时间的滚动和滑动窗口" class="headerlink" title="基于时间的滚动和滑动窗口"></a>基于时间的滚动和滑动窗口</h4><ul><li><p>需求1:每5秒钟统计一次，最近5秒钟内，各个路口通过红绿灯汽车的数量—基于时间的滚动窗口</p></li><li><p>需求2:每5秒钟统计一次，最近10秒钟内，各个路口通过红绿灯汽车的数量—基于时间的滑动窗口</p></li></ul><p>示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowDemo01_TimeWindow</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.env</span></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        <span class="comment">//2.Source</span></span><br><span class="line">        DataStreamSource&lt;String&gt; socketDS = env.socketTextStream(<span class="string">&quot;node1&quot;</span>, <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.Transformation</span></span><br><span class="line">        <span class="comment">//将9,3转为CartInfo(9,3)</span></span><br><span class="line">        SingleOutputStreamOperator&lt;CartInfo&gt; cartInfoDS = socketDS.map(<span class="keyword">new</span> <span class="title class_">MapFunction</span>&lt;String, CartInfo&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> CartInfo <span class="title function_">map</span><span class="params">(String value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                String[] arr = value.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CartInfo</span>(arr[<span class="number">0</span>], Integer.parseInt(arr[<span class="number">1</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分组</span></span><br><span class="line">        <span class="comment">//KeyedStream&lt;CartInfo, Tuple&gt; keyedDS = cartInfoDS.keyBy(&quot;sensorId&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// * 需求1:每5秒钟统计一次，最近5秒钟内，各个路口/信号灯通过红绿灯汽车的数量--基于时间的滚动窗口</span></span><br><span class="line">        <span class="comment">//timeWindow(Time size窗口大小, Time slide滑动间隔)</span></span><br><span class="line">        SingleOutputStreamOperator&lt;CartInfo&gt; result1 = cartInfoDS</span><br><span class="line">                .keyBy(CartInfo::getSensorId)</span><br><span class="line">                <span class="comment">//.timeWindow(Time.seconds(5))//当size==slide,可以只写一个</span></span><br><span class="line">                <span class="comment">//.timeWindow(Time.seconds(5), Time.seconds(5))</span></span><br><span class="line">                .window(TumblingProcessingTimeWindows.of(Time.seconds(<span class="number">5</span>)))</span><br><span class="line">                .sum(<span class="string">&quot;count&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// * 需求2:每5秒钟统计一次，最近10秒钟内，各个路口/信号灯通过红绿灯汽车的数量--基于时间的滑动窗口</span></span><br><span class="line">        SingleOutputStreamOperator&lt;CartInfo&gt; result2 = cartInfoDS</span><br><span class="line">                .keyBy(CartInfo::getSensorId)</span><br><span class="line">                <span class="comment">//.timeWindow(Time.seconds(10), Time.seconds(5))</span></span><br><span class="line">                .window(SlidingProcessingTimeWindows.of(Time.seconds(<span class="number">10</span>), Time.seconds(<span class="number">5</span>)))</span><br><span class="line">                .sum(<span class="string">&quot;count&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.Sink</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1,5</span></span><br><span class="line"><span class="comment">2,5</span></span><br><span class="line"><span class="comment">3,5</span></span><br><span class="line"><span class="comment">4,5</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="comment">//result1.print();</span></span><br><span class="line">        result2.print();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.execute</span></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CartInfo</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String sensorId;<span class="comment">//信号灯id</span></span><br><span class="line">        <span class="keyword">private</span> Integer count;<span class="comment">//通过该信号灯的车的数量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基于数量的滚动和滑动窗口"><a href="#基于数量的滚动和滑动窗口" class="headerlink" title="基于数量的滚动和滑动窗口"></a>基于数量的滚动和滑动窗口</h4><ul><li><p>需求1:统计在最近5条消息中,各自路口通过的汽车数量,相同的key每出现5次进行统计—基于数量的滚动窗口</p></li><li><p>需求2:统计在最近5条消息中,各自路口通过的汽车数量,相同的key每出现3次进行统计—基于数量的滑动窗口</p></li></ul><p>示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowDemo02_CountWindow</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.env</span></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        <span class="comment">//2.Source</span></span><br><span class="line">        DataStreamSource&lt;String&gt; socketDS = env.socketTextStream(<span class="string">&quot;node1&quot;</span>, <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.Transformation</span></span><br><span class="line">        <span class="comment">//将9,3转为CartInfo(9,3)</span></span><br><span class="line">        SingleOutputStreamOperator&lt;CartInfo&gt; cartInfoDS = socketDS.map(<span class="keyword">new</span> <span class="title class_">MapFunction</span>&lt;String, CartInfo&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> CartInfo <span class="title function_">map</span><span class="params">(String value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                String[] arr = value.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CartInfo</span>(arr[<span class="number">0</span>], Integer.parseInt(arr[<span class="number">1</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分组</span></span><br><span class="line">        <span class="comment">//KeyedStream&lt;CartInfo, Tuple&gt; keyedDS = cartInfoDS.keyBy(&quot;sensorId&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// * 需求1:统计在最近5条消息中,各自路口通过的汽车数量,相同的key每出现5次进行统计--基于数量的滚动窗口</span></span><br><span class="line">        <span class="comment">//countWindow(long size, long slide)</span></span><br><span class="line">        SingleOutputStreamOperator&lt;CartInfo&gt; result1 = cartInfoDS</span><br><span class="line">                .keyBy(CartInfo::getSensorId)</span><br><span class="line">                <span class="comment">//.countWindow(5L, 5L)</span></span><br><span class="line">                .countWindow( <span class="number">5L</span>)</span><br><span class="line">                .sum(<span class="string">&quot;count&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// * 需求2:统计在最近5条消息中,各自路口通过的汽车数量,相同的key每出现3次进行统计--基于数量的滑动窗口</span></span><br><span class="line">        <span class="comment">//countWindow(long size, long slide)</span></span><br><span class="line">        SingleOutputStreamOperator&lt;CartInfo&gt; result2 = cartInfoDS</span><br><span class="line">                .keyBy(CartInfo::getSensorId)</span><br><span class="line">                .countWindow(<span class="number">5L</span>, <span class="number">3L</span>)</span><br><span class="line">                .sum(<span class="string">&quot;count&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.Sink</span></span><br><span class="line">        <span class="comment">//result1.print();</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">1,1</span></span><br><span class="line"><span class="comment">1,1</span></span><br><span class="line"><span class="comment">1,1</span></span><br><span class="line"><span class="comment">1,1</span></span><br><span class="line"><span class="comment">2,1</span></span><br><span class="line"><span class="comment">1,1</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        result2.print();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">1,1</span></span><br><span class="line"><span class="comment">1,1</span></span><br><span class="line"><span class="comment">2,1</span></span><br><span class="line"><span class="comment">1,1</span></span><br><span class="line"><span class="comment">2,1</span></span><br><span class="line"><span class="comment">3,1</span></span><br><span class="line"><span class="comment">4,1</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.execute</span></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CartInfo</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String sensorId;<span class="comment">//信号灯id</span></span><br><span class="line">        <span class="keyword">private</span> Integer count;<span class="comment">//通过该信号灯的车的数量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="会话窗口"><a href="#会话窗口" class="headerlink" title="会话窗口"></a>会话窗口</h4><ul><li>设置会话超时时间为10s,10s内没有数据到来,则触发上个窗口的计算</li></ul><p>示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowDemo03_SessionWindow</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.env</span></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        <span class="comment">//2.Source</span></span><br><span class="line">        DataStreamSource&lt;String&gt; socketDS = env.socketTextStream(<span class="string">&quot;node1&quot;</span>, <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.Transformation</span></span><br><span class="line">        <span class="comment">//将9,3转为CartInfo(9,3)</span></span><br><span class="line">        SingleOutputStreamOperator&lt;CartInfo&gt; cartInfoDS = socketDS.map(<span class="keyword">new</span> <span class="title class_">MapFunction</span>&lt;String, CartInfo&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> CartInfo <span class="title function_">map</span><span class="params">(String value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                String[] arr = value.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CartInfo</span>(arr[<span class="number">0</span>], Integer.parseInt(arr[<span class="number">1</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求:设置会话超时时间为10s,10s内没有数据到来,则触发上个窗口的计算(前提是上一个窗口得有数据!)</span></span><br><span class="line">        SingleOutputStreamOperator&lt;CartInfo&gt; result = cartInfoDS.keyBy(CartInfo::getSensorId)</span><br><span class="line">                .window(ProcessingTimeSessionWindows.withGap(Time.seconds(<span class="number">10</span>)))</span><br><span class="line">                .sum(<span class="string">&quot;count&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.Sink</span></span><br><span class="line">        result.print();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.execute</span></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CartInfo</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String sensorId;<span class="comment">//信号灯id</span></span><br><span class="line">        <span class="keyword">private</span> Integer count;<span class="comment">//通过该信号灯的车的数量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Flink-Time与Watermaker"><a href="#Flink-Time与Watermaker" class="headerlink" title="Flink-Time与Watermaker"></a>Flink-Time与Watermaker</h2><h3 id="Time分类"><a href="#Time分类" class="headerlink" title="Time分类"></a>Time分类</h3><p>在Flink的流式处理中，会涉及到时间的不同概念，如下图所示：</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213205430.png" alt=""></p><ul><li>事件时间EventTime:   事件真真正正发生产生的时间</li><li>摄入时间IngestionTime:    事件到达Flink的时间</li><li>处理时间ProcessingTime:  事件真正被处理/计算的时间</li></ul><h3 id="Watermaker水印机制-水位线机制"><a href="#Watermaker水印机制-水位线机制" class="headerlink" title="Watermaker水印机制/水位线机制"></a>Watermaker水印机制/水位线机制</h3><p>Watermaker就是给数据再额外的加的一个时间列，Watermaker = 当前窗口的最大的事件时间  -  最大允许的延迟时间或乱序时间</p><h4 id="图解watermaker"><a href="#图解watermaker" class="headerlink" title="图解watermaker"></a>图解watermaker</h4><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210215211800.png" alt=""></p><h4 id="watermaker案例演示"><a href="#watermaker案例演示" class="headerlink" title="watermaker案例演示"></a>watermaker案例演示</h4><ul><li><p>需求</p><ul><li><p>有订单数据,格式为: (订单ID，用户ID，时间戳/事件时间，订单金额)</p></li><li><p>要求每隔5s,计算5秒内，每个用户的订单总金额</p></li><li><p>并添加Watermaker来解决一定程度上的数据延迟和数据乱序问题。</p></li></ul></li><li><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WatermakerDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.env</span></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        <span class="comment">//2.Source</span></span><br><span class="line">        <span class="comment">//模拟实时订单数据(数据有延迟和乱序)</span></span><br><span class="line">        DataStream&lt;Order&gt; orderDS = env.addSource(<span class="keyword">new</span> <span class="title class_">SourceFunction</span>&lt;Order&gt;() &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(SourceContext&lt;Order&gt; ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">                <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">orderId</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> random.nextInt(<span class="number">3</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> random.nextInt(<span class="number">100</span>);</span><br><span class="line">                    <span class="comment">//模拟数据延迟和乱序!</span></span><br><span class="line">                    <span class="type">long</span> <span class="variable">eventTime</span> <span class="operator">=</span> System.currentTimeMillis() - random.nextInt(<span class="number">5</span>) * <span class="number">1000</span>;</span><br><span class="line">                    ctx.collect(<span class="keyword">new</span> <span class="title class_">Order</span>(orderId, userId, money, eventTime));</span><br><span class="line"></span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancel</span><span class="params">()</span> &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.Transformation</span></span><br><span class="line">        <span class="comment">//-告诉Flink要基于事件时间来计算!</span></span><br><span class="line">        <span class="comment">//env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);//新版本默认就是EventTime</span></span><br><span class="line">        <span class="comment">//-告诉Flnk数据中的哪一列是事件时间,因为Watermaker = 当前最大的事件时间 - 最大允许的延迟时间或乱序时间</span></span><br><span class="line">        <span class="comment">/*DataStream&lt;Order&gt; watermakerDS = orderDS.assignTimestampsAndWatermarks(</span></span><br><span class="line"><span class="comment">                new BoundedOutOfOrdernessTimestampExtractor&lt;Order&gt;(Time.seconds(3)) &#123;//最大允许的延迟时间或乱序时间</span></span><br><span class="line"><span class="comment">                    @Override</span></span><br><span class="line"><span class="comment">                    public long extractTimestamp(Order element) &#123;</span></span><br><span class="line"><span class="comment">                        return element.eventTime;</span></span><br><span class="line"><span class="comment">                        //指定事件时间是哪一列,Flink底层会自动计算:</span></span><br><span class="line"><span class="comment">                        //Watermaker = 当前最大的事件时间 - 最大允许的延迟时间或乱序时间</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line">        DataStream&lt;Order&gt; watermakerDS = orderDS</span><br><span class="line">                .assignTimestampsAndWatermarks(</span><br><span class="line">                        WatermarkStrategy.&lt;Order&gt;forBoundedOutOfOrderness(Duration.ofSeconds(<span class="number">3</span>))</span><br><span class="line">                                .withTimestampAssigner((event, timestamp) -&gt; event.getEventTime())</span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//代码走到这里,就已经被添加上Watermaker了!接下来就可以进行窗口计算了</span></span><br><span class="line">        <span class="comment">//要求每隔5s,计算5秒内(基于时间的滚动窗口)，每个用户的订单总金额</span></span><br><span class="line">        DataStream&lt;Order&gt; result = watermakerDS</span><br><span class="line">                .keyBy(Order::getUserId)</span><br><span class="line">                <span class="comment">//.timeWindow(Time.seconds(5), Time.seconds(5))</span></span><br><span class="line">                .window(TumblingEventTimeWindows.of(Time.seconds(<span class="number">5</span>)))</span><br><span class="line">                .sum(<span class="string">&quot;money&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.Sink</span></span><br><span class="line">        result.print();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.execute</span></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String orderId;</span><br><span class="line">        <span class="keyword">private</span> Integer userId;</span><br><span class="line">        <span class="keyword">private</span> Integer money;</span><br><span class="line">        <span class="keyword">private</span> Long eventTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Flink-状态管理"><a href="#Flink-状态管理" class="headerlink" title="Flink-状态管理"></a>Flink-状态管理</h2><h3 id="无状态计算和有状态计算"><a href="#无状态计算和有状态计算" class="headerlink" title="无状态计算和有状态计算"></a>无状态计算和有状态计算</h3><h4 id="无状态计算"><a href="#无状态计算" class="headerlink" title="无状态计算"></a>无状态计算</h4><ul><li><p>不需要考虑历史数据</p></li><li><p>相同的输入得到相同的输出就是无状态计算, 如map/flatMap/filter….</p></li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210215213048.png" alt=""></p><h4 id="有状态计算"><a href="#有状态计算" class="headerlink" title="有状态计算"></a>有状态计算</h4><ul><li><p>需要考虑历史数据</p></li><li><p>相同的输入得到不同的输出/不一定得到相同的输出,就是有状态计算,如:sum/reduce</p></li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210215213133.png" alt=""></p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210215213236.png" alt=""></p><h3 id="状态的分类"><a href="#状态的分类" class="headerlink" title="状态的分类"></a>状态的分类</h3><h4 id="Managed-State-amp-Raw-State"><a href="#Managed-State-amp-Raw-State" class="headerlink" title="Managed State &amp; Raw State"></a>Managed State &amp; Raw State</h4><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210215213428.png" alt=""></p><p>从Flink是否接管角度:可以分为Managed State(托管状态) ,Raw State(原始状态),两者的区别如下：</p><ul><li>从状态管理方式的方式来说，Managed State 由 Flink Runtime 管理，自动存储，自动恢复，在内存管理上有优化；而 RawState 需要用户自己管理，需要自己序列化，Flink 不知道 State 中存入的数据是什么结构，只有用户自己知道，需要最终序列化为可存储的数据结构。</li><li>从状态数据结构来说，Managed State 支持已知的数据结构，如 Value、List、Map 等。而 Raw State只支持字节数组 ，所有状态都要转换为二进制字节数组才可以。</li><li>从推荐使用场景来说，Managed State 大多数情况下均可使用，而 Raw State 是当 Managed State 不够用时，比如需要自定义 Operator 时，才会使用 Raw State。</li><li>在实际生产中，都只<strong>推荐使用ManagedState</strong></li></ul><h4 id="Keyed-State-amp-Operator-State"><a href="#Keyed-State-amp-Operator-State" class="headerlink" title="Keyed State &amp; Operator State"></a>Keyed State &amp; Operator State</h4><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210215230854.png" alt=""></p><p>Managed State 分为两种，Keyed State 和 Operator State (Raw State都是Operator State)</p><ul><li><p>Keyed State</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210215231015.png" alt=""></p></li></ul><p>在Flink Stream模型中，Datastream 经过 keyBy 的操作可以变为 KeyedStream。</p><p>Keyed State是基于KeyedStream上的状态。这个状态是跟特定的key绑定的，对KeyedStream流上的每一个key，都对应一个state，如stream.keyBy(…)</p><p>KeyBy之后的State,可以理解为分区过的State，每个并行keyed Operator的每个实例的每个key都有一个Keyed State，即<parallel-operator-instance,key>就是一个唯一的状态，由于每个key属于一个keyed Operator的并行实例，因此我们将其简单的理解为<operator,key></p><ul><li><p>Operator State</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210215231216.png" alt=""></p><p>这里的fromElements会调用FromElementsFunction的类，其中就使用了类型为 list state 的 operator state</p><p>Operator State又称为 non-keyed state，与Key无关的State，每一个 operator state 都仅与一个 operator 的实例绑定。</p><p>Operator State 可以用于所有算子，但一般常用于 Source</p></li></ul><h3 id="State代码示例"><a href="#State代码示例" class="headerlink" title="State代码示例"></a>State代码示例</h3><h4 id="Keyed-State"><a href="#Keyed-State" class="headerlink" title="Keyed State"></a>Keyed State</h4><p>下图就 word count 的 sum 所使用的StreamGroupedReduce类为例讲解了如何在代码中使用 keyed state：</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210215232851.png" alt=""></p><blockquote><p>官网代码示例:<a href="https://ci.apache.org/projects/flink/flink-docs-stable/dev/stream/state/state.html#using-managed-keyed-state">https://ci.apache.org/projects/flink/flink-docs-stable/dev/stream/state/state.html#using-managed-keyed-state</a></p></blockquote><ul><li><p>使用KeyState中的ValueState获取数据中的最大值(实际中直接使用maxBy即可)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StateDemo01_KeyedState</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.env</span></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);<span class="comment">//方便观察</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.Source</span></span><br><span class="line">        DataStreamSource&lt;Tuple2&lt;String, Long&gt;&gt; tupleDS = env.fromElements(</span><br><span class="line">                Tuple2.of(<span class="string">&quot;北京&quot;</span>, <span class="number">1L</span>),</span><br><span class="line">                Tuple2.of(<span class="string">&quot;上海&quot;</span>, <span class="number">2L</span>),</span><br><span class="line">                Tuple2.of(<span class="string">&quot;北京&quot;</span>, <span class="number">6L</span>),</span><br><span class="line">                Tuple2.of(<span class="string">&quot;上海&quot;</span>, <span class="number">8L</span>),</span><br><span class="line">                Tuple2.of(<span class="string">&quot;北京&quot;</span>, <span class="number">3L</span>),</span><br><span class="line">                Tuple2.of(<span class="string">&quot;上海&quot;</span>, <span class="number">4L</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.Transformation</span></span><br><span class="line">        <span class="comment">//使用KeyState中的ValueState获取流数据中的最大值(实际中直接使用maxBy即可)</span></span><br><span class="line">        <span class="comment">//实现方式1:直接使用maxBy--开发中使用该方式即可</span></span><br><span class="line">        <span class="comment">//min只会求出最小的那个字段,其他的字段不管</span></span><br><span class="line">        <span class="comment">//minBy会求出最小的那个字段和对应的其他的字段</span></span><br><span class="line">        <span class="comment">//max只会求出最大的那个字段,其他的字段不管</span></span><br><span class="line">        <span class="comment">//maxBy会求出最大的那个字段和对应的其他的字段</span></span><br><span class="line">        SingleOutputStreamOperator&lt;Tuple2&lt;String, Long&gt;&gt; result = tupleDS.keyBy(t -&gt; t.f0)</span><br><span class="line">                .maxBy(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实现方式2:使用KeyState中的ValueState---学习测试时使用,或者后续项目中/实际开发中遇到复杂的Flink没有实现的逻辑,才用该方式!</span></span><br><span class="line">        SingleOutputStreamOperator&lt;Tuple3&lt;String, Long, Long&gt;&gt; result2 = tupleDS.keyBy(t -&gt; t.f0)</span><br><span class="line">                .map(<span class="keyword">new</span> <span class="title class_">RichMapFunction</span>&lt;Tuple2&lt;String, Long&gt;, Tuple3&lt;String, Long, Long&gt;&gt;() &#123;</span><br><span class="line">                    <span class="comment">//-1.定义状态用来存储最大值</span></span><br><span class="line">                    <span class="keyword">private</span> ValueState&lt;Long&gt; maxValueState = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="comment">//-2.定义状态描述符:描述状态的名称和里面的数据类型</span></span><br><span class="line">                        <span class="type">ValueStateDescriptor</span> <span class="variable">descriptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ValueStateDescriptor</span>(<span class="string">&quot;maxValueState&quot;</span>, Long.class);</span><br><span class="line">                        <span class="comment">//-3.根据状态描述符初始化状态</span></span><br><span class="line">                        maxValueState = getRuntimeContext().getState(descriptor);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Tuple3&lt;String, Long, Long&gt; <span class="title function_">map</span><span class="params">(Tuple2&lt;String, Long&gt; value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="comment">//-4.使用State,取出State中的最大值/历史最大值</span></span><br><span class="line">                        <span class="type">Long</span> <span class="variable">historyMaxValue</span> <span class="operator">=</span> maxValueState.value();</span><br><span class="line">                        <span class="type">Long</span> <span class="variable">currentValue</span> <span class="operator">=</span> value.f1;</span><br><span class="line">                        <span class="keyword">if</span> (historyMaxValue == <span class="literal">null</span> || currentValue &gt; historyMaxValue) &#123;</span><br><span class="line">                            <span class="comment">//5-更新状态,把当前的作为新的最大值存到状态中</span></span><br><span class="line">                            maxValueState.update(currentValue);</span><br><span class="line">                            <span class="keyword">return</span> Tuple3.of(value.f0, currentValue, currentValue);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> Tuple3.of(value.f0, currentValue, historyMaxValue);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.Sink</span></span><br><span class="line">        <span class="comment">//result.print();</span></span><br><span class="line">        result2.print();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.execute</span></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="Operator-State"><a href="#Operator-State" class="headerlink" title="Operator State"></a>Operator State</h4><p>下图对 word count 示例中的FromElementsFunction类进行详解并分享如何在代码中使用 operator state：</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210215233329.png" alt=""></p><blockquote><p>官网代码示例:<a href="https://ci.apache.org/projects/flink/flink-docs-stable/dev/stream/state/state.html#using-managed-operator-state">https://ci.apache.org/projects/flink/flink-docs-stable/dev/stream/state/state.html#using-managed-operator-state</a></p></blockquote><ul><li><p>使用ListState存储offset模拟Kafka的offset维护</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Desc</span></span><br><span class="line"><span class="comment"> * 需求:</span></span><br><span class="line"><span class="comment"> * 使用OperatorState支持的数据结构ListState存储offset信息, 模拟Kafka的offset维护,</span></span><br><span class="line"><span class="comment"> * 其实就是FlinkKafkaConsumer底层对应offset的维护!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StateDemo02_OperatorState</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.env</span></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//先直接使用下面的代码设置Checkpoint时间间隔和磁盘路径以及代码遇到异常后的重启策略,下午会学</span></span><br><span class="line">        env.enableCheckpointing(<span class="number">1000</span>);<span class="comment">//每隔1s执行一次Checkpoint</span></span><br><span class="line">        env.setStateBackend(<span class="keyword">new</span> <span class="title class_">FsStateBackend</span>(<span class="string">&quot;file:///D:/ckp&quot;</span>));</span><br><span class="line">        env.getCheckpointConfig().enableExternalizedCheckpoints(CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION);</span><br><span class="line">        env.getCheckpointConfig().setCheckpointingMode(CheckpointingMode.EXACTLY_ONCE);</span><br><span class="line">        <span class="comment">//固定延迟重启策略: 程序出现异常的时候，重启2次，每次延迟3秒钟重启，超过2次，程序退出</span></span><br><span class="line">        env.setRestartStrategy(RestartStrategies.fixedDelayRestart(<span class="number">2</span>, <span class="number">3000</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.Source</span></span><br><span class="line">        DataStreamSource&lt;String&gt; sourceData = env.addSource(<span class="keyword">new</span> <span class="title class_">MyKafkaSource</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.Transformation</span></span><br><span class="line">        <span class="comment">//4.Sink</span></span><br><span class="line">        sourceData.print();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.execute</span></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MyKafkaSource就是模拟的FlinkKafkaConsumer并维护offset</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyKafkaSource</span> <span class="keyword">extends</span> <span class="title class_">RichParallelSourceFunction</span>&lt;String&gt; <span class="keyword">implements</span> <span class="title class_">CheckpointedFunction</span> &#123;</span><br><span class="line">        <span class="comment">//-1.声明一个OperatorState来记录offset</span></span><br><span class="line">        <span class="keyword">private</span> ListState&lt;Long&gt; offsetState = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initializeState</span><span class="params">(FunctionInitializationContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="comment">//-2.创建状态描述器</span></span><br><span class="line">            <span class="type">ListStateDescriptor</span> <span class="variable">descriptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListStateDescriptor</span>(<span class="string">&quot;offsetState&quot;</span>, Long.class);</span><br><span class="line">            <span class="comment">//-3.根据状态描述器初始化状态</span></span><br><span class="line">            offsetState = context.getOperatorStateStore().getListState(descriptor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(SourceContext&lt;String&gt; ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="comment">//-4.获取并使用State中的值</span></span><br><span class="line">            Iterator&lt;Long&gt; iterator = offsetState.get().iterator();</span><br><span class="line">            <span class="keyword">if</span> (iterator.hasNext())&#123;</span><br><span class="line">                offset = iterator.next();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">                offset += <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> getRuntimeContext().getIndexOfThisSubtask();</span><br><span class="line">                ctx.collect(<span class="string">&quot;分区:&quot;</span>+id+<span class="string">&quot;消费到的offset位置为:&quot;</span> + offset);<span class="comment">//1 2 3 4 5 6</span></span><br><span class="line">                <span class="comment">//Thread.sleep(1000);</span></span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">if</span>(offset % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;程序遇到异常了.....&quot;</span>);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;程序遇到异常了.....&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancel</span><span class="params">()</span> &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 下面的snapshotState方法会按照固定的时间间隔将State信息存储到Checkpoint/磁盘中,也就是在磁盘做快照!</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">snapshotState</span><span class="params">(FunctionSnapshotContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="comment">//-5.保存State到Checkpoint中</span></span><br><span class="line">            offsetState.clear();<span class="comment">//清理内存中存储的offset到Checkpoint中</span></span><br><span class="line">            <span class="comment">//-6.将offset存入State中</span></span><br><span class="line">            offsetState.add(offset);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Flink-容错机制"><a href="#Flink-容错机制" class="headerlink" title="Flink-容错机制"></a>Flink-容错机制</h2><h3 id="Checkpoint-1"><a href="#Checkpoint-1" class="headerlink" title="Checkpoint"></a>Checkpoint</h3><h4 id="State-Vs-Checkpoint"><a href="#State-Vs-Checkpoint" class="headerlink" title="State Vs Checkpoint"></a>State Vs Checkpoint</h4><ul><li><p>State: </p><ul><li>维护/存储的是某一个Operator的运行的状态/历史值,是维护在内存中! </li><li>一般指一个具体的Operator的状态(operator的状态表示一些算子在运行的过程中会产生的一些历史结果,如前面的maxBy底层会维护当前的最大值,也就是会维护一个keyedOperator,这个State里面存放就是maxBy这个Operator中的最大值)</li><li>State数据默认保存在Java的堆内存中/TaskManage节点的内存中</li><li>State可以被记录，在失败的情况下数据还可以恢复</li></ul></li><li><p>Checkpoint:</p><ul><li><p>某一时刻,Flink中所有的Operator的当前State的全局快照,一般存在磁盘上</p></li><li><p>表示了一个Flink Job在一个特定时刻的一份全局状态快照，即包含了所有Operator的状态</p><p>可以理解为Checkpoint是把State数据定时持久化存储了</p><p>比如KafkaConsumer算子中维护的Offset状态,当任务重新恢复的时候可以从Checkpoint中获取</p></li></ul></li></ul><h4 id="Checkpoint执行流程"><a href="#Checkpoint执行流程" class="headerlink" title="Checkpoint执行流程"></a>Checkpoint执行流程</h4><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210215234418.png" alt=""></p><ul><li>Flink的JobManager创建CheckpointCoordinator</li><li>Coordinator向所有的SourceOperator发送Barrier栅栏(理解为执行Checkpoint的信号)</li><li>SourceOperator接收到Barrier之后,暂停当前的操作(暂停的时间很短,因为后续的写快照是异步的),并制作State快照, 然后将自己的快照保存到指定的介质中(如HDFS), 一切 ok之后向Coordinator汇报并将Barrier发送给下游的其他Operator</li><li>其他的如TransformationOperator接收到Barrier,重复第2步,最后将Barrier发送给Sink</li><li>Sink接收到Barrier之后重复第2步</li><li>Coordinator接收到所有的Operator的执行ok的汇报结果,认为本次快照执行成功</li><li>在往介质(如HDFS)中写入快照数据的时候是异步的(为了提高效率)</li><li>分布式快照执行时的数据一致性由Chandy-Lamport algorithm分布式快照算法保证</li></ul><h4 id="State状态后端-State存储介质"><a href="#State状态后端-State存储介质" class="headerlink" title="State状态后端/State存储介质"></a>State状态后端/State存储介质</h4><p>Checkpoint其实就是Flink中某一时刻,所有的Operator的全局快照,那么快照应该要有一个地方进行存储,而这个存储的地方叫做<strong>状态后端</strong></p><h5 id="MemStateBackend"><a href="#MemStateBackend" class="headerlink" title="MemStateBackend"></a>MemStateBackend</h5><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210216133957.png" alt=""></p><h5 id="FsStateBackend"><a href="#FsStateBackend" class="headerlink" title="FsStateBackend"></a>FsStateBackend</h5><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210216134037.png" alt=""></p><ul><li><p>FsStateBackend 构建方法是需要传一个文件路径和是否异步快照。</p></li><li><p>State 依然在 TaskManager 内存中，但不会像 MemoryStateBackend 是 5 M 的设置上限</p></li><li><p>Checkpoint 存储在外部文件系统（本地或 HDFS），打破了总大小 Jobmanager 内存的限制。</p></li><li><p>推荐使用的场景为：常规使用状态的作业、例如分钟级窗口聚合或 join、需要开启HA的作业。</p></li><li><p>如果使用HDFS，则初始化FsStateBackend时，需要传入以 “hdfs://”开头的路径(即: new FsStateBackend(“hdfs:///hacluster/checkpoint”))， </p></li><li><p>在分布式情况下，不推荐使用本地文件。因为如果某个算子在节点A上失败，在节点B上恢复，使用本地文件时，在B上无法读取节点 A上的数据，导致状态恢复失败。</p></li></ul><h5 id="RocksDBStateBackend"><a href="#RocksDBStateBackend" class="headerlink" title="RocksDBStateBackend"></a>RocksDBStateBackend</h5><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210216134221.png" alt=""></p><h4 id="Checkpoint配置方式"><a href="#Checkpoint配置方式" class="headerlink" title="Checkpoint配置方式"></a>Checkpoint配置方式</h4><h5 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h5><p>修改flink-conf.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#jobmanager(即MemoryStateBackend), </span></span><br><span class="line"><span class="comment">#filesystem(即FsStateBackend), </span></span><br><span class="line"><span class="comment">#rocksdb(即RocksDBStateBackend)</span></span><br><span class="line"><span class="attr">state.backend:</span> <span class="string">filesystem</span> </span><br><span class="line"><span class="attr">state.checkpoints.dir:</span> <span class="string">hdfs://namenode:8020/flink/checkpoints</span></span><br></pre></td></tr></table></figure><h5 id="在代码中配置"><a href="#在代码中配置" class="headerlink" title="在代码中配置"></a>在代码中配置</h5><p>代码示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckpointDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.env</span></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        <span class="comment">//===========Checkpoint参数设置====</span></span><br><span class="line">        <span class="comment">//===========类型1:必须参数=============</span></span><br><span class="line">        <span class="comment">//设置Checkpoint的时间间隔为1000ms做一次Checkpoint/其实就是每隔1000ms发一次Barrier!</span></span><br><span class="line">        env.enableCheckpointing(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//设置State状态存储介质</span></span><br><span class="line">        <span class="comment">/*if(args.length &gt; 0)&#123;</span></span><br><span class="line"><span class="comment">            env.setStateBackend(new FsStateBackend(args[0]));</span></span><br><span class="line"><span class="comment">        &#125;else &#123;</span></span><br><span class="line"><span class="comment">            env.setStateBackend(new FsStateBackend(&quot;file:///D:\\data\\ckp&quot;));</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">if</span> (SystemUtils.IS_OS_WINDOWS) &#123;</span><br><span class="line">            env.setStateBackend(<span class="keyword">new</span> <span class="title class_">FsStateBackend</span>(<span class="string">&quot;file:///D:\\data\\ckp&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            env.setStateBackend(<span class="keyword">new</span> <span class="title class_">FsStateBackend</span>(<span class="string">&quot;hdfs://node1:8020/flink-checkpoint/checkpoint&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//===========类型2:建议参数===========</span></span><br><span class="line">        <span class="comment">//设置两个Checkpoint 之间最少等待时间,如设置Checkpoint之间最少是要等 500ms(为了避免每隔1000ms做一次Checkpoint的时候,前一次太慢和后一次重叠到一起去了)</span></span><br><span class="line">        <span class="comment">//如:高速公路上,每隔1s关口放行一辆车,但是规定了两车之前的最小车距为500m</span></span><br><span class="line">        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(<span class="number">500</span>);<span class="comment">//默认是0</span></span><br><span class="line">        <span class="comment">//设置如果在做Checkpoint过程中出现错误，是否让整体任务失败：true是  false不是</span></span><br><span class="line">        <span class="comment">//env.getCheckpointConfig().setFailOnCheckpointingErrors(false);//默认是true</span></span><br><span class="line">        env.getCheckpointConfig().setTolerableCheckpointFailureNumber(<span class="number">10</span>);<span class="comment">//默认值为0，表示不容忍任何检查点失败</span></span><br><span class="line">        <span class="comment">//设置是否清理检查点,表示 Cancel 时是否需要保留当前的 Checkpoint，默认 Checkpoint会在作业被Cancel时被删除</span></span><br><span class="line">        <span class="comment">//ExternalizedCheckpointCleanup.DELETE_ON_CANCELLATION：true,当作业被取消时，删除外部的checkpoint(默认值)</span></span><br><span class="line">        <span class="comment">//ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION：false,当作业被取消时，保留外部的checkpoint</span></span><br><span class="line">        env.getCheckpointConfig().enableExternalizedCheckpoints(CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//===========类型3:直接使用默认的即可===============</span></span><br><span class="line">        <span class="comment">//设置checkpoint的执行模式为EXACTLY_ONCE(默认)</span></span><br><span class="line">        env.getCheckpointConfig().setCheckpointingMode(CheckpointingMode.EXACTLY_ONCE);</span><br><span class="line">        <span class="comment">//设置checkpoint的超时时间,如果 Checkpoint在 60s内尚未完成说明该次Checkpoint失败,则丢弃。</span></span><br><span class="line">        env.getCheckpointConfig().setCheckpointTimeout(<span class="number">60000</span>);<span class="comment">//默认10分钟</span></span><br><span class="line">        <span class="comment">//设置同一时间有多少个checkpoint可以同时执行</span></span><br><span class="line">        env.getCheckpointConfig().setMaxConcurrentCheckpoints(<span class="number">1</span>);<span class="comment">//默认为1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.Source</span></span><br><span class="line">        DataStream&lt;String&gt; linesDS = env.socketTextStream(<span class="string">&quot;node1&quot;</span>, <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.Transformation</span></span><br><span class="line">        <span class="comment">//3.1切割出每个单词并直接记为1</span></span><br><span class="line">        DataStream&lt;Tuple2&lt;String, Integer&gt;&gt; wordAndOneDS = linesDS.flatMap(<span class="keyword">new</span> <span class="title class_">FlatMapFunction</span>&lt;String, Tuple2&lt;String, Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flatMap</span><span class="params">(String value, Collector&lt;Tuple2&lt;String, Integer&gt;&gt; out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">//value就是每一行</span></span><br><span class="line">                String[] words = value.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">                    out.collect(Tuple2.of(word, <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//3.2分组</span></span><br><span class="line">        <span class="comment">//注意:批处理的分组是groupBy,流处理的分组是keyBy</span></span><br><span class="line">        KeyedStream&lt;Tuple2&lt;String, Integer&gt;, String&gt; groupedDS = wordAndOneDS.keyBy(t -&gt; t.f0);</span><br><span class="line">        <span class="comment">//3.3聚合</span></span><br><span class="line">        DataStream&lt;Tuple2&lt;String, Integer&gt;&gt; aggResult = groupedDS.sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        DataStream&lt;String&gt; result = (SingleOutputStreamOperator&lt;String&gt;) aggResult.map(<span class="keyword">new</span> <span class="title class_">RichMapFunction</span>&lt;Tuple2&lt;String, Integer&gt;, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">map</span><span class="params">(Tuple2&lt;String, Integer&gt; value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> value.f0 + <span class="string">&quot;:::&quot;</span> + value.f1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.sink</span></span><br><span class="line">        result.print();</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.setProperty(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;node1:9092&quot;</span>);</span><br><span class="line">        FlinkKafkaProducer&lt;String&gt; kafkaSink = <span class="keyword">new</span> <span class="title class_">FlinkKafkaProducer</span>&lt;&gt;(<span class="string">&quot;flink_kafka&quot;</span>, <span class="keyword">new</span> <span class="title class_">SimpleStringSchema</span>(), props);</span><br><span class="line">        result.addSink(kafkaSink);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.execute</span></span><br><span class="line">        env.execute();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// /export/server/kafka/bin/kafka-console-consumer.sh --bootstrap-server node1:9092 --topic flink_kafka</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="状态恢复和重启策略"><a href="#状态恢复和重启策略" class="headerlink" title="状态恢复和重启策略"></a>状态恢复和重启策略</h3><h4 id="自动重启策略和恢复"><a href="#自动重启策略和恢复" class="headerlink" title="自动重启策略和恢复"></a>自动重启策略和恢复</h4><h5 id="重启策略配置方式"><a href="#重启策略配置方式" class="headerlink" title="重启策略配置方式"></a>重启策略配置方式</h5><ul><li><p>全局配置：</p><p>在flink-conf.yml中可以进行配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">restart-strategy:</span> <span class="string">fixed-delay</span></span><br><span class="line"><span class="attr">restart-strategy.fixed-delay.attempts:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">restart-strategy.fixed-delay.delay:</span> <span class="number">10</span> <span class="string">s</span></span><br></pre></td></tr></table></figure></li><li><p>在代码中配置:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">env.setRestartStrategy(RestartStrategies.fixedDelayRestart(</span><br><span class="line"><span class="number">3</span>, <span class="comment">// 重启次数</span></span><br><span class="line">Time.of(<span class="number">10</span>, TimeUnit.SECONDS) <span class="comment">// 延迟时间间隔</span></span><br><span class="line"> ))</span><br></pre></td></tr></table></figure></li></ul><h5 id="重启策略分类"><a href="#重启策略分类" class="headerlink" title="重启策略分类"></a>重启策略分类</h5><h6 id="默认重启策略"><a href="#默认重启策略" class="headerlink" title="默认重启策略"></a>默认重启策略</h6><p>如果配置了Checkpoint,而没有配置重启策略,那么代码中出现了非致命错误时,程序会无限重启</p><h6 id="无重启策略"><a href="#无重启策略" class="headerlink" title="无重启策略"></a>无重启策略</h6><p>Job直接失败，不会尝试进行重启</p><ul><li><p>设置方式1:<br> restart-strategy: none </p></li><li><p>设置方式2:<br> 无重启策略也可以在程序中设置<br> val env = ExecutionEnvironment.getExecutionEnvironment()<br> env.setRestartStrategy(RestartStrategies.noRestart())</p></li></ul><h6 id="固定延迟重启策略"><a href="#固定延迟重启策略" class="headerlink" title="固定延迟重启策略"></a>固定延迟重启策略</h6><ul><li><p>设置方式1:<br> 重启策略可以配置flink-conf.yaml的下面配置参数来启用，作为默认的重启策略:<br> 例子:<br> restart-strategy: fixed-delay<br> restart-strategy.fixed-delay.attempts: 3<br> restart-strategy.fixed-delay.delay: 10 s</p></li><li><p>设置方式2:<br> 也可以在程序中设置:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">env = ExecutionEnvironment.getExecutionEnvironment()</span><br><span class="line">env.setRestartStrategy(RestartStrategies.fixedDelayRestart(</span><br><span class="line">  <span class="number">3</span>, <span class="comment">// 最多重启3次数</span></span><br><span class="line">  Time.of(<span class="number">10</span>, TimeUnit.SECONDS) <span class="comment">// 重启时间间隔</span></span><br><span class="line">))</span><br></pre></td></tr></table></figure><p>上面的设置表示:如果job失败,重启3次, 每次间隔10</p></li></ul><h6 id="失败率重启策略"><a href="#失败率重启策略" class="headerlink" title="失败率重启策略"></a>失败率重启策略</h6><ul><li><p>设置方式1:<br> 失败率重启策略可以在flink-conf.yaml中设置下面的配置参数来启用:<br> 例子:<br> restart-strategy:failure-rate<br> restart-strategy.failure-rate.max-failures-per-interval: 3<br> restart-strategy.failure-rate.failure-rate-interval: 5 min<br> restart-strategy.failure-rate.delay: 10 s</p></li><li><p>设置方式2:<br> 失败率重启策略也可以在程序中设置:<br> val env = ExecutionEnvironment.getExecutionEnvironment()<br> env.setRestartStrategy(RestartStrategies.failureRateRestart(<br>   3, // 每个测量时间间隔最大失败次数<br>   Time.of(5, TimeUnit.MINUTES), //失败率测量的时间间隔<br>   Time.of(10, TimeUnit.SECONDS) // 两次连续重启的时间间隔<br> ))<br> 上面的设置表示:如果5分钟内job失败不超过三次,自动重启, 每次间隔10s (如果5分钟内程序失败超过3次,则程序退出)</p></li></ul><h6 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckpointDemo02_RestartStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.env</span></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        <span class="comment">//===========Checkpoint参数设置====</span></span><br><span class="line">        <span class="comment">//===========类型1:必须参数=============</span></span><br><span class="line">        <span class="comment">//设置Checkpoint的时间间隔为1000ms做一次Checkpoint/其实就是每隔1000ms发一次Barrier!</span></span><br><span class="line">        env.enableCheckpointing(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//设置State状态存储介质</span></span><br><span class="line">        <span class="comment">/*if(args.length &gt; 0)&#123;</span></span><br><span class="line"><span class="comment">            env.setStateBackend(new FsStateBackend(args[0]));</span></span><br><span class="line"><span class="comment">        &#125;else &#123;</span></span><br><span class="line"><span class="comment">            env.setStateBackend(new FsStateBackend(&quot;file:///D:/ckp&quot;));</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">if</span>(SystemUtils.IS_OS_WINDOWS)&#123;</span><br><span class="line">            env.setStateBackend(<span class="keyword">new</span> <span class="title class_">FsStateBackend</span>(<span class="string">&quot;file:///D:/ckp&quot;</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            env.setStateBackend(<span class="keyword">new</span> <span class="title class_">FsStateBackend</span>(<span class="string">&quot;hdfs://node1:8020/flink-checkpoint/checkpoint&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//===========类型2:建议参数===========</span></span><br><span class="line">        <span class="comment">//设置两个Checkpoint 之间最少等待时间,如设置Checkpoint之间最少是要等 500ms(为了避免每隔1000ms做一次Checkpoint的时候,前一次太慢和后一次重叠到一起去了)</span></span><br><span class="line">        <span class="comment">//如:高速公路上,每隔1s关口放行一辆车,但是规定了两车之前的最小车距为500m</span></span><br><span class="line">        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(<span class="number">500</span>);<span class="comment">//默认是0</span></span><br><span class="line">        <span class="comment">//设置如果在做Checkpoint过程中出现错误，是否让整体任务失败：true是  false不是</span></span><br><span class="line">        <span class="comment">//env.getCheckpointConfig().setFailOnCheckpointingErrors(false);//默认是true</span></span><br><span class="line">        env.getCheckpointConfig().setTolerableCheckpointFailureNumber(<span class="number">10</span>);<span class="comment">//默认值为0，表示不容忍任何检查点失败</span></span><br><span class="line">        <span class="comment">//设置是否清理检查点,表示 Cancel 时是否需要保留当前的 Checkpoint，默认 Checkpoint会在作业被Cancel时被删除</span></span><br><span class="line">        <span class="comment">//ExternalizedCheckpointCleanup.DELETE_ON_CANCELLATION：true,当作业被取消时，删除外部的checkpoint(默认值)</span></span><br><span class="line">        <span class="comment">//ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION：false,当作业被取消时，保留外部的checkpoint</span></span><br><span class="line">        env.getCheckpointConfig().enableExternalizedCheckpoints(CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//===========类型3:直接使用默认的即可===============</span></span><br><span class="line">        <span class="comment">//设置checkpoint的执行模式为EXACTLY_ONCE(默认)</span></span><br><span class="line">        env.getCheckpointConfig().setCheckpointingMode(CheckpointingMode.EXACTLY_ONCE);</span><br><span class="line">        <span class="comment">//设置checkpoint的超时时间,如果 Checkpoint在 60s内尚未完成说明该次Checkpoint失败,则丢弃。</span></span><br><span class="line">        env.getCheckpointConfig().setCheckpointTimeout(<span class="number">60000</span>);<span class="comment">//默认10分钟</span></span><br><span class="line">        <span class="comment">//设置同一时间有多少个checkpoint可以同时执行</span></span><br><span class="line">        env.getCheckpointConfig().setMaxConcurrentCheckpoints(<span class="number">1</span>);<span class="comment">//默认为1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//=============重启策略===========</span></span><br><span class="line">        <span class="comment">//-1.默认策略:配置了Checkpoint而没有配置重启策略默认使用无限重启</span></span><br><span class="line">        <span class="comment">//-2.配置无重启策略</span></span><br><span class="line">        <span class="comment">//env.setRestartStrategy(RestartStrategies.noRestart());</span></span><br><span class="line">        <span class="comment">//-3.固定延迟重启策略--开发中使用!</span></span><br><span class="line">        <span class="comment">//重启3次,每次间隔10s</span></span><br><span class="line">        <span class="comment">/*env.setRestartStrategy(RestartStrategies.fixedDelayRestart(</span></span><br><span class="line"><span class="comment">                3, //尝试重启3次</span></span><br><span class="line"><span class="comment">                Time.of(10, TimeUnit.SECONDS))//每次重启间隔10s</span></span><br><span class="line"><span class="comment">        );*/</span></span><br><span class="line">        <span class="comment">//-4.失败率重启--偶尔使用</span></span><br><span class="line">        <span class="comment">//5分钟内重启3次(第3次不包括,也就是最多重启2次),每次间隔10s</span></span><br><span class="line">        <span class="comment">/*env.setRestartStrategy(RestartStrategies.failureRateRestart(</span></span><br><span class="line"><span class="comment">                3, // 每个测量时间间隔最大失败次数</span></span><br><span class="line"><span class="comment">                Time.of(5, TimeUnit.MINUTES), //失败率测量的时间间隔</span></span><br><span class="line"><span class="comment">                Time.of(10, TimeUnit.SECONDS) // 每次重启的时间间隔</span></span><br><span class="line"><span class="comment">        ));*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//上面的能看懂就行,开发中使用下面的代码即可</span></span><br><span class="line">        env.setRestartStrategy(RestartStrategies.fixedDelayRestart(<span class="number">3</span>, Time.of(<span class="number">10</span>, TimeUnit.SECONDS)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.Source</span></span><br><span class="line">        DataStream&lt;String&gt; linesDS = env.socketTextStream(<span class="string">&quot;node1&quot;</span>, <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.Transformation</span></span><br><span class="line">        <span class="comment">//3.1切割出每个单词并直接记为1</span></span><br><span class="line">        SingleOutputStreamOperator&lt;Tuple2&lt;String, Integer&gt;&gt; wordAndOneDS = linesDS.flatMap(<span class="keyword">new</span> <span class="title class_">FlatMapFunction</span>&lt;String, Tuple2&lt;String, Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flatMap</span><span class="params">(String value, Collector&lt;Tuple2&lt;String, Integer&gt;&gt; out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">//value就是每一行</span></span><br><span class="line">                String[] words = value.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(word.equals(<span class="string">&quot;bug&quot;</span>))&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;手动模拟的bug...&quot;</span>);</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;手动模拟的bug...&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    out.collect(Tuple2.of(word, <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//3.2分组</span></span><br><span class="line">        <span class="comment">//注意:批处理的分组是groupBy,流处理的分组是keyBy</span></span><br><span class="line">        KeyedStream&lt;Tuple2&lt;String, Integer&gt;, String&gt; groupedDS = wordAndOneDS.keyBy(t -&gt; t.f0);</span><br><span class="line">        <span class="comment">//3.3聚合</span></span><br><span class="line">        SingleOutputStreamOperator&lt;Tuple2&lt;String, Integer&gt;&gt; result = groupedDS.sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.sink</span></span><br><span class="line">        result.print();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.execute</span></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Savepoint"><a href="#Savepoint" class="headerlink" title="Savepoint"></a>Savepoint</h3><p>保存点,类似于以前玩游戏的时候,遇到难关了/遇到boss了,赶紧手动存个档,然后接着玩,如果失败了,赶紧从上次的存档中恢复,然后接着玩</p><p>在实际开发中,可能会遇到这样的情况:如要对集群进行停机维护/扩容…</p><p>那么这时候需要执行一次Savepoint也就是执行一次手动的Checkpoint/也就是手动的发一个barrier栅栏,那么这样的话,程序的所有状态都会被执行快照并保存,</p><p>当维护/扩容完毕之后,可以从上一次Savepoint的目录中进行恢复! </p><h4 id="Savepoint-VS-Checkpoint"><a href="#Savepoint-VS-Checkpoint" class="headerlink" title="Savepoint VS Checkpoint"></a>Savepoint VS Checkpoint</h4><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210216143030.png" alt=""></p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210216143046.png" alt=""></p><h4 id="Savepoint演示"><a href="#Savepoint演示" class="headerlink" title="Savepoint演示"></a>Savepoint演示</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动yarn session</span></span><br><span class="line">/export/server/flink/bin/yarn-session.sh -n 2 -tm 800 -s 1 -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行job-会自动执行Checkpoint</span></span><br><span class="line">/export/server/flink/bin/flink run --class cn.itcast.checkpoint.CheckpointDemo01 /root/ckp.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动创建savepoint--相当于手动做了一次Checkpoint</span></span><br><span class="line">/export/server/flink/bin/flink savepoint 702b872ef80f08854c946a544f2ee1a5 hdfs://node1:8020/flink-checkpoint/savepoint/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止job</span></span><br><span class="line">/export/server/flink/bin/flink cancel 702b872ef80f08854c946a544f2ee1a5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新启动job,手动加载savepoint数据</span></span><br><span class="line">/export/server/flink/bin/flink run -s hdfs://node1:8020/flink-checkpoint/savepoint/savepoint-702b87-0a11b997fa70 --class cn.itcast.checkpoint.CheckpointDemo01 /root/ckp.jar </span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止yarn session</span></span><br><span class="line">yarn application -<span class="built_in">kill</span> application_1607782486484_0014</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flink学习笔记03-flink流批一体API</title>
      <link href="/post/17b8309a.html"/>
      <url>/post/17b8309a.html</url>
      
        <content type="html"><![CDATA[<h2 id="流处理相关概念"><a href="#流处理相关概念" class="headerlink" title="流处理相关概念"></a>流处理相关概念</h2><h3 id="数据的时效性"><a href="#数据的时效性" class="headerlink" title="数据的时效性"></a>数据的时效性</h3><p>日常工作中，我们一般会先把数据存储在表，然后对表的数据进行加工、分析。既然先存储在表中，那就会涉及到时效性概念。</p><p>如果我们处理以年，月为单位的级别的数据处理，进行统计分析，个性化推荐，那么数据的的最新日期离当前有几个甚至上月都没有问题。但是如果我们处理的是以天为级别，或者一小时甚至更小粒度的数据处理，那么就要求数据的时效性更高了。比如：对网站的实时监控、对异常日志的监控，这些场景需要工作人员立即响应，这样的场景下，传统的统一收集数据，再存到数据库中，再取出来进行分析就无法满足高时效性的需求了。</p><h3 id="流处理和批处理"><a href="#流处理和批处理" class="headerlink" title="流处理和批处理"></a>流处理和批处理</h3><p>官方介绍：<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/learn-flink/">https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/learn-flink/</a></p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210207153727.png" alt=""></p><ul><li>Batch Analytics，右边是 Streaming Analytics。批量计算: 统一收集数据-&gt;存储到DB-&gt;对数据进行批量处理，就是传统意义上使用类似于 Map Reduce、Hive、Spark Batch 等，对作业进行分析、处理、生成离线报表</li><li>Streaming Analytics 流式计算，顾名思义，就是对数据流进行处理，如使用流式分析引擎如 Storm，Flink 实时处理分析数据，应用较多的场景如实时大屏、实时报表。</li></ul><h4 id="流计算与批计算对比"><a href="#流计算与批计算对比" class="headerlink" title="流计算与批计算对比"></a>流计算与批计算对比</h4><ul><li>数据时效性不同：<ul><li>流式计算实时、低延迟，批量计算非实时、高延迟</li></ul></li><li>数据特性不同：<ul><li>流式计算的数据一般是动态的、没有边界的，而批处理的数据一般则是静态数据。</li></ul></li><li>应用场景不同：<ul><li>流式计算应用在实时场景，时效性要求比较高的场景，如实时推荐、业务监控。</li><li>批处理应用在实时性要求不高、离线计算的场景下，数据分析、离线报表等。</li></ul></li><li>运行方式不同：<ul><li>流式计算的任务持续进行</li><li>批量计算的任务则一次性完成</li></ul></li></ul><h3 id="流批一体API"><a href="#流批一体API" class="headerlink" title="流批一体API"></a>流批一体API</h3><h4 id="DataStream-API"><a href="#DataStream-API" class="headerlink" title="DataStream API"></a>DataStream API</h4><p>Flink 的核心 API 最初是针对特定的场景设计的，尽管 Table API / SQL 针对流处理和批处理已经实现了统一的 API，但当用户使用较底层的 API 时，仍然需要在批处理（DataSet API）和流处理（DataStream API）这两种不同的 API 之间进行选择。鉴于批处理是流处理的一种特例，将这两种 API 合并成统一的 API，有一些非常明显的好处，比如：</p><ul><li><p>可复用性</p><p>作业可以在流和批这两种执行模式之间自由地切换，而无需重写任何代码。因此，用户可以复用同一个作业，来处理实时数据和历史数据。</p></li><li><p>维护简单</p><p>统一的 API 意味着流和批可以共用同一组 connector，维护同一套代码，并能够轻松地实现流批混合执行，例如 backfilling 之类的场景。</p></li></ul><p>考虑到这些优点，社区已朝着流批统一的 DataStream API 迈出了第一步：支持高效的批处理（FLIP-134）。从长远来看，这意味着 DataSet API 将被弃用（FLIP-131），其功能将被包含在 DataStream API 和 Table API / SQL 中。</p><h4 id="Flink-API"><a href="#Flink-API" class="headerlink" title="Flink API"></a>Flink API</h4><p> Flink提供了多个层次的API供开发者使用，越往上抽象程度越高，使用起来越方便；越往下越底层，使用起来难度越大</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/企业微信截图_16126850208073.png" alt=""></p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/企业微信截图_16126850514716.png" alt=""></p><h4 id="编程模型"><a href="#编程模型" class="headerlink" title="编程模型"></a>编程模型</h4><p>Flink 应用程序结构主要包含三部分,Source/Transformation/Sink,如下图所示：</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/企业微信截图_16126851274958.png" alt=""></p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213120258.png" alt=""></p><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/企业微信截图_16126866951830.png" alt=""></p><h3 id="预定义Source"><a href="#预定义Source" class="headerlink" title="预定义Source"></a>预定义Source</h3><h4 id="基于集合的Source"><a href="#基于集合的Source" class="headerlink" title="基于集合的Source"></a>基于集合的Source</h4><ul><li>API<ul><li>env.fromElements(可变参数)</li><li>env.fromColletion(各种集合)</li><li>env.generateSequence(开始,结束)</li><li>env.fromSequence(开始,结束)</li></ul></li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SourceDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 0.env</span></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setRuntimeMode(RuntimeExecutionMode.AUTOMATIC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.source</span></span><br><span class="line">        DataStream&lt;String&gt; ds1 = env.fromElements(<span class="string">&quot;itcast hadoop spark&quot;</span>, <span class="string">&quot;itcast hadoop spark&quot;</span>, <span class="string">&quot;itcast hadoop&quot;</span>, <span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        DataStream&lt;String&gt; ds2 = env.fromCollection(Arrays.asList(<span class="string">&quot;itcast hadoop spark&quot;</span>, <span class="string">&quot;itcast hadoop spark&quot;</span>, <span class="string">&quot;itcast hadoop&quot;</span>, <span class="string">&quot;itcast&quot;</span>));</span><br><span class="line">        DataStream&lt;Long&gt; ds3 = env.generateSequence(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">        DataStream&lt;Long&gt; ds4 = env.fromSequence(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.transformation</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.sink</span></span><br><span class="line">        ds1.print();</span><br><span class="line">        ds2.print();</span><br><span class="line">        ds3.print();</span><br><span class="line">        ds4.print();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.execute</span></span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基于文件的Source"><a href="#基于文件的Source" class="headerlink" title="基于文件的Source"></a>基于文件的Source</h4><ul><li>API<ul><li>env.readTextFile(本地/HDFS文件/文件夹);//压缩文件也可以</li></ul></li></ul><p>示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SourceDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.env</span></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setRuntimeMode(RuntimeExecutionMode.AUTOMATIC);</span><br><span class="line">        <span class="comment">//2.source</span></span><br><span class="line">        <span class="comment">// * 1.env.readTextFile(本地文件/HDFS文件);//压缩文件也可以</span></span><br><span class="line">        DataStream&lt;String&gt; ds1 = env.readTextFile(<span class="string">&quot;data/input/words.txt&quot;</span>);</span><br><span class="line">        DataStream&lt;String&gt; ds2 = env.readTextFile(<span class="string">&quot;data/input/dir&quot;</span>);</span><br><span class="line">        DataStream&lt;String&gt; ds3 = env.readTextFile(<span class="string">&quot;hdfs://master:8020//wordcount/input/words.txt&quot;</span>);</span><br><span class="line">        DataStream&lt;String&gt; ds4 = env.readTextFile(<span class="string">&quot;data/input/wordcount.txt.gz&quot;</span>);</span><br><span class="line">        <span class="comment">//3.Transformation</span></span><br><span class="line">        <span class="comment">//4.sink</span></span><br><span class="line">        ds1.print();</span><br><span class="line">        ds2.print();</span><br><span class="line">        ds3.print();</span><br><span class="line">        ds4.print();</span><br><span class="line">        <span class="comment">//5.execute</span></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基于Socket的Source"><a href="#基于Socket的Source" class="headerlink" title="基于Socket的Source"></a>基于Socket的Source</h4><ul><li><p>需求</p><ul><li><p>在node1上使用nc -lk 9999 向指定端口发送数据</p><p>nc是netcat的简称，原本是用来设置路由器,我们可以利用它向某个端口发送数据</p><p>如果没有该命令可以下安装</p><p>yum install -y nc</p></li><li><p>使用Flink编写流处理应用程序实时统计单词数量</p></li></ul></li></ul><p>示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SourceDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.env</span></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setRuntimeMode(RuntimeExecutionMode.AUTOMATIC);</span><br><span class="line">        <span class="comment">//2.source</span></span><br><span class="line">        DataStream&lt;String&gt; linesDS = env.socketTextStream(<span class="string">&quot;node1&quot;</span>, <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.处理数据-transformation</span></span><br><span class="line">        <span class="comment">//3.1每一行数据按照空格切分成一个个的单词组成一个集合</span></span><br><span class="line">        DataStream&lt;String&gt; wordsDS = linesDS.flatMap(<span class="keyword">new</span> <span class="title class_">FlatMapFunction</span>&lt;String, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flatMap</span><span class="params">(String value, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">//value就是一行行的数据</span></span><br><span class="line">                String[] words = value.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">                    out.collect(word);<span class="comment">//将切割处理的一个个的单词收集起来并返回</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//3.2对集合中的每个单词记为1</span></span><br><span class="line">        DataStream&lt;Tuple2&lt;String, Integer&gt;&gt; wordAndOnesDS = wordsDS.map(<span class="keyword">new</span> <span class="title class_">MapFunction</span>&lt;String, Tuple2&lt;String, Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Tuple2&lt;String, Integer&gt; <span class="title function_">map</span><span class="params">(String value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">//value就是进来一个个的单词</span></span><br><span class="line">                <span class="keyword">return</span> Tuple2.of(value, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.3对数据按照单词(key)进行分组</span></span><br><span class="line">        <span class="comment">//KeyedStream&lt;Tuple2&lt;String, Integer&gt;, Tuple&gt; groupedDS = wordAndOnesDS.keyBy(0);</span></span><br><span class="line">        KeyedStream&lt;Tuple2&lt;String, Integer&gt;, String&gt; groupedDS = wordAndOnesDS.keyBy(t -&gt; t.f0);</span><br><span class="line">        <span class="comment">//3.4对各个组内的数据按照数量(value)进行聚合就是求sum</span></span><br><span class="line">        DataStream&lt;Tuple2&lt;String, Integer&gt;&gt; result = groupedDS.sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.输出结果-sink</span></span><br><span class="line">        result.print();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.触发执行-execute</span></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自定义Source"><a href="#自定义Source" class="headerlink" title="自定义Source"></a>自定义Source</h3><h4 id="随机生成数据"><a href="#随机生成数据" class="headerlink" title="随机生成数据"></a>随机生成数据</h4><ul><li><p>API</p><p>Flink还提供了数据源接口,我们实现该接口就可以实现自定义数据源，不同的接口有不同的功能，分类如下：</p><ul><li>SourceFunction:非并行数据源(并行度只能=1)</li><li>RichSourceFunction:多功能非并行数据源(并行度只能=1)</li><li>ParallelSourceFunction:并行数据源(并行度能够&gt;=1)</li><li>RichParallelSourceFunction:多功能并行数据源(并行度能够&gt;=1)—后续学习的Kafka数据源使用的就是该接口</li></ul></li><li><p>需求</p><p>每隔1秒随机生成一条订单信息(订单ID、用户ID、订单金额、时间戳)</p><p>要求：</p><ul><li>随机生成订单ID(UUID)</li><li>随机生成用户ID(0-2)</li><li>随机生成订单金额(0-100)</li><li>时间戳为当前系统时间</li></ul></li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SourceDemo04</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 0.env</span></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setRuntimeMode(RuntimeExecutionMode.AUTOMATIC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// source</span></span><br><span class="line">        DataStream&lt;Order&gt; orderDs = env.addSource(<span class="keyword">new</span> <span class="title class_">MyOrderSource</span>()).setParallelism(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sink</span></span><br><span class="line">        orderDs.print();</span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Order</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String id;</span><br><span class="line">        <span class="keyword">private</span> Integer userId;</span><br><span class="line">        <span class="keyword">private</span> Integer money;</span><br><span class="line">        <span class="keyword">private</span> Long createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyOrderSource</span> <span class="keyword">extends</span> <span class="title class_">RichParallelSourceFunction</span>&lt;Order&gt;&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行并生成数据</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(SourceContext&lt;Order&gt; ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">            <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">oid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">                <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> random.nextInt(<span class="number">3</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> random.nextInt(<span class="number">101</span>);</span><br><span class="line">                <span class="type">long</span> <span class="variable">createTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">                ctx.collect(<span class="keyword">new</span> <span class="title class_">Order</span>(oid,userId,money,createTime));</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行cancel命令的时候执行</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancel</span><span class="params">()</span> &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><p>实际开发中,经常会实时接收一些数据,要和MySQL中存储的一些规则进行匹配,那么这时候就可以使用Flink自定义数据源从MySQL中读取数据</p><ul><li><p>准备数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_student` (</span><br><span class="line">    `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">7</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_student` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;18&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_student` <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;19&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_student` <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;rose&#x27;</span>, <span class="string">&#x27;20&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_student` <span class="keyword">VALUES</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;19&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_student` <span class="keyword">VALUES</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;18&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_student` <span class="keyword">VALUES</span> (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;rose&#x27;</span>, <span class="string">&#x27;20&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SourceDemo05</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 0.env</span></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setRuntimeMode(RuntimeExecutionMode.AUTOMATIC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// source</span></span><br><span class="line">        DataStream&lt;Student&gt; studentDs = env.addSource(<span class="keyword">new</span> <span class="title class_">MySQLSource</span>()).setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sink</span></span><br><span class="line">        studentDs.print();</span><br><span class="line">        </span><br><span class="line">        env.execute();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MySQLSource</span> <span class="keyword">extends</span> <span class="title class_">RichParallelSourceFunction</span>&lt;Student&gt;&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// open 只执行一次，适合开启资源</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/example?useSSL=false&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id , name ,age from t_student &quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(SourceContext&lt;Student&gt; ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">                rs = ps.executeQuery();</span><br><span class="line">                <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    ctx.collect(<span class="keyword">new</span> <span class="title class_">Student</span>(id,name,age));</span><br><span class="line">                &#125;</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收到cancel 命令时，取消数据生成</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancel</span><span class="params">()</span> &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// close里面关闭资源</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>)&#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="literal">null</span>)&#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="literal">null</span>)&#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Transformation"><a href="#Transformation" class="headerlink" title="Transformation"></a>Transformation</h2><p><em>官网API列表：<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/dev/stream/operators/">https://ci.apache.org/projects/flink/flink-docs-release-1.12/dev/stream/operators/</a></em></p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/企业微信截图_16131887853852.png" alt=""></p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/企业微信截图_16131888548364.png" alt=""></p><p>整体来说，流式数据上的操作可以分为四类：</p><ul><li>第一类是对于单条记录的操作，比如筛除掉不符合要求的记录（Filter 操作），或者将每条记录都做一个转换（Map 操作）</li><li>第二类是对多条记录的操作。比如说统计一个小时内的订单总成交量，就需要将一个小时内的所有订单记录的成交量加到一起。为了支持这种类型的操作，就得通过 Window 将需要的记录关联到一起进行处理</li><li>第三类是对多个流进行操作并转换为单个流。例如，多个流可以通过 Union、Join 或Connect 等操作合到一起。这些操作合并的逻辑不同，但是它们最终都会产生了一个新的统一的流，从而可以进行一些跨流的操作。</li><li>第四类 DataStream 还支持与合并对称的拆分操作，即把一个流按一定规则拆分为多个流（Split操作），每个流是之前流的一个子集，这样我们就可以对不同的流作不同的处理。</li></ul><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>map:将函数作用在集合中的每一个元素上,并返回作用后的结果</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213120721.png" alt=""></p><h4 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h4><p>flatMap:将集合中的每个元素变成一个或多个元素,并返回扁平化之后的结果</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213120831.png" alt=""></p><h4 id="keyBy"><a href="#keyBy" class="headerlink" title="keyBy"></a>keyBy</h4><p>按照指定的key来对流中的数据进行分组</p><blockquote><p> 注意: 流处理中没有groupBy,而是keyBy</p></blockquote><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213121751.png" alt=""></p><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>filter:按照指定的条件对集合中的元素进行过滤,过滤出返回true/符合条件的元素</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213121838.png" alt=""></p><h4 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h4><p>sum:按照指定的字段对集合中的元素进行求和</p><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><p>reduce:对集合中的元素进行聚合</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213130112.png" alt=""></p><h4 id="综合例子"><a href="#综合例子" class="headerlink" title="综合例子"></a>综合例子</h4><p>对流数据中的单词进行统计，排除敏感词heihei</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformationDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 0.env</span></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setRuntimeMode(RuntimeExecutionMode.AUTOMATIC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// source nc -l -p 9999</span></span><br><span class="line">        DataStreamSource&lt;String&gt; lines = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// transformation</span></span><br><span class="line">        SingleOutputStreamOperator&lt;String&gt; words = lines.flatMap(<span class="keyword">new</span> <span class="title class_">FlatMapFunction</span>&lt;String, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flatMap</span><span class="params">(String value, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                String[] arr = value.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (String word : arr) &#123;</span><br><span class="line">                    out.collect(word);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        SingleOutputStreamOperator&lt;String&gt; filtered = words.filter(<span class="keyword">new</span> <span class="title class_">FilterFunction</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">filter</span><span class="params">(String value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> !value.equals(<span class="string">&quot;TMD&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        SingleOutputStreamOperator&lt;Tuple2&lt;String, Integer&gt;&gt; wordAndOne = filtered.map(<span class="keyword">new</span> <span class="title class_">MapFunction</span>&lt;String, Tuple2&lt;String, Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Tuple2 <span class="title function_">map</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> Tuple2.of(s, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        KeyedStream&lt;Tuple2&lt;String, Integer&gt;, String&gt; grouped = wordAndOne.keyBy(t -&gt; t.f0);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//SingleOutputStreamOperator&lt;Tuple2&lt;String, Integer&gt;&gt; result = grouped.sum(1);</span></span><br><span class="line"></span><br><span class="line">        SingleOutputStreamOperator&lt;Tuple2&lt;String, Integer&gt;&gt; result = grouped.reduce(<span class="keyword">new</span> <span class="title class_">ReduceFunction</span>&lt;Tuple2&lt;String, Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Tuple2&lt;String, Integer&gt; <span class="title function_">reduce</span><span class="params">(Tuple2&lt;String, Integer&gt; value1, Tuple2&lt;String, Integer&gt; value2)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> Tuple2.of(value1.f0, value1.f1 + value2.f1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sink</span></span><br><span class="line">        result.print();</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并-拆分"><a href="#合并-拆分" class="headerlink" title="合并-拆分"></a>合并-拆分</h3><h4 id="union和connect"><a href="#union和connect" class="headerlink" title="union和connect"></a>union和connect</h4><ul><li><p>union</p><p>union算子可以合并多个同类型的数据流，并生成同类型的数据流，即可以将多个DataStream[T]合并为一个新的DataStream[T]。数据将按照先进先出（First In First Out）的模式合并，且不去重。</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213125435.png" alt=""></p></li></ul><ul><li><p>connect</p><p>connect提供了和union类似的功能，用来连接两个数据流，它与union的区别在于：</p><ul><li><p>connect只能连接两个数据流，union可以连接多个数据流。</p></li><li><p>connect所连接的两个数据流的数据类型可以不一致，union所连接的两个数据流的数据类型必须一致。</p></li><li><p>两个DataStream经过connect之后被转化为ConnectedStreams，ConnectedStreams会对两个流的数据应用不同的处理方法，且双流之间可以共享状态。</p></li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213125626.png" alt=""></p></li></ul><p>示例代码：</p><ul><li><p>将两个String类型的流进行union</p></li><li><p>将一个String类型和一个Long类型的流进行connect</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformationDemo02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 0.env</span></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setRuntimeMode(RuntimeExecutionMode.AUTOMATIC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// source</span></span><br><span class="line">        DataStream&lt;String&gt; ds1 = env.fromElements(<span class="string">&quot;hadoop&quot;</span>, <span class="string">&quot;spark&quot;</span>, <span class="string">&quot;flink&quot;</span>);</span><br><span class="line">        DataStream&lt;String&gt; ds2 = env.fromElements(<span class="string">&quot;hadoop&quot;</span>, <span class="string">&quot;spark&quot;</span>, <span class="string">&quot;flink&quot;</span>);</span><br><span class="line">        DataStream&lt;Long&gt; ds3 = env.fromElements(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// transformation</span></span><br><span class="line">        DataStream&lt;String&gt; result1 = ds1.union(ds2);</span><br><span class="line">        <span class="comment">//ds1.union(ds3)</span></span><br><span class="line">        ConnectedStreams&lt;String, String&gt; result2 = ds1.connect(ds2);</span><br><span class="line">        ConnectedStreams&lt;String, Long&gt; result3 = ds1.connect(ds3);</span><br><span class="line"></span><br><span class="line">        SingleOutputStreamOperator&lt;String&gt; result = result3.map(<span class="keyword">new</span> <span class="title class_">CoMapFunction</span>&lt;String, Long, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">map1</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;string:&quot;</span> + s;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">map2</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Long:&quot;</span> + aLong;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// sink</span></span><br><span class="line">        result1.print();</span><br><span class="line">        result.print();</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="split、select和Side-Outputs"><a href="#split、select和Side-Outputs" class="headerlink" title="split、select和Side Outputs"></a>split、select和Side Outputs</h4><ul><li><p>Split就是将一个流分成多个流</p></li><li><p>Select就是获取分流后对应的数据</p><blockquote><p>注意：split函数已过期并移除</p></blockquote></li><li><p>Side Outputs可以使用process方法对流中数据进行处理，并针对不同的处理结果将数据收集到不同的OutputTag中</p></li></ul><p>示例代码：</p><ul><li><p>对流中的数据按照奇数和偶数进行分流，并获取分流后的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformationDemo03</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 0.env</span></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setRuntimeMode(RuntimeExecutionMode.AUTOMATIC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// source</span></span><br><span class="line">        DataStreamSource&lt;Integer&gt; ds = env.fromElements(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// transformation</span></span><br><span class="line">        OutputTag&lt;Integer&gt; oddTag = <span class="keyword">new</span> <span class="title class_">OutputTag</span>&lt;&gt;(<span class="string">&quot;奇数&quot;</span>, TypeInformation.of(Integer.class));</span><br><span class="line">        OutputTag&lt;Integer&gt; evenTag = <span class="keyword">new</span> <span class="title class_">OutputTag</span>&lt;&gt;(<span class="string">&quot;偶数&quot;</span>,TypeInformation.of(Integer.class));</span><br><span class="line"></span><br><span class="line">        SingleOutputStreamOperator&lt;Integer&gt; result = ds.process(<span class="keyword">new</span> <span class="title class_">ProcessFunction</span>&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processElement</span><span class="params">(Integer value, Context context, Collector&lt;Integer&gt; collector)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">if</span> (value % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    context.output(evenTag, value);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    context.output(oddTag, value);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        DataStream&lt;Integer&gt; oddResult = result.getSideOutput(oddTag);</span><br><span class="line">        DataStream&lt;Integer&gt; evenResult = result.getSideOutput(evenTag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sink</span></span><br><span class="line">        oddResult.print(<span class="string">&quot;奇数&quot;</span>);</span><br><span class="line">        evenResult.print(<span class="string">&quot;偶数&quot;</span>);</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><h4 id="rebalance重平衡分区"><a href="#rebalance重平衡分区" class="headerlink" title="rebalance重平衡分区"></a>rebalance重平衡分区</h4><p>类似于Spark中的repartition,但是功能更强大,可以直接解决数据倾斜</p><p>Flink也有数据倾斜的时候，比如当前有数据量大概10亿条数据需要处理，在处理过程中可能会发生如图所示的状况，出现了数据倾斜，其他3台机器执行完毕也要等待机器1执行完毕后才算整体将任务完成</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213155716.png" alt=""></p><p>所以在实际的工作中，出现这种情况比较好的解决方案就是rebalance(内部使用round robin方法将数据均匀打散)</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213155736.png" alt=""></p><p>示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformationDemo04</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 0.env</span></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setRuntimeMode(RuntimeExecutionMode.AUTOMATIC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// source</span></span><br><span class="line">        DataStream&lt;Long&gt; longDS = env.fromSequence(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// transformation</span></span><br><span class="line">        DataStream&lt;Long&gt; filterDS = longDS.filter(<span class="keyword">new</span> <span class="title class_">FilterFunction</span>&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">filter</span><span class="params">(Long num)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> num &gt; <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        SingleOutputStreamOperator&lt;Tuple2&lt;Integer, Integer&gt;&gt; result1 = filterDS.map(<span class="keyword">new</span> <span class="title class_">RichMapFunction</span>&lt;Long, Tuple2&lt;Integer, Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Tuple2&lt;Integer, Integer&gt; <span class="title function_">map</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">// 子任务id(分区编号)</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">subtaskId</span> <span class="operator">=</span> getRuntimeContext().getIndexOfThisSubtask();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> Tuple2.of(subtaskId, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).keyBy(t -&gt; t.f0)</span><br><span class="line">                .sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用了rebalance解决了数据倾斜</span></span><br><span class="line">        SingleOutputStreamOperator&lt;Tuple2&lt;Integer, Integer&gt;&gt; result2 = filterDS.rebalance().map(<span class="keyword">new</span> <span class="title class_">RichMapFunction</span>&lt;Long, Tuple2&lt;Integer, Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Tuple2&lt;Integer, Integer&gt; <span class="title function_">map</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">// 子任务id(分区编号)</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">subtaskId</span> <span class="operator">=</span> getRuntimeContext().getIndexOfThisSubtask();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> Tuple2.of(subtaskId, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).keyBy(t -&gt; t.f0)</span><br><span class="line">                .sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sink</span></span><br><span class="line">        env.execute();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他分区"><a href="#其他分区" class="headerlink" title="其他分区"></a>其他分区</h4><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213162421.png" alt=""></p><h2 id="Sink"><a href="#Sink" class="headerlink" title="Sink"></a>Sink</h2><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213162513.png" alt=""></p><h3 id="预定义Sink"><a href="#预定义Sink" class="headerlink" title="预定义Sink"></a>预定义Sink</h3><h4 id="基于控制台和文件的Sink"><a href="#基于控制台和文件的Sink" class="headerlink" title="基于控制台和文件的Sink"></a>基于控制台和文件的Sink</h4><ul><li><p>ds.print直接输出到控制台</p></li><li><p>ds.printToErr()直接输出到控制台,用红色</p></li><li><p>ds.writeAsText(“本地/HDFS的path”,WriteMode.OVERWRITE).setParallelism(1)</p><ul><li><p>在输出到path的时候,可以在前面设置并行度,如果</p><p>并行度&gt;1,则path为目录</p><p>并行度=1,则path为文件名</p></li></ul></li></ul><p>示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SinkDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 0.env</span></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setRuntimeMode(RuntimeExecutionMode.AUTOMATIC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// source</span></span><br><span class="line">        DataStream&lt;String&gt; ds = env.readTextFile(<span class="string">&quot;src/main/resources/words.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sink</span></span><br><span class="line">        ds.print(<span class="string">&quot;输出标识&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 会在控制台上以红色输出</span></span><br><span class="line">        ds.printToErr();</span><br><span class="line">        ds.writeAsText(<span class="string">&quot;data/output/result1&quot;</span>).setParallelism(<span class="number">1</span>);</span><br><span class="line">        ds.writeAsText(<span class="string">&quot;data/output/result2&quot;</span>).setParallelism(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义Sink"><a href="#自定义Sink" class="headerlink" title="自定义Sink"></a>自定义Sink</h3><h4 id="MySQL-1"><a href="#MySQL-1" class="headerlink" title="MySQL"></a>MySQL</h4><p>将Flink集合中的数据通过自定义Sink保存到MySQL</p><p>示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SinkDemo02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 0.env</span></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setRuntimeMode(RuntimeExecutionMode.AUTOMATIC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// source</span></span><br><span class="line">        DataStreamSource&lt;Student&gt; studentDs = env.fromElements(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="literal">null</span>, <span class="string">&quot;tonyma&quot;</span>, <span class="number">18</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// sink</span></span><br><span class="line">        studentDs.addSink(<span class="keyword">new</span> <span class="title class_">MySQLSink</span>());</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MySQLSink</span> <span class="keyword">extends</span> <span class="title class_">RichSinkFunction</span>&lt;Student&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/db?useSSL=false&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into student(`id`,`name`,`age`) values (null ,?,?) &quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Student value, Context context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="comment">// 设置?占位符参数值</span></span><br><span class="line">            ps.setString(<span class="number">1</span>,value.getName());</span><br><span class="line">            ps.setInt(<span class="number">2</span>,value.getAge());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行sql</span></span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>)&#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="literal">null</span>)&#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Connectors"><a href="#Connectors" class="headerlink" title="Connectors"></a>Connectors</h2><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><blockquote><p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/dev/connectors/jdbc.html">https://ci.apache.org/projects/flink/flink-docs-release-1.12/dev/connectors/jdbc.html</a></p></blockquote><p>示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 0.env</span></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setRuntimeMode(RuntimeExecutionMode.AUTOMATIC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// source</span></span><br><span class="line">        DataStream&lt;Student&gt; studentDs = env.fromElements(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="literal">null</span>, <span class="string">&quot;tony2&quot;</span>, <span class="number">18</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sink</span></span><br><span class="line">        studentDs.addSink(JdbcSink.sink(<span class="string">&quot;insert into student(`id`,`name`,`age`) values (null ,?,?) &quot;</span>,(ps,value)-&gt;&#123;</span><br><span class="line">            ps.setString(<span class="number">1</span>,value.getName());</span><br><span class="line">            ps.setInt(<span class="number">2</span>,value.getAge());</span><br><span class="line">        &#125;,<span class="keyword">new</span> <span class="title class_">JdbcConnectionOptions</span>.JdbcConnectionOptionsBuilder()</span><br><span class="line">        .withDriverName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>)</span><br><span class="line">        .withUrl(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/db?useSSL=false&quot;</span>)</span><br><span class="line">        .withUsername(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">        .withPassword(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">        .build()));</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> Integer id;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><h4 id="POM依赖"><a href="#POM依赖" class="headerlink" title="POM依赖"></a>POM依赖</h4><p>Flink 里已经提供了一些绑定的 Connector，例如 kafka source 和 sink，Es sink 等。读写kafka、es、rabbitMQ 时可以直接使用相应 connector 的 api 即可，虽然该部分是 Flink 项目源代码里的一部分，但是真正意义上不算作 Flink 引擎相关逻辑，并且该部分没有打包在二进制的发布包里面。所以在提交 Job 时候需要注意， job 代码jar 包中一定要将相应的 connetor 相关类打包进去，否则在提交作业时就会失败，提示找不到相应的类，或初始化某些类异常。</p><blockquote><p><a href="https://ci.apache.org/projects/flink/flink-docs-stable/dev/connectors/kafka.html">https://ci.apache.org/projects/flink/flink-docs-stable/dev/connectors/kafka.html</a></p></blockquote><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213165304.png" alt=""></p><h4 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h4><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213165335.png" alt=""></p><p>以下参数都必须/建议设置上：</p><ul><li><p>订阅的主题</p></li><li><p>反序列化规则</p></li><li><p>消费者属性-集群地址</p></li><li><p>消费者属性-消费者组id(如果不设置,会有默认的,但是默认的不方便管理)</p></li><li><p>消费者属性-offset重置规则,如earliest/latest…</p></li><li><p>动态分区检测(当kafka的分区数变化/增加时,Flink能够检测到!)</p></li><li><p>如果没有设置Checkpoint,那么可以设置自动提交offset</p></li></ul><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213165630.png" alt=""></p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213165644.png" alt=""></p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213165717.png" alt=""></p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213165729.png" alt=""></p><p>实际的生产环境中可能有这样一些需求，比如：</p><ul><li>场景一：有一个 Flink 作业需要将五份数据聚合到一起，五份数据对应五个 kafka topic，随着业务增长，新增一类数据，同时新增了一个 kafka topic，如何在不重启作业的情况下作业自动感知新的 topic。</li><li>场景二：作业从一个固定的 kafka topic 读数据，开始该 topic 有 10 个 partition，但随着业务的增长数据量变大，需要对 kafka partition 个数进行扩容，由 10 个扩容到 20。该情况下如何在不重启作业情况下动态感知新扩容的 partition？</li></ul><p>针对上面的两种场景，首先需要在构建 FlinkKafkaConsumer 时的 properties 中设置 flink.partition-discovery.interval-millis参数为非负值，表示开启动态发现的开关，以及设置的时间间隔。此时 FlinkKafkaConsumer 内部会启动一个单独的线程定期去 kafka 获取最新的 meta 信息。</p><p>针对场景一，还需在构建 FlinkKafkaConsumer 时，topic 的描述可以传一个正则表达式描述的 pattern。每次获取最新 kafka meta 时获取正则匹配的最新 topic 列表。</p><p>针对场景二，设置前面的动态发现参数，在定期获取 kafka 最新 meta 信息时会匹配新的 partition。为了保证数据的正确性，新发现的 partition 从最早的位置开始读取。</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210213170418.png" alt=""></p><p>注意:</p><p>开启 checkpoint 时 offset 是 Flink 通过状态 state 管理和恢复的，并不是从 kafka 的 offset 位置恢复。在 checkpoint 机制下，作业从最近一次checkpoint 恢复，本身是会回放部分历史数据，导致部分数据重复消费，Flink 引擎仅保证计算状态的精准一次，要想做到端到端精准一次需要依赖一些幂等的存储系统或者事务操作。</p><h4 id="代码实现-Kafka-Consumer"><a href="#代码实现-Kafka-Consumer" class="headerlink" title="代码实现-Kafka Consumer"></a>代码实现-Kafka Consumer</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Desc</span><br><span class="line"> * 需求:使用flink-connector-kafka_2.12中的FlinkKafkaConsumer消费Kafka中的数据做WordCount</span><br><span class="line"> * 需要设置如下参数:</span><br><span class="line"> * 1.订阅的主题</span><br><span class="line"> * 2.反序列化规则</span><br><span class="line"> * 3.消费者属性-集群地址</span><br><span class="line"> * 4.消费者属性-消费者组id(如果不设置,会有默认的,但是默认的不方便管理)</span><br><span class="line"> * 5.消费者属性-offset重置规则,如earliest/latest...</span><br><span class="line"> * 6.动态分区检测(当kafka的分区数变化/增加时,Flink能够检测到!)</span><br><span class="line"> * 7.如果没有设置Checkpoint,那么可以设置自动提交offset,后续学习了Checkpoint会把offset随着做Checkpoint的时候提交到Checkpoint和默认主题中</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class KafkaConsumerDemo &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        // 0.env</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setRuntimeMode(RuntimeExecutionMode.AUTOMATIC);</span><br><span class="line"></span><br><span class="line">        // source</span><br><span class="line">        Properties props  = new Properties();</span><br><span class="line">        props.setProperty(&quot;bootstrap.servers&quot;, &quot;master:9092&quot;);</span><br><span class="line">        props.setProperty(&quot;group.id&quot;, &quot;flink&quot;);</span><br><span class="line">        // 有offset记录从记录位置开始消费，</span><br><span class="line">        // latest--&gt;没有记录从最新的或最后的消息开始消费</span><br><span class="line">        // earliest--&gt;有offset记录从记录位置开始消费，没有记录从最早的或最开始的消息开始消费</span><br><span class="line">        props.setProperty(&quot;auto.offset.reset&quot;,&quot;latest&quot;);</span><br><span class="line">        //会开启一个后台线程每隔5s检测一下Kafka的分区情况，实现动态分区检测</span><br><span class="line">        props.setProperty(&quot;flink.partition-discovery.interval-millis&quot;,&quot;5000&quot;);</span><br><span class="line">        // 自动提交(提交到默认主题)</span><br><span class="line">        props.setProperty(&quot;enable.auto.commit&quot;, &quot;true&quot;);</span><br><span class="line">        // 自动提交的时间</span><br><span class="line">        props.setProperty(&quot;auto.commit.interval.ms&quot;, &quot;2000&quot;);</span><br><span class="line">        FlinkKafkaConsumer kafkaSource = new FlinkKafkaConsumer&lt;String&gt;(&quot;flink_kafka&quot;, new SimpleStringSchema(), props);</span><br><span class="line"></span><br><span class="line">        // 使用kafkaSource</span><br><span class="line">        DataStream kafkaDS = env.addSource(kafkaSource);</span><br><span class="line"></span><br><span class="line">        // transformation</span><br><span class="line"></span><br><span class="line">        // sink</span><br><span class="line">        kafkaDS.print();</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码实现-Kafka-Producer"><a href="#代码实现-Kafka-Producer" class="headerlink" title="代码实现-Kafka Producer"></a>代码实现-Kafka Producer</h4><p>将Flink集合中的数据通过自定义Sink保存到Kafka</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KafkaSinkDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 0.env</span></span><br><span class="line">        <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setRuntimeMode(RuntimeExecutionMode.AUTOMATIC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// source</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.setProperty(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;master:9092&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;flink&quot;</span>);</span><br><span class="line">        <span class="comment">// 有offset记录从记录位置开始消费，</span></span><br><span class="line">        <span class="comment">// latest--&gt;没有记录从最新的或最后的消息开始消费</span></span><br><span class="line">        <span class="comment">// earliest--&gt;有offset记录从记录位置开始消费，没有记录从最早的或最开始的消息开始消费</span></span><br><span class="line">        props.setProperty(<span class="string">&quot;auto.offset.reset&quot;</span>,<span class="string">&quot;latest&quot;</span>);</span><br><span class="line">        <span class="comment">//会开启一个后台线程每隔5s检测一下Kafka的分区情况，实现动态分区检测</span></span><br><span class="line">        props.setProperty(<span class="string">&quot;flink.partition-discovery.interval-millis&quot;</span>,<span class="string">&quot;5000&quot;</span>);</span><br><span class="line">        <span class="comment">// 自动提交(提交到默认主题)</span></span><br><span class="line">        props.setProperty(<span class="string">&quot;enable.auto.commit&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="comment">// 自动提交的时间</span></span><br><span class="line">        props.setProperty(<span class="string">&quot;auto.commit.interval.ms&quot;</span>, <span class="string">&quot;2000&quot;</span>);</span><br><span class="line">        <span class="type">FlinkKafkaConsumer</span> <span class="variable">kafkaSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FlinkKafkaConsumer</span>&lt;String&gt;(<span class="string">&quot;flink_kafka&quot;</span>, <span class="keyword">new</span> <span class="title class_">SimpleStringSchema</span>(), props);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用kafkaSource</span></span><br><span class="line">        <span class="type">DataStream</span> <span class="variable">kafkaDS</span> <span class="operator">=</span> env.addSource(kafkaSource);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// transformation</span></span><br><span class="line">        <span class="type">SingleOutputStreamOperator</span> <span class="variable">etlDS</span> <span class="operator">=</span> kafkaDS.filter(<span class="keyword">new</span> <span class="title class_">FilterFunction</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">filter</span><span class="params">(String value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> value.contains(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// sink</span></span><br><span class="line">        etlDS.print();</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props2.setProperty(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;master:9092&quot;</span>);</span><br><span class="line">        etlDS.addSink(<span class="keyword">new</span> <span class="title class_">FlinkKafkaProducer</span>&lt;String&gt;(<span class="string">&quot;flink_kafka2&quot;</span>, <span class="keyword">new</span> <span class="title class_">SimpleStringSchema</span>(), props2));</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> Integer id;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flink学习笔记01-flink核心特性</title>
      <link href="/post/543c5edd.html"/>
      <url>/post/543c5edd.html</url>
      
        <content type="html"><![CDATA[<h1 id="flink学习笔记01-flink核心特性"><a href="#flink学习笔记01-flink核心特性" class="headerlink" title="flink学习笔记01-flink核心特性"></a>flink学习笔记01-flink核心特性</h1><p>flink有着高吞吐，低延迟，是现在主流的流式框架之一</p><h2 id="flink核心特性"><a href="#flink核心特性" class="headerlink" title="flink核心特性"></a>flink核心特性</h2><ul><li>统一数据处理组件栈，处理不同类型的数据需求（Batch, Stream, Mache Learning, Graph）</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210109223327.png" alt=""></p><ul><li>支持事件时间（Event Time）,接入时间（Ingestion Time）,处理时间（Processing Time）等时间概念。</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210109223546.png" alt=""></p><ul><li>基于轻量级分布式快照(Snapshot) 实现的容错</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210109223659.png" alt=""></p><ul><li>支持有状态计算</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210109223748.png" alt=""></p><ul><li>支持高度灵活的窗口（Window）操作<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210109223822.png" alt=""></li><li>带反压的连续流模型</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210109223915.png" alt=""></p><ul><li>基于JVM实现独立的内存管理：<ul><li>Flink在JVM中实现了自己的内存管理。</li></ul></li><li>应用可以超出主内存的大小限制，并且承受更少的垃圾收集的开销。</li><li>对象序列化二进制存储，类似于C对内存的管理。</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210109224207.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flink学习笔记02-flink部署与应用</title>
      <link href="/post/d9ebfbf9.html"/>
      <url>/post/d9ebfbf9.html</url>
      
        <content type="html"><![CDATA[<h2 id="flink集群架构"><a href="#flink集群架构" class="headerlink" title="flink集群架构"></a>flink集群架构</h2><p>flink集群架构由<strong>JobManager</strong>, <strong>TaskManager</strong> 以及<strong>Client</strong>组成。</p><ul><li>JobManger: 管理节点，每个集群至少一个，管理整个集群计算资源，Job管理与调度执行，以及Checkpoint协调。</li><li>TaskManager: 每个集群有多个TM，负责计算资源提供。</li><li>Client: 本地执行应用main()方法解析JobGraph对象，并最终将JobGraph提交到JobManager运行，同时监控Job执行的状态。</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210110114930.png" alt=""></p><h3 id="JobManger"><a href="#JobManger" class="headerlink" title="JobManger"></a>JobManger</h3><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210110115752.png" alt=""></p><h3 id="TaskManager"><a href="#TaskManager" class="headerlink" title="TaskManager"></a>TaskManager</h3><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210110115837.png" alt=""></p><h3 id="client"><a href="#client" class="headerlink" title="client"></a>client</h3><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210110120151.png" alt=""></p><h3 id="JobGraph"><a href="#JobGraph" class="headerlink" title="JobGraph"></a>JobGraph</h3><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210110120417.png" alt=""></p><h2 id="flink集群部署模式"><a href="#flink集群部署模式" class="headerlink" title="flink集群部署模式"></a>flink集群部署模式</h2><h3 id="flink集群部署模式对比"><a href="#flink集群部署模式对比" class="headerlink" title="flink集群部署模式对比"></a>flink集群部署模式对比</h3><p>根据以下<strong>两种</strong>条件将集群部署模式分为<strong>三种</strong>类型：</p><p>1.集群的生命周期和资源隔离</p><p>2.根据程序main()方法执行在client还是JobManager</p><ul><li>Session Mode<ul><li>共享JobManager和TaskManager, 所有提交的Job都在一个runtime中运行</li></ul></li><li>Per-Job Mode<ul><li>独享JobManager与TaskManager, 好比为每个Job单独启动一个Runtime</li></ul></li><li>Application Mode (1.11版本提出)<ul><li>Application的main() 运行在Cluster上，而不在客户端</li><li>每个Application对应一个Runtime, Application中科院含有多个Job</li></ul></li></ul><h3 id="Session-集群运行模式"><a href="#Session-集群运行模式" class="headerlink" title="Session 集群运行模式"></a>Session 集群运行模式</h3><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210110122151.png" alt=""></p><h3 id="Per-Job集群运行模式"><a href="#Per-Job集群运行模式" class="headerlink" title="Per-Job集群运行模式"></a>Per-Job集群运行模式</h3><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210110122924.png" alt=""></p><h3 id="Session集群和Per-Job类型集群问题"><a href="#Session集群和Per-Job类型集群问题" class="headerlink" title="Session集群和Per-Job类型集群问题"></a>Session集群和Per-Job类型集群问题</h3><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210110123440.png" alt=""></p><h3 id="Application-Mode集群运行模式"><a href="#Application-Mode集群运行模式" class="headerlink" title="Application Mode集群运行模式"></a>Application Mode集群运行模式</h3><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210110123526.png" alt=""></p><h2 id="集群资源管理器支持"><a href="#集群资源管理器支持" class="headerlink" title="集群资源管理器支持"></a>集群资源管理器支持</h2><h3 id="Cluster-Management支持"><a href="#Cluster-Management支持" class="headerlink" title="Cluster Management支持"></a>Cluster Management支持</h3><p>flink支持以下资源管理器部署集群：</p><ul><li>Standalone</li><li>Hadoop Yarn</li><li>Apache Mesos</li><li>Docker</li><li>Kubernetes</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210110130434.png" alt=""></p><h3 id="flink集群部署对比"><a href="#flink集群部署对比" class="headerlink" title="flink集群部署对比"></a>flink集群部署对比</h3><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210110130530.png" alt=""></p><h3 id="Native集群部署"><a href="#Native集群部署" class="headerlink" title="Native集群部署"></a>Native集群部署</h3><ul><li>当在ClusterManagement上启动Session集群时，只启动JobManager实例，不启动TaskManager</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210110131117.png" alt=""></p><ul><li>提交Job-1后根据Job的资源申请，动态启动TaskManager满足计算需求。</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210110131236.png" alt=""></p><ul><li>提交Job-2, Job-3后，再次向ClusterManagement中申请TM资源。</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210110131454.png" alt=""></p><ul><li>Session 集群根据实际提交的Job资源动态申请和启动TaskManager计算资源。</li><li>支持Native部署模式的有Yarn, Kubernetes, Mesos资源管理器。</li><li>Standalone不支持Native部署。</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210110131703.png" alt=""></p><h2 id="Standalone原理剖析与实践"><a href="#Standalone原理剖析与实践" class="headerlink" title="Standalone原理剖析与实践"></a>Standalone原理剖析与实践</h2><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210110144618.png" alt=""></p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210110144946.png" alt=""></p><h4 id="Standalone-单机-集群部署步骤"><a href="#Standalone-单机-集群部署步骤" class="headerlink" title="Standalone(单机) 集群部署步骤"></a>Standalone(单机) 集群部署步骤</h4><ol><li><p>下载安装flink安装包或者通过源码编译生成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://archive.apache.org/dist/flink/flink-1.11.1/flink-1.11.1-bin-scala_2.11.tgz</span><br></pre></td></tr></table></figure></li><li><p>解压安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf flink-1.11.1-bin-scala_2.11.tgz</span><br></pre></td></tr></table></figure></li><li><p>启动flink集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd flink-1.11.1</span><br><span class="line">bin/start-cluster.sh</span><br></pre></td></tr></table></figure></li></ol><h4 id="Standalone-多机-集群部署步骤"><a href="#Standalone-多机-集群部署步骤" class="headerlink" title="Standalone(多机) 集群部署步骤"></a>Standalone(多机) 集群部署步骤</h4><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210110145724.png" alt=""></p><h2 id="flink-on-Yarn-原理剖析与实践"><a href="#flink-on-Yarn-原理剖析与实践" class="headerlink" title="flink on Yarn 原理剖析与实践"></a>flink on Yarn 原理剖析与实践</h2><h4 id="Yarn-集群架构原理"><a href="#Yarn-集群架构原理" class="headerlink" title="Yarn 集群架构原理"></a>Yarn 集群架构原理</h4><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210110150423.png" alt=""></p><h4 id="flink-on-Yarn-Session模式"><a href="#flink-on-Yarn-Session模式" class="headerlink" title="flink on Yarn- Session模式"></a>flink on Yarn- Session模式</h4><ul><li>多JobManager 共享 Dispathcher 和 YarnResourceManager</li><li>支持Native模式，TM动态申请</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210110150709.png" alt=""></p><h4 id="flink-on-Yarn-Per-Job模式"><a href="#flink-on-Yarn-Per-Job模式" class="headerlink" title="flink on Yarn- Per-Job模式"></a>flink on Yarn- Per-Job模式</h4><ul><li>单个JobManager独享YarnResourceManager和Dispatcher</li><li>Application Master与Flink Master节点处于同一个Container</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20210110151803.png" alt=""></p><h4 id="flink-on-Yarn-优势与劣势"><a href="#flink-on-Yarn-优势与劣势" class="headerlink" title="flink on Yarn 优势与劣势"></a>flink on Yarn 优势与劣势</h4><p>主要优势：</p><ul><li>与现有大数据平台无缝对接（Hadoop2.4+）</li><li>部署集群与任务提交都非常简单</li><li>资源管理统一通过Yarn管理，提升整体资源利用率</li><li>基于Native方式，TaskManager资源按需申请和启动，防止资源浪费</li><li>容错保证借助于Hadoop Yarn提供的自动failover机制，能保证JobManager, TaskManager节点异常恢复</li></ul><p>主要劣势：</p><ul><li>资源隔离问题，尤其是网络资源的隔离，Yarn做的还不够完善</li><li>离线和实时作业同时运行相互干扰等问题需要重视</li><li>Kerberos认证超时问题导致Checkpoint无法持久化</li></ul><h4 id="flink-on-Yarn-部署实践"><a href="#flink-on-Yarn-部署实践" class="headerlink" title="flink on Yarn 部署实践"></a>flink on Yarn 部署实践</h4><h5 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h5><ul><li>Apache Hadoop 2.4.1及以上</li><li>HDFS (Hadoop Distributed File System) 环境</li><li>Hadoop依赖包</li></ul><h5 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h5><ul><li>下载和解压安装包（参考Standalone模式）</li><li>配置HADOOP_CONFIG_DIR环境变量</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_HOME=/usr/hdp/2.6.4.0-91/hadoop</span><br><span class="line">export HADOOP_CONF_DIR=/usr/hdp/2.6.4.0-91/hadoop/conf</span><br><span class="line">export HADOOP_CLASSPATH=/usr/hdp/2.6.4.0-91/hadoop/lib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export FLINK_HOME=/data/software/flink-1.11.1</span><br><span class="line">export PATH=$PATH:$FLINK_HOME/bin:$HADOOP_CLASSPATH</span><br></pre></td></tr></table></figure><ul><li>如果HADOOP_CLASSPATH配置后，作业执行还报Hadoop依赖找不到错误，可以到如下地址下载，并放置在lib路径中：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd lib/</span><br><span class="line">wget https://repo.maven.apache.org/maven2/org/apache/flink/flink-shaded-hadoop-2-uber/2.7.5-10.0/flink-shaded-hadoop-2-uber-2.7.5-10.0.jar</span><br></pre></td></tr></table></figure><h5 id="基于Session-Mode部署"><a href="#基于Session-Mode部署" class="headerlink" title="基于Session Mode部署"></a>基于Session Mode部署</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/yarn-session.sh -tm 1028 -s 8</span><br></pre></td></tr></table></figure><p>可配置的运行参数如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line">   Optional</span><br><span class="line">     -D &lt;arg&gt;                        Dynamic properties</span><br><span class="line">     -d,--detached                   Start detached</span><br><span class="line">     -jm,--jobManagerMemory &lt;arg&gt;    Memory for JobManager Container with optional unit (default: MB)</span><br><span class="line">     -nm,--name                      Set a custom name for the application on YARN</span><br><span class="line">     -at,--applicationType           Set a custom application type on YARN</span><br><span class="line">     -q,--query                      Display available YARN resources (memory, cores)</span><br><span class="line">     -qu,--queue &lt;arg&gt;               Specify YARN queue.</span><br><span class="line">     -s,--slots &lt;arg&gt;                Number of slots per TaskManager</span><br><span class="line">     -tm,--taskManagerMemory &lt;arg&gt;   Memory per TaskManager Container with optional unit (default: MB)</span><br><span class="line">     -z,--zookeeperNamespace &lt;arg&gt;   Namespace to create the Zookeeper sub-paths for HA mode</span><br></pre></td></tr></table></figure><h6 id="Attach-to-an-existing-Session"><a href="#Attach-to-an-existing-Session" class="headerlink" title="Attach to an existing Session"></a>Attach to an existing Session</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/yarn-session.sh -id application_1463870264508_0029</span><br></pre></td></tr></table></figure><h6 id="提交Flink作业到指定Session集群"><a href="#提交Flink作业到指定Session集群" class="headerlink" title="提交Flink作业到指定Session集群"></a>提交Flink作业到指定Session集群</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">上传测试文件</span></span><br><span class="line">hdfs dfs -put ./data-set/frostroas.txt /flink-training</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行Flink程序</span></span><br><span class="line">./bin/flink run ./examples/batch/WordCount.jar --input hdfs://node02:8020/flink-training/frostroad.txt --output hdfs://node02:8020/flink-training/wordcount-result.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果集群配置了HA，执行以下命令</span></span><br><span class="line">./bin/flink run ./examples/batch/WordCount.jar --input hdfs://hacluster/flink-training/frostroad.txt --output hdfs://hacluster/flink-training/wordcount-result.txt</span><br></pre></td></tr></table></figure><h6 id="停止集群服务"><a href="#停止集群服务" class="headerlink" title="停止集群服务"></a>停止集群服务</h6><p>方式1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;stop&quot; | ./bin/yarn-session.sh -id application_1597152309776_0008</span><br></pre></td></tr></table></figure><p>方式2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到作业对应的ApplicationID</span></span><br><span class="line">yarn application list</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Kill命令</span></span><br><span class="line">yarn application kill application_1597152309776_0008</span><br></pre></td></tr></table></figure><h6 id="flink在Yarn-HA模式下报错"><a href="#flink在Yarn-HA模式下报错" class="headerlink" title="flink在Yarn HA模式下报错"></a>flink在Yarn HA模式下报错</h6><p>yarn 非ha的时候是没问题的<br>在HA模式下，发现报错，信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.RuntimeException: java.lang.ClassNotFoundException: Class org.apache.hadoop.yarn.client.RequestHedgingRMFailoverProxyProvider not found</span><br></pre></td></tr></table></figure><p>修改yarn的配置:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn.client.failover-proxy-provider=org.apache.hadoop.yarn.client.ConfiguredRMFailoverProxyProvider</span><br></pre></td></tr></table></figure><h5 id="基于Per-Job-Mode部署"><a href="#基于Per-Job-Mode部署" class="headerlink" title="基于Per-Job Mode部署"></a>基于Per-Job Mode部署</h5><p>直接运行如下命令即可提交作业：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/flink run -m yarn-cluster ./examples/batch/WordCount.jar</span><br></pre></td></tr></table></figure><p>Detach 模式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/flink run -m yarn-cluster -d ./examples/batch/WordCount.jar</span><br></pre></td></tr></table></figure><h5 id="基于Application-Mode部署"><a href="#基于Application-Mode部署" class="headerlink" title="基于Application Mode部署"></a>基于Application Mode部署</h5><ul><li>通过从本地上传Dependencies和User Application Jar</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./bin/flink run-application -t yarn-application \</span><br><span class="line">    -Djobmanager.memory.process.size=2048m \</span><br><span class="line">    -Dtaskmanager.memory.process.size=4096m \</span><br><span class="line">    ./MyApplication.jar</span><br></pre></td></tr></table></figure><ul><li>通过从HDFS获取Dependencies和本地上传User Application Jar</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">./bin/flink run-application -t yarn-application \</span><br><span class="line">    -Djobmanager.memory.process.size=2048m \</span><br><span class="line">    -Dtaskmanager.memory.process.size=4096m \</span><br><span class="line">    -Dyarn.provided.lib.dirs=&quot;hdfs://node02:8020/flink-training/flink-1.11.1&quot; \</span><br><span class="line">    /home/flink-training/cluster-management/flink-on-yarn-1.11.1/examples/streaming/TopSpeedWindowing.jar</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果配置了HA</span></span><br><span class="line">./bin/flink run-application -t yarn-application \</span><br><span class="line">    -Djobmanager.memory.process.size=2048m \</span><br><span class="line">    -Dtaskmanager.memory.process.size=4096m \</span><br><span class="line">    -Dyarn.provided.lib.dirs=&quot;hdfs://hacluster/flink-training/flink-1.11.1&quot; \</span><br><span class="line">    /home/flink-training/cluster-management/flink-on-yarn-1.11.1/examples/streaming/TopSpeedWindowing.jar</span><br></pre></td></tr></table></figure><ul><li>通过指定yarn.provided.lib.dirs参数部署，将Flink Binary包和Application Jar都同时从HDFS上获取</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">./bin/flink run-application -t yarn-application \</span><br><span class="line">    -Djobmanager.memory.process.size=2048m \</span><br><span class="line">    -Dtaskmanager.memory.process.size=4096m \</span><br><span class="line">    -Dyarn.provided.lib.dirs=&quot;hdfs://node02:8020/flink-training/flink-1.11.1&quot; \</span><br><span class="line">    hdfs://node02:8020/flink-training/flink-1.11.1/examples/streaming/TopSpeedWindowing.jar</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果配置了HA</span></span><br><span class="line">./bin/flink run-application -t yarn-application \</span><br><span class="line">    -Djobmanager.memory.process.size=2048m \</span><br><span class="line">    -Dtaskmanager.memory.process.size=4096m \</span><br><span class="line">    -Dyarn.provided.lib.dirs=&quot;hdfs://hacluster/flink-training/flink-1.11.1&quot; \</span><br><span class="line">    hdfs://hacluster/flink-training/flink-1.11.1/examples/streaming/TopSpeedWindowing.jar</span><br></pre></td></tr></table></figure><h2 id="flink-on-Kuberneter原理与实践"><a href="#flink-on-Kuberneter原理与实践" class="headerlink" title="flink on Kuberneter原理与实践"></a>flink on Kuberneter原理与实践</h2><p>待补充</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s学习笔记01-k8s入门</title>
      <link href="/post/9e0d0456.html"/>
      <url>/post/9e0d0456.html</url>
      
        <content type="html"><![CDATA[<h1 id="k8s快速入门"><a href="#k8s快速入门" class="headerlink" title="k8s快速入门"></a>k8s快速入门</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>kubernetes简称k8s。是用于自动部署，扩展和管理容器化应用程序的开源系统。</p><p>中文官网: <a href="https://kubernetes.io/zh/">https://kubernetes.io/zh/</a></p><p>中文文档:<a href="http://docs.kubernetes.org.cn/">http://docs.kubernetes.org.cn/</a></p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200621120121.png" alt=""></p><p><strong>传统部署时代：</strong> 早期，组织在物理服务器上运行应用程序。无法为物理服务器中的应用程序定义资源边界，这会导致资源分配问题。例如，如果在物理服务器上运行多个应用程序，则可能会出现一个应用程序占用大部分资源的情况，结果可能导致其他应用程序的性能下降。一种解决方案是在不同的物理服务器上运行每个应用程序，但是由于资源利用不足而无法扩展，并且组织维护许多物理服务器的成本很高。</p><p><strong>虚拟化部署时代：</strong> 作为解决方案，引入了虚拟化功能，它允许您在单个物理服务器的 CPU 上运行多个虚拟机（VM）。虚拟化功能允许应用程序在 VM 之间隔离，并提供安全级别，因为一个应用程序的信息不能被另一应用程序自由地访问。</p><p>因为虚拟化可以轻松地添加或更新应用程序、降低硬件成本等等，所以虚拟化可以更好地利用物理服务器中的资源，并可以实现更好的可伸缩性。</p><p>每个 VM 是一台完整的计算机，在虚拟化硬件之上运行所有组件，包括其自己的操作系统。</p><p><strong>容器部署时代：</strong> 容器类似于 VM，但是它们具有轻量级的隔离属性，可以在应用程序之间共享操作系统（OS）。因此，容器被认为是轻量级的。容器与 VM 类似，具有自己的文件系统、CPU、内存、进程空间等。由于它们与基础架构分离，因此可以跨云和 OS 分发进行移植。</p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200621122011.png" alt=""></p><h3 id="kubernetes组件"><a href="#kubernetes组件" class="headerlink" title="kubernetes组件"></a>kubernetes组件</h3><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200621122900.png" alt=""></p><h3 id="Master节点组件架构"><a href="#Master节点组件架构" class="headerlink" title="Master节点组件架构"></a>Master节点组件架构</h3><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200621123635.png" alt=""></p><h4 id="kube-apiserver"><a href="#kube-apiserver" class="headerlink" title="kube-apiserver"></a>kube-apiserver</h4><ul><li>对外暴露k8s的api接口，是外界进行资源操作的唯一入口</li><li>提供认证、授权、访问控制、api注册和发现等机制</li></ul><h4 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h4><ul><li>etcd是兼具一致性和高可用的键值数据库，可以作为保存kubernetes所有集群数据的后台数据库。</li><li>kubernetes集群的etcd数据库通常需要有个备份计划。</li></ul><h4 id="kube-scheduler"><a href="#kube-scheduler" class="headerlink" title="kube-scheduler"></a>kube-scheduler</h4><ul><li>主节点上的组件，该组件监视那些新创建的未指定运行节点的Pod，并选择节点让Pod在上面运行。</li><li>所有对K8s的集群操作，都必须经过主节点进行调度。</li></ul><h4 id="kube-controller-manager"><a href="#kube-controller-manager" class="headerlink" title="kube-controller-manager"></a>kube-controller-manager</h4><p>在主节点上运行控制器的组件。</p><p>这些控制器包括:</p><ul><li>节点控制器（Node Controller）: 负责在节点出现故障时进行通知和响应。</li><li>副本控制器（Replication Controller）: 负责为系统中的每个副本控制器对象维护正确数量的 Pod。</li><li>端点控制器（Endpoints Controller）: 填充端点(Endpoints)对象(即加入 Service 与 Pod)。</li><li>服务帐户和令牌控制器（Service Account &amp; Token Controllers）: 为新的命名空间创建默认帐户和 API 访问令牌.</li></ul><h3 id="Node节点架构"><a href="#Node节点架构" class="headerlink" title="Node节点架构"></a>Node节点架构</h3><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200621123725.png" alt=""></p><p>节点组件在每个节点上运行，维护运行的 Pod 并提供 Kubernetes 运行环境。</p><h4 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a>kubelet</h4><ul><li>一个在集群中每个节点上运行的代理。它保证容器都运行在 Pod 中。</li><li>负责维护容器的生命周期，同时也负责Volume(CSI)和网络(CNI)的管理。</li></ul><h4 id="kube-proxy"><a href="#kube-proxy" class="headerlink" title="kube-proxy"></a>kube-proxy</h4><ul><li>负责为service提供cluster内部的服务发现和负载均衡。</li></ul><h4 id="容器运行环境"><a href="#容器运行环境" class="headerlink" title="容器运行环境"></a>容器运行环境</h4><ul><li>容器运行环境(Container Runtime)是负责运行容器的软件。</li><li>Kubernetes 支持多个容器运行环境: <a href="http://www.docker.com/">Docker</a>、 <a href="https://containerd.io/">containerd</a>、<a href="https://cri-o.io/">cri-o</a>、 <a href="https://github.com/kubernetes-incubator/rktlet">rktlet</a> 以及任何实现 <a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-node/container-runtime-interface.md">Kubernetes CRI (容器运行环境接口)</a>。</li></ul><h4 id="fluentd"><a href="#fluentd" class="headerlink" title="fluentd"></a>fluentd</h4><ul><li>是一个守护进程，它有助于提供集群层面日志</li></ul><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200621125034.png" alt=""></p><h4 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h4><ul><li>container 容器，可以是docker启动的一个容器。</li></ul><h4 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h4><ul><li>k8s使用Pod来组织一组容器</li><li>一个Pod中的所有容器共享同一网络。</li><li>Pod是k8s中最小部署单元。</li></ul><h4 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h4><ul><li>声明在Pod容器中可访问的文件目录</li><li>可以被挂载在Pod中一个或多个容器指定路径下</li><li>支持多种后端存储抽象（本地存储，分布式存储，云存储）</li></ul><h4 id="Controllers"><a href="#Controllers" class="headerlink" title="Controllers"></a>Controllers</h4><p>controllers是更高层次对象，部署和管理Pod</p><ul><li>ReplicaSet: 确保预期的Pod副本数量</li><li>Deplotment: 无状态应用部署</li><li>StatefulSet:有状态应用部署</li><li>DaemonSet：确保所有Node都运行一个指定Pod</li><li>Job：一次性任务</li><li>Cronjob：定时任务</li></ul><h4 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h4><ul><li><p>定义一组Pod的副本数目、版本等</p></li><li><p>通过控制器维护Pod数目（自动回复失败的Pod）</p></li><li><p>通过控制器以指定的策略控制版本（滚动升级，回滚等）</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200621130459.png" alt=""></p></li></ul><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><ul><li>定义一组Pod的访问策略</li><li>Pod的负载均衡，提供一个或多个Pod的稳定访问地址</li><li>支持多种方式（ClusterIP,NodePort,LoadBalance）</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200621130728.png" alt=""></p><h4 id="Namespace-命名空间，逻辑隔离"><a href="#Namespace-命名空间，逻辑隔离" class="headerlink" title="Namespace:命名空间，逻辑隔离"></a>Namespace:命名空间，逻辑隔离</h4><ul><li>一个集群内部的逻辑隔离机制（鉴权，资源）</li><li>每个资源都属于一个namespace</li><li>同一个namespace所有资源名不能重复</li><li>不同namespace可以资源名重复</li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习笔记07-springCache</title>
      <link href="/post/35d81624.html"/>
      <url>/post/35d81624.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>spring从3.1开始定义了org.springframework.cache.Cache和org.springframework.cacheCacheManager接口来统一不同的缓存技术，并支持使用JCache注解简化我们开发。</p><p>Cache接口为缓存的组件规范定义，包含缓存的各种操作集合；Cache接口下Spring提供了各种xxxCache的实现；如RedisCache,EhCache</p><p>每次调用需要缓存功能的方法时，Spring会检查指定参数的指定的目标方法是否已经被调用过。如果有就直接从缓存中获取调用后的结果，如果没有就调用方法并缓存结果后返回给用户。下次调用直接从缓存中获取。</p><p>使用spring缓存抽象时我们需要关注以下两点：</p><ul><li>确定方法需要被缓存以及他们的缓存策略</li><li>从缓存中读取之前缓存存储的数据</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200615222744.png" alt=""></p><h2 id="整合SpringCache简化缓存开发"><a href="#整合SpringCache简化缓存开发" class="headerlink" title="整合SpringCache简化缓存开发"></a>整合SpringCache简化缓存开发</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.lettuce<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lettuce-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="写入配置"><a href="#写入配置" class="headerlink" title="写入配置"></a>写入配置</h3><p>在application.properties文件中配置缓存类型为redis</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.cache.type</span>=<span class="string">redis</span></span><br></pre></td></tr></table></figure><h3 id="测试使用缓存"><a href="#测试使用缓存" class="headerlink" title="测试使用缓存"></a>测试使用缓存</h3><ul><li>@Cacheable: 触发将数据保存到缓存的操作</li><li>@CacheEvict: 触发将数据从缓存删除的操作</li><li>@CachePut: 不影响方法执行更新缓存</li><li>@Caching: 组合以上多个操作</li><li>@CacheConfig: 在类级别共享缓存的相同配置</li></ul><h4 id="step1：开启缓存功能"><a href="#step1：开启缓存功能" class="headerlink" title="step1：开启缓存功能"></a>step1：开启缓存功能</h4><p>在spring-boot的启动类中，添加上<strong>@EnableCaching</strong></p><h4 id="step2-只需要使用注解就能完成缓存操作"><a href="#step2-只需要使用注解就能完成缓存操作" class="headerlink" title="step2: 只需要使用注解就能完成缓存操作"></a>step2: 只需要使用注解就能完成缓存操作</h4><p>在需要缓存的方法上，加上注解<strong>@Cacheable</strong></p><ul><li><p>只要方法带上注解@Cacheable，代表当前方法的结果需要缓存，如果缓存中有，方法不用调用。如果缓存中没有，会调用方法，最后将方法的结果放入缓存。</p></li><li><p>@Cacheable注解可以指定缓存的分区，可以按照不同的业务进行分类，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(&#123;&quot;category&quot;&#125;)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Cacheable的默认行为"><a href="#Cacheable的默认行为" class="headerlink" title="@Cacheable的默认行为"></a>@Cacheable的默认行为</h3><ul><li>如果缓存中有，方法不用调用</li><li>key默认自动生成。缓存的名字:SimpleKey[] （自动生成的key值）</li><li>缓存的value的值，默认使用java序列化机制，将序列化后的数据存到redis。</li><li>默认时间 -1(永不过期)</li></ul><h3 id="需要自定义的行为"><a href="#需要自定义的行为" class="headerlink" title="需要自定义的行为"></a>需要自定义的行为</h3><h4 id="指定生成的缓存使用的key"><a href="#指定生成的缓存使用的key" class="headerlink" title="指定生成的缓存使用的key"></a>指定生成的缓存使用的key</h4><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(value = &#123;&quot;category&quot;&#125;,key = &quot;&#x27;level1Categorys&#x27;&quot;)</span></span><br></pre></td></tr></table></figure></code></pre><h4 id="在配置文件中指定缓存的数据存活的时间："><a href="#在配置文件中指定缓存的数据存活的时间：" class="headerlink" title="在配置文件中指定缓存的数据存活的时间："></a>在配置文件中指定缓存的数据存活的时间：</h4>  <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.cache.redis.time-to-live</span>=<span class="string">3600000</span></span><br></pre></td></tr></table></figure><h4 id="将数据保存为json格式"><a href="#将数据保存为json格式" class="headerlink" title="将数据保存为json格式:"></a>将数据保存为json格式:</h4><pre><code>CacheAutoConfigurationRedisCacheConfiguration</code></pre><blockquote><p>原理</p></blockquote><ul><li><p>CacheAutoConfiguration -&gt; RedisCacheConfiguration -&gt; </p><ul><li>自动配置了 RedisCacheManager -&gt; 初始化所有的缓存 -&gt;每个缓存决定使用什么配置 -&gt; 如果redisCacheConfiguration有，就用已有的，没有就用默认配置 -&gt; 想改缓存的配置，只需要给容器中放一个RedisCacheConfiguration即可 -&gt; 就会应用到当前RedisCacheManager管理的所有缓存分区中</li></ul></li></ul><p>自定义配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(CacheProperties.class)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCacheConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    RedisCacheConfiguration <span class="title function_">redisCacheConfiguration</span><span class="params">(CacheProperties cacheProperties)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig();</span><br><span class="line">        <span class="comment">//config =  config.entryTtl();</span></span><br><span class="line"></span><br><span class="line">        config =  config.serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>()));</span><br><span class="line">        config =  config.serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>()));</span><br><span class="line"></span><br><span class="line">        CacheProperties.<span class="type">Redis</span> <span class="variable">redisProperties</span> <span class="operator">=</span> cacheProperties.getRedis();</span><br><span class="line">        <span class="comment">// 将配置文件中的所有配置都生效</span></span><br><span class="line">        <span class="keyword">if</span> (redisProperties.getTimeToLive() != <span class="literal">null</span>) &#123;</span><br><span class="line">            config = config.entryTtl(redisProperties.getTimeToLive());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (redisProperties.getKeyPrefix() != <span class="literal">null</span>) &#123;</span><br><span class="line">            config = config.prefixKeysWith(redisProperties.getKeyPrefix());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!redisProperties.isCacheNullValues()) &#123;</span><br><span class="line">            config = config.disableCachingNullValues();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!redisProperties.isUseKeyPrefix()) &#123;</span><br><span class="line">            config = config.disableKeyPrefix();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringCache的不足"><a href="#SpringCache的不足" class="headerlink" title="SpringCache的不足"></a>SpringCache的不足</h2><h3 id="读模式的不足"><a href="#读模式的不足" class="headerlink" title="读模式的不足"></a>读模式的不足</h3><ul><li>缓存穿透：查询一个null数据。解决:缓存空数据；ache-null-values=true</li><li>缓存击穿: 大量并发进来同时查询一个正好过期的数据。解决:加锁。SpringCache默认是无加锁的；sync = true（加锁）</li><li>缓存雪崩：大量的key同时过期。解决：<strong>加随机时间</strong>或<strong>加上过期时间</strong>：<code>spring.cache.redis.time-to-live=3600000</code></li></ul><h3 id="写模式的不足（缓存与数据库一致）"><a href="#写模式的不足（缓存与数据库一致）" class="headerlink" title="写模式的不足（缓存与数据库一致）"></a>写模式的不足（缓存与数据库一致）</h3><ul><li>读写加锁</li><li>引入canal，感知到mysql的更新去更新数据库</li><li>读多写多，直接去数据库查询</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>常规数据（读多写少，即时性，一致性要求不高的数据）；完全可以使用spring-cache；写模式（只要缓存的数据有过期时间就足够了）</p><p>特殊数据：特殊设计</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习笔记06-Redisson</title>
      <link href="/post/35d81624.html"/>
      <url>/post/35d81624.html</url>
      
        <content type="html"><![CDATA[<h1 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h1><p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务。</p><h2 id="Redisson整合"><a href="#Redisson整合" class="headerlink" title="Redisson整合"></a>Redisson整合</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.redisson/redisson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置redisson"><a href="#配置redisson" class="headerlink" title="配置redisson"></a>配置redisson</h3><p>redisson官方提供了多种方式来配置redisson</p><h4 id="程序化配置方法"><a href="#程序化配置方法" class="headerlink" title="程序化配置方法"></a>程序化配置方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRedissonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有对Redisson的使用都是通过RedissonClient对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(destroyMethod=&quot;shutdown&quot;)</span></span><br><span class="line">    RedissonClient <span class="title function_">redisson</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1、创建配置</span></span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.111.100:6379&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、根据config创建出RedissonClient实例</span></span><br><span class="line">        <span class="type">RedissonClient</span> <span class="variable">redissonClient</span> <span class="operator">=</span> Redisson.create(config);</span><br><span class="line">        <span class="keyword">return</span> redissonClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一些小例子"><a href="#一些小例子" class="headerlink" title="一些小例子"></a>一些小例子</h2><h3 id="自动续期锁"><a href="#自动续期锁" class="headerlink" title="自动续期锁"></a>自动续期锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1、获取一把锁，只要锁的名字一样，就是同一把锁</span></span><br><span class="line">        <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redisson.getLock(<span class="string">&quot;my-lock&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、加锁</span></span><br><span class="line">        <span class="comment">// 阻塞式等待。默认加的锁都是30s时间</span></span><br><span class="line">        <span class="comment">// 1)、锁的自动续期，如果业务超长，运行期间自动给锁续上新的30s。不用担心业务时间长，锁自动过期被删掉</span></span><br><span class="line">        <span class="comment">// 2)、加锁的业务只要运行完成，就不会给当前锁续期，即时不手动解锁，锁默认在30s以后自动删除</span></span><br><span class="line">        <span class="comment">// lock.lock();</span></span><br><span class="line">        </span><br><span class="line">        lock.lock(<span class="number">10</span>, TimeUnit.SECONDS);<span class="comment">// 10秒自动解锁，自动解锁时间一定要大于业务的执行时间。</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;加锁成功，执行业务。。。。&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">            Thread.sleep(<span class="number">30000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 3、解锁</span></span><br><span class="line">            System.out.println(<span class="string">&quot;释放锁。。。。&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>lock.lock(10, TimeUnit.SECONDS) 在锁时间到了以后。不会自动续期。</p></li><li><p>如果我们传递了锁的超时时间，就发送给redis执行脚本，进行占锁，默认超时就是我们指定的时间</p></li><li>如果我们未指定锁的超时时间，就使用30 * 1000;【lockWatchdogTimeout看门狗的默认时间】</li><li>只要占锁成功，就会启动一个定时任务【重新给锁设置过期时间，新的过期时间就是看门狗的默认时间】，每隔10s都会自动再次续期，续成30s</li><li><p>internalLockLeaseTime【看门狗时间】 /3 ,10s</p></li><li><p>lock.lock(30, TimeUnit.SECONDS); 省掉了整个续期操作。手动解锁</p></li></ul><h3 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/write&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">writeValue</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">RReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> redisson.getReadWriteLock(<span class="string">&quot;rw-lock&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span><span class="string">&quot;&quot;</span>;</span><br><span class="line">       <span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> lock.writeLock();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 1、改数据加写锁，读数据加读锁</span></span><br><span class="line">           rLock.lock();</span><br><span class="line">           s =  UUID.randomUUID().toString();</span><br><span class="line">           Thread.sleep(<span class="number">30000</span>);</span><br><span class="line">           redisTemplate.opsForValue().set(<span class="string">&quot;writeValue&quot;</span>,s);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">           rLock.unlock();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> s;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/read&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">readValue</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">RReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> redisson.getReadWriteLock(<span class="string">&quot;rw-lock&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span><span class="string">&quot;&quot;</span>;</span><br><span class="line">       <span class="comment">// 加读锁</span></span><br><span class="line">       <span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> lock.readLock();</span><br><span class="line">       rLock.lock();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           s = redisTemplate.opsForValue().get(<span class="string">&quot;writeValue&quot;</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">           rLock.unlock();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> s;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>读写锁，保证一定能读到最新数据，修改期间，写锁是一个排他锁（互斥锁）。读锁是一个共享锁</li><li>写锁没释放 读就必须等待</li><li>读锁 + 读锁：相当于无锁，并发读，只会在redis中记录好，所有当前的读锁。他们都会同时加锁成功</li><li>写锁 + 读锁：等待写锁释放</li><li>写锁 + 写锁：阻塞方式</li><li>读锁 + 写锁：有读锁。写也需要等待</li><li>总结：只要有写锁的存在，都必须等待</li></ul><h3 id="信号锁"><a href="#信号锁" class="headerlink" title="信号锁"></a>信号锁</h3><p>基于Redis的Redisson的分布式信号量（<a href="http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RSemaphore.html">Semaphore</a>）Java对象<code>RSemaphore</code>采用了与<code>java.util.concurrent.Semaphore</code>相似的接口和用法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 车库停车，</span></span><br><span class="line"><span class="comment">    * 3车位</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/park&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">park</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">       <span class="type">RSemaphore</span> <span class="variable">park</span> <span class="operator">=</span> redisson.getSemaphore(<span class="string">&quot;park&quot;</span>);</span><br><span class="line">       <span class="comment">// 获取一个信号，获取一个值，占一个车位</span></span><br><span class="line">       park.acquire();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/go&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">go</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">       <span class="type">RSemaphore</span> <span class="variable">park</span> <span class="operator">=</span> redisson.getSemaphore(<span class="string">&quot;park&quot;</span>);</span><br><span class="line">       park.release();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="缓存数据一致性"><a href="#缓存数据一致性" class="headerlink" title="缓存数据一致性"></a>缓存数据一致性</h3><blockquote><p>双写模式</p></blockquote><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200610221237.png" alt=""></p><blockquote><p>失效模式</p></blockquote><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200610221445.png" alt=""></p><blockquote><p>Canal</p></blockquote><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200610223708.png" alt=""></p><blockquote><p>解决方案</p></blockquote><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200610222823.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习笔记05-缓存</title>
      <link href="/post/9d494883.html"/>
      <url>/post/9d494883.html</url>
      
        <content type="html"><![CDATA[<h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><h2 id="缓存使用"><a href="#缓存使用" class="headerlink" title="缓存使用"></a>缓存使用</h2><p>为了系统性能的提升，我们一般都会将部分数据放入缓存中，加速访问。而db承担数据落盘工作。</p><blockquote><p>哪些数据适合放入缓存？</p></blockquote><ul><li><p>即时性、数据一致性要求不高的</p></li><li><p>访问量大且更新频率不高的数据（读多，写少）</p><p>举例： 电商类应用，商品分类，商品列表等适合缓存并加一个失效时间（根据数据更新频率来定），后台如果发布一个商品，买家需要5分钟才能看到新的商品一般还是可以接受的。</p></li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200606173637.png" alt=""></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>缓存穿透指的是查询一个一定不存在的数据，由于缓存是不命中，将去查询数据库，但是数据库也无此记录，我们没有将这次查询的null写入缓存，这将导致这个不存在的数据每次请求都要到数据库中查询，失去了缓存的意义。</p><blockquote><p>风险：利用不存在的数据进行攻击，数据库瞬时压力增大，最终导致崩溃</p><p>解决：null结果缓存，并加入短暂过期时间</p></blockquote><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>缓存雪崩是指在我们设置缓存时key采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB瞬时压力过重雪崩。</p><blockquote><p>解决：原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p></blockquote><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>对于一些设置了过期时间的key，如果这些key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。如果这个key在大量请求同时进来前正好失效，那么所有对这个key的数据查询都落到db，我们称之为缓存击穿。</p><blockquote><p>解决：<strong>加锁</strong>，大量并发只让一个人去查，其他人等待，查到以后释放锁，其他人获取到锁，先查缓存，就会有数据，不用去db</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch学习笔记03-springboot整合elasticsearch</title>
      <link href="/post/e7ef812f.html"/>
      <url>/post/e7ef812f.html</url>
      
        <content type="html"><![CDATA[<h1 id="springboot整合es"><a href="#springboot整合es" class="headerlink" title="springboot整合es"></a>springboot整合es</h1><p><em>基于尚硅谷的电商项目笔记</em></p><p>es提供了很多种客户端用于操作，这里我们使用官方推荐的<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.5/java-rest-high.html">Java High Level REST Client</a></p><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为不同的springboot版本默认的es版本会不一致，所以需要特别指定es版本</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200523233256.png" alt=""></p><h2 id="编写配置"><a href="#编写配置" class="headerlink" title="编写配置"></a>编写配置</h2><p>创建config.GulimallElasticsearchConfig文件，写入配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GulimallElasticsearchConfig</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RequestOptions COMMON_OPTIONS;</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            RequestOptions.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> RequestOptions.DEFAULT.toBuilder();</span><br><span class="line">            <span class="comment">//builder.addHeader(&quot;Authorization&quot;, &quot;Bearer &quot; + TOKEN);</span></span><br><span class="line">            <span class="comment">//builder.setHttpAsyncResponseConsumerFactory(</span></span><br><span class="line">            <span class="comment">//        new HttpAsyncResponseConsumerFactory</span></span><br><span class="line">            <span class="comment">//                .HeapBufferedResponseConsumerFactory(30 * 1024 * 1024 * 1024));</span></span><br><span class="line">            COMMON_OPTIONS = builder.build();</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestHighLevelClient <span class="title function_">esRestClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;192.168.111.100&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)));</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一些常用的API测试"><a href="#一些常用的API测试" class="headerlink" title="一些常用的API测试"></a>一些常用的API测试</h2><h3 id="新增索引API"><a href="#新增索引API" class="headerlink" title="新增索引API"></a>新增索引API</h3><p>新增索引可以以<strong>对象</strong>的方式或者<strong>json</strong>的方式新增。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 测试存储数据到es</span></span><br><span class="line"><span class="comment">    * 更新也可以</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">indexData</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="type">IndexRequest</span> <span class="variable">indexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;users&quot;</span>);</span><br><span class="line">       <span class="comment">// 数据的id</span></span><br><span class="line">       indexRequest.id(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       <span class="comment">//方式一</span></span><br><span class="line">       <span class="comment">//indexRequest.source(&quot;username&quot;,&quot;zhangsan&quot;,&quot;age&quot;,18,&quot;gender&quot;,&quot;男&quot;);</span></span><br><span class="line">       <span class="comment">//方式二</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">       user.setUserName(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">       user.setAge(<span class="string">&quot;18&quot;</span>);</span><br><span class="line">       user.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(user);</span><br><span class="line">       indexRequest.source(jsonString, XContentType.JSON);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 执行操作</span></span><br><span class="line">       <span class="type">IndexResponse</span> <span class="variable">index</span> <span class="operator">=</span> client.index(indexRequest, GulimallElasticsearchConfig.COMMON_OPTIONS);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 提前有用的响应数据</span></span><br><span class="line">       System.out.println(index);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>GET users/_search</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">367</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;users&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;18&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;男&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;userName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>删、改请参考官网的示范例子</p><h3 id="复杂检索API"><a href="#复杂检索API" class="headerlink" title="复杂检索API"></a>复杂检索API</h3><p>检索条件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;aggregations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;ageAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;age&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;balanceAvg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;balance&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>相关测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line">   <span class="meta">@ToString</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> <span class="type">int</span> account_number;</span><br><span class="line">       <span class="keyword">private</span> <span class="type">int</span> balance;</span><br><span class="line">       <span class="keyword">private</span> String firstname;</span><br><span class="line">       <span class="keyword">private</span> String lastname;</span><br><span class="line">       <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">       <span class="keyword">private</span> String gender;</span><br><span class="line">       <span class="keyword">private</span> String address;</span><br><span class="line">       <span class="keyword">private</span> String employer;</span><br><span class="line">       <span class="keyword">private</span> String email;</span><br><span class="line">       <span class="keyword">private</span> String city;</span><br><span class="line">       <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">searchData</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">// 1.创建检索请求</span></span><br><span class="line">       <span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>();</span><br><span class="line">       <span class="comment">// 指定索引</span></span><br><span class="line">       searchRequest.indices(<span class="string">&quot;bank&quot;</span>);</span><br><span class="line">       <span class="comment">// 指定DSL，检索条件</span></span><br><span class="line">       <span class="type">SearchSourceBuilder</span> <span class="variable">searchSourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">       <span class="comment">// 1.1构造检索条件</span></span><br><span class="line">       searchSourceBuilder.query(QueryBuilders.matchQuery(<span class="string">&quot;address&quot;</span>,<span class="string">&quot;mill&quot;</span>));</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 1.2 按照年龄的值分布进行聚合</span></span><br><span class="line">       <span class="type">TermsAggregationBuilder</span> <span class="variable">ageAgg</span> <span class="operator">=</span> AggregationBuilders.terms(<span class="string">&quot;ageAgg&quot;</span>).field(<span class="string">&quot;age&quot;</span>).size(<span class="number">10</span>);</span><br><span class="line">       searchSourceBuilder.aggregation(ageAgg);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 1.3 计算平均薪资</span></span><br><span class="line">       <span class="type">AvgAggregationBuilder</span> <span class="variable">balanceAgg</span> <span class="operator">=</span> AggregationBuilders.avg(<span class="string">&quot;balanceAvg&quot;</span>).field(<span class="string">&quot;balance&quot;</span>);</span><br><span class="line">       searchSourceBuilder.aggregation(balanceAgg);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;检索条件：&quot;</span>+searchSourceBuilder.toString());</span><br><span class="line"></span><br><span class="line">       searchRequest.source(searchSourceBuilder);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2.执行检索</span></span><br><span class="line">       <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> client.search(searchRequest, GulimallElasticsearchConfig.COMMON_OPTIONS);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 3.分析结果</span></span><br><span class="line">       System.out.println(searchResponse.toString());</span><br><span class="line">       <span class="comment">// 3.1 获取所有查到的数据</span></span><br><span class="line">       <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> searchResponse.getHits();</span><br><span class="line">       SearchHit[] searchHits = hits.getHits();</span><br><span class="line">       <span class="keyword">for</span> (SearchHit searchHit : searchHits) &#123;</span><br><span class="line">           <span class="comment">//searchHit.getIndex()</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">sourceAsString</span> <span class="operator">=</span> searchHit.getSourceAsString();</span><br><span class="line">           <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> JSON.parseObject(sourceAsString, Account.class);</span><br><span class="line">           System.out.println(<span class="string">&quot;account:&quot;</span>+account);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 3.2 获取这次检索到的分析信息</span></span><br><span class="line">       <span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> searchResponse.getAggregations();</span><br><span class="line">       <span class="comment">//List&lt;Aggregation&gt; aggregationList = aggregations.asList();</span></span><br><span class="line">       <span class="comment">//for (Aggregation aggregation : aggregationList) &#123;</span></span><br><span class="line">       <span class="comment">//    System.out.println(&quot;当前聚合&quot;+aggregation.getName());</span></span><br><span class="line">       <span class="comment">//&#125;</span></span><br><span class="line">       <span class="type">Terms</span> <span class="variable">ageAgg1</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;ageAgg&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (Terms.Bucket bucket : ageAgg1.getBuckets()) &#123;</span><br><span class="line">           <span class="type">String</span> <span class="variable">keyAsString</span> <span class="operator">=</span> bucket.getKeyAsString();</span><br><span class="line">           System.out.println(<span class="string">&quot;年龄：&quot;</span>+keyAsString);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">Avg</span> <span class="variable">balanceAvg</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;balanceAvg&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;平均薪资：&quot;</span>+balanceAvg.getValue());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200524171634.png" alt=""></p><ul><li>更多文档请参考官方文档</li></ul><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.5/java-rest-high-search.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.5/java-rest-high-search.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> ES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch学习笔记02-elasticsearch进阶检索</title>
      <link href="/post/ecbf6cda.html"/>
      <url>/post/ecbf6cda.html</url>
      
        <content type="html"><![CDATA[<h1 id="ES进阶检索"><a href="#ES进阶检索" class="headerlink" title="ES进阶检索"></a>ES进阶检索</h1><p>ES支持两种基本方式检索：</p><ul><li>一种是通过使用REST request URI发送搜索参数</li><li>另一种是通过使用REST request body来发送它们</li></ul><h2 id="检索信息"><a href="#检索信息" class="headerlink" title="检索信息"></a>检索信息</h2><blockquote><p>请求参数方式检索</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET  bank/_search?q=*&amp;sort=account_number<span class="punctuation">:</span>asc  </span><br></pre></td></tr></table></figure><p>响应结果解释：</p><ul><li>took -es执行搜索的时间（毫秒）</li><li>time_out -告诉我们搜索是否超时</li><li>_shards - 告诉我们多少个分片被搜索了，以及统计了成功/失败的搜索分片</li><li>hits - 搜索结果</li><li>hits.total - 搜索结果</li><li>hits.hits - 实际的搜索结果数组</li><li>sort - 结果的排序key</li><li>score 和 max_score - 相关性得分和最高得分（全文检索用）</li></ul><blockquote><p>请求体进行检索</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="QueryDSL"><a href="#QueryDSL" class="headerlink" title="QueryDSL"></a>QueryDSL</h2><h3 id="基本语法格式"><a href="#基本语法格式" class="headerlink" title="基本语法格式"></a>基本语法格式</h3><p>elasticsearch提供了一个可以执行查询的json风格的<strong>DSL</strong>(domain-specific language 领域特定语言)。这个被称为Query DSL。该查询语言非常全面，并且刚开始的时候有点复杂，真正学好它的方法是从一些基础的示例开始。</p><blockquote><p>如果是针对某些字段的查询，那么它的结构如下：</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;balance&quot;</span><span class="punctuation">,</span><span class="string">&quot;firstname&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>相当于 SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> balance,firstname</span><br><span class="line"><span class="keyword">from</span> bank</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> balance <span class="keyword">desc</span></span><br><span class="line">limit <span class="number">0</span>,<span class="number">5</span></span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200521223435.png" alt=""></p><h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><p>全文检索按照<strong>评分</strong>进行排序，会对检索条件进行分词匹配</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mill&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200521224301.png" alt=""></p><h3 id="match-phrase-短语匹配"><a href="#match-phrase-短语匹配" class="headerlink" title="match_phrase(短语匹配)"></a>match_phrase(短语匹配)</h3><p>match匹配会对短语进行分词，如果我们需要搜索短语，需要用到<code>match_phrase</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_phrase&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;789 Madison&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200523110454.png" alt=""></p><blockquote><p>match也能做类似的查询，需要在查询字段加上.keyword</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;address.keyword&quot;</span><span class="punctuation">:</span> <span class="string">&quot;789 Madison&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200523110604.png" alt=""></p><h3 id="multi-match-多字段匹配"><a href="#multi-match-多字段匹配" class="headerlink" title="multi_match(多字段匹配)"></a>multi_match(多字段匹配)</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;multi_match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill movico&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;address&quot;</span><span class="punctuation">,</span><span class="string">&quot;city&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200523094242.png" alt=""></p><p><code>multi_matc</code>h用于<strong>多字段</strong>匹配，相当于sql的<code>where...or....</code></p><h3 id="bool-复合查询"><a href="#bool-复合查询" class="headerlink" title="bool(复合查询)"></a>bool(复合查询)</h3><p>bool用来做复合查询</p><p>复合语句可以合并 任何 其它查询语句，包括复合语句，这就意味着，复合语句之间可以互相嵌套，可以表达非常复杂的逻辑。</p><ul><li>must:必须达到must列举的所有条件</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="string">&quot;address&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">:</span><span class="string">&quot;mill&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span><span class="string">&quot;M&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>should: 应该达到should列举的条件，如果达到会增加相关文档的评分，并不会改变查询的结果。如果query中只有should且<strong>只有一种</strong>匹配规则，那么should的条件就会被作为默认匹配条件而去改变查询结果。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;should&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Wallace&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>must_not必须不是指定的情况</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;must_not&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;18&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;should&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Wallace&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>adress包含mill，并且gender是M，如果lastname里面有Wallace最好不过，但是age必须不包含18</p><h3 id="filter-结果过滤"><a href="#filter-结果过滤" class="headerlink" title="filter(结果过滤)"></a>filter(结果过滤)</h3><p>并不是所有的查询都需要产生分数，特别是那些仅用于”filtering”（过滤）的文档。为了不计算分数elasticsearch会自动检查场景并且优化查询的执行。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">30</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="term"><a href="#term" class="headerlink" title="term"></a>term</h3><p>和match一样。匹配某个属性的值，全文检索字段用<strong>match</strong>，其他非text字段匹配用<strong>term</strong></p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200523105908.png" alt=""></p><h3 id="aggregations-执行聚合"><a href="#aggregations-执行聚合" class="headerlink" title="aggregations(执行聚合)"></a>aggregations(执行聚合)</h3><p>聚合提供了从数据中分组和提取数据的能力。最简单的聚合方法大致等于SQL GROUP BY和SQL 聚合函数。在elasticsearch中，您有执行搜索返回hits(命中结果)，并且同时返回聚合结果，把一个响应中的所有hits分隔开的能力。这是非常强大且有效的，您可以执行查询和多个聚合，并且在一次使用中得到各自的（任何一个的）返回结果，使用一次简洁和简化的API来避免网络往返。</p><blockquote><p>搜索address中包含mill的所有人的年龄分布以及平均年龄，但不显示这些人的详情</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;age&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ageAvg&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;age&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;balanceAvg&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;balance&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>size:0 不显示搜索数据</li><li>aggs:执行聚合，语法如下：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 这次聚合的名字，方便展示在结果集中</span></span><br><span class="line">    <span class="attr">&quot;aggs_name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 聚合的类型</span></span><br><span class="line">    <span class="attr">&quot;AGG_TYPE&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>一些复杂的聚合查询例子:</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">## 按照年龄聚合，并且请求这些年龄段的这些人的平均薪资</span><br><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ageAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;age&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ageAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;balance&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">## 查出所有年龄分布，并且这些年龄段中M的平均薪资和F的平均薪资以及这个  年龄段的总体平均薪资</span><br><span class="line"></span><br><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ageAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;age&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;genderAgg&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span><span class="string">&quot;gender.keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;balanceAvg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;balance&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;ageBalanceAvg&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;balance&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>更多例子请到官网查看:<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/search-aggregations.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.x/search-aggregations.html</a></p><h2 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h2><p>Mapping(映射)是定义文档及其包含的字段的存储和索引方式的过程。有点类似于mysql字段的字段类型。</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200523140714.png" alt="">映射是定义文档及其包含的字段的存储和索引方式的过程。</p><h3 id="创建索引并且指定映射"><a href="#创建索引并且指定映射" class="headerlink" title="创建索引并且指定映射"></a>创建索引并且指定映射</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;integer&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span>  <span class="punctuation">&#123;</span> <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span>  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;text&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="添加新的字段映射"><a href="#添加新的字段映射" class="headerlink" title="添加新的字段映射"></a>添加新的字段映射</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /my_index/_mapping</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;employee-id&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="keyword">false</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>其中”index”:false 即为该字段不被索引</p><h3 id="更新映射"><a href="#更新映射" class="headerlink" title="更新映射"></a>更新映射</h3><p>对于已存在的映射字段，我们不能更新。更新必须创建新的索引进行数据迁移</p><h3 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h3><p>先创建出 new_twitter 的正确映射。然后使用如下方式进行数据迁移</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST _reindex</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;account&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;newbank&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h2><p>一个tokenizer(分词器)接受一个字符流，将之分割为独立的tokens（词元，通常是独立的单词），然后输出tokens流。</p><h3 id="安装ik分词器"><a href="#安装ik分词器" class="headerlink" title="安装ik分词器"></a>安装ik分词器</h3><p>注意：不能用默认elasticsearch-plugin install xx.zip 进行自动安装</p><p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a> 对应es版本进行安装</p><ul><li>进入es的plugins目录，把ik插件安装到该目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.4.2/elasticsearch-analysis-ik-7.4.2.zip</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">unzip elasticsearch-analysis-ik-7.4.2.zip</span><br><span class="line"><span class="comment"># 移动到ik文件夹，并且重启elasticsearch</span></span><br></pre></td></tr></table></figure><h3 id="自定义词库"><a href="#自定义词库" class="headerlink" title="自定义词库"></a>自定义词库</h3><ul><li>修改/usr/share/elasticsearch/plugins/ik/config/中的IKAnalyzer.cfg.xml,添加上远程扩展词典</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200523215036.png" alt=""></p><ul><li>重启es</li></ul><h2 id="附录-docker安装nginx"><a href="#附录-docker安装nginx" class="headerlink" title="附录-docker安装nginx"></a>附录-docker安装nginx</h2><ul><li>随便启动一个nginx实例，只是为了复制出配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx -d nginx:1.10</span><br></pre></td></tr></table></figure><ul><li>将容器内的配置文件拷贝到当前目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container <span class="built_in">cp</span> nginx:/etc/nginx .</span><br></pre></td></tr></table></figure><ul><li>修改文件夹名称，并且把这个文件夹移动到新建的nginx目录中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> nginx conf</span><br><span class="line"><span class="built_in">mkdir</span> nginx</span><br><span class="line"><span class="built_in">mv</span> conf nginx/</span><br><span class="line"><span class="built_in">mkdir</span> html</span><br><span class="line"><span class="built_in">mkdir</span> logs</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200523213802.png" alt=""></p><ul><li>终止并删除原来的nginx</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop nginx</span><br><span class="line">docker <span class="built_in">rm</span>  nginx</span><br></pre></td></tr></table></figure><ul><li>创建并启动新的nginx</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx \</span><br><span class="line">-v /mydata/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-v /mydata/nginx/logs:/var/log/nginx \</span><br><span class="line">-v /mydata/nginx/conf:/etc/nginx \</span><br><span class="line">-d nginx:1.10</span><br></pre></td></tr></table></figure><ul><li>在html文件夹中创建es文件夹，并创建分词文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /html</span><br><span class="line"><span class="built_in">mkdir</span> es</span><br><span class="line"><span class="built_in">touch</span> fenci.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> ES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch学习笔记01-elasticsearch简介以及安装</title>
      <link href="/post/ecbf6cda.html"/>
      <url>/post/ecbf6cda.html</url>
      
        <content type="html"><![CDATA[<h1 id="Elasticsearch-简介"><a href="#Elasticsearch-简介" class="headerlink" title="Elasticsearch 简介"></a>Elasticsearch 简介</h1><p>Elasticsearch是一个基于<a href="https://baike.baidu.com/item/Lucene/6753302">Lucene</a>的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java语言开发的，并作为Apache许可条款下的开放源码发布，是一种流行的企业级搜索引擎。Elasticsearch用于<a href="https://baike.baidu.com/item/云计算/9969353">云计算</a>中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。官方客户端在Java、.NET（C#）、PHP、Python、Apache Groovy、Ruby和许多其他语言中都是可用的。根据DB-Engines的排名显示，Elasticsearch是最受欢迎的企业搜索引擎，其次是Apache Solr，也是基于Lucene。</p><h1 id="Docker安装ES"><a href="#Docker安装ES" class="headerlink" title="Docker安装ES"></a>Docker安装ES</h1><h2 id="下载镜像文件"><a href="#下载镜像文件" class="headerlink" title="下载镜像文件"></a>下载镜像文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch:7.4.2 <span class="comment"># 存储和检索数据</span></span><br><span class="line">docker pull kibana:7.4.2 <span class="comment"># 可视化检索数据</span></span><br></pre></td></tr></table></figure><h3 id="创建ES实例"><a href="#创建ES实例" class="headerlink" title="创建ES实例"></a>创建ES实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /mydata/elasticsearch/config<span class="comment"># 创建es的配置目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /mydata/elasticsearch/data<span class="comment"># 创建es的配置目录</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;http.host: 0.0.0.0&quot;</span> &gt;&gt; /mydata/elasticsearch/config/elasticsearch.yml <span class="comment"># 把远程配置写入到es的配置文件中</span></span><br></pre></td></tr></table></figure><blockquote><p>启动docker镜像</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \</span><br><span class="line">-e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">-e ES_JAVA_OPTS=<span class="string">&quot;-Xms64m -Xmx128m&quot;</span> \</span><br><span class="line">-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">-v /mydata/elasticsearch/plugins:/usr/share/plugins \</span><br><span class="line">-d elasticsearch:7.4.2</span><br></pre></td></tr></table></figure><blockquote><p>访问 ip:9200端口,查看是否安装成功</p></blockquote><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200518212725.png" alt=""></p><h3 id="创建kibana实例"><a href="#创建kibana实例" class="headerlink" title="创建kibana实例"></a>创建kibana实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.111.100:9200 -p 5601:5601 \</span><br><span class="line">-d kibana:7.4.2</span><br></pre></td></tr></table></figure><blockquote><p>访问5601端口</p></blockquote><h1 id="ES入门"><a href="#ES入门" class="headerlink" title="ES入门"></a>ES入门</h1><h2 id="初步检索"><a href="#初步检索" class="headerlink" title="初步检索"></a>初步检索</h2><h3 id="cat"><a href="#cat" class="headerlink" title="_cat"></a>_cat</h3><blockquote><p>192.168.111.100:9200/_cat/health # 查看健康状况</p></blockquote><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200518215755.png" alt=""></p><blockquote><p>192.168.111.100:9200/_cat/master # 查看主节点信息</p></blockquote><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200518215915.png" alt=""></p><blockquote><p>192.168.111.100:9200/_cat/indices # 查看所有索引 相当于mysql的show databases;</p></blockquote><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200518220034.png" alt=""></p><h3 id="索引一个文档（保存）"><a href="#索引一个文档（保存）" class="headerlink" title="索引一个文档（保存）"></a>索引一个文档（保存）</h3><p>保存一个数据，保存在哪个索引的哪个类型下，指定哪个唯一标识</p><p><code>PUT customer/external/1</code> 在customer索引下的external类型下保存1号数据为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200518220656.png" alt=""></p><p>保存数据用<code>PUT</code>请求和<code>POST</code>请求都可以。</p><ul><li><p><code>POST</code>新增，如果不指定id，会自动生成id。指定id就会修改这个数据，并且新增版本号。</p></li><li><p><code>PUT</code>可以新增也可以修改。PUT必须指定id，由于PUT需要指定id，我们一般都用来做修改操作，不指定id会报错。</p></li></ul><h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><blockquote><p>GET customer/external/1</p></blockquote><p>结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;customer&quot;</span><span class="punctuation">,</span><span class="comment">// 在哪个索引</span></span><br><span class="line"><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;external&quot;</span><span class="punctuation">,</span><span class="comment">// 在哪个类型</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span><span class="comment">// 记录id</span></span><br><span class="line"><span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span><span class="comment">// 版本号</span></span><br><span class="line"><span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">// 并发控制字段，每次更新就会+1，用来做乐观锁</span></span><br><span class="line"><span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">// 同上，主分片重新分配，如果重启，就会变化</span></span><br><span class="line"><span class="attr">&quot;found&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="comment">// 真正的内容</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><blockquote><p>POST更新带 _update</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST 192.168.111.100:9200/customer/external/1/_update</span><br><span class="line">&#123;</span><br><span class="line">&quot;doc&quot;:&#123;</span><br><span class="line">&quot;name&quot;:&quot;John&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;customer&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;external&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;_version&quot;: 5,</span><br><span class="line">    &quot;result&quot;: &quot;noop&quot;,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 0,</span><br><span class="line">        &quot;successful&quot;: 0,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;_seq_no&quot;: 5,</span><br><span class="line">    &quot;_primary_term&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>POST更新，不带_update</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST 192.168.111.100:9200/customer/external/1</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&quot;name&quot;:&quot;John&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;customer&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;external&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;_version&quot;: 8,</span><br><span class="line">    &quot;result&quot;: &quot;updated&quot;,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 2,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;_seq_no&quot;: 8,</span><br><span class="line">    &quot;_primary_term&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>不同：POST操作会对比源文档数据，如果相同不会操作数据，文档version不增加</li><li>PUT操作总会将数据重新保存并增加version版本</li><li>带_update对比元数据如果一样就不进行任何操作</li></ul></blockquote><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><blockquote><p>DELETE customer/external/1        </p></blockquote><p><img src="C:\Users\dik\AppData\Roaming\Typora\typora-user-images\1589899309878.png" alt="1589899309878"></p><h3 id="bulk批量API"><a href="#bulk批量API" class="headerlink" title="bulk批量API"></a>bulk批量API</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST customer/external/_bulk</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;John&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;2&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;walk&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200519225238.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> ES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习笔记04-Jedis&amp;springboot</title>
      <link href="/post/c53bdb40.html"/>
      <url>/post/c53bdb40.html</url>
      
        <content type="html"><![CDATA[<h1 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h1><p>Jedis是Redis官方推荐的java连接开发工具，使用java操作Redis中间件，如果你要使用java操作redis，那么一定要对Jedis十分熟悉！</p><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编码测试"><a href="#编码测试" class="headerlink" title="编码测试"></a>编码测试</h2><ul><li>连接数据库</li><li>操作命令</li><li>断开连接</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPing</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.111.100&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200517133430.png" alt=""></p><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        System.out.println(<span class="string">&quot;===========增加数据===========&quot;</span>);</span><br><span class="line">        System.out.println(jedis.set(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>));</span><br><span class="line">        System.out.println(jedis.set(<span class="string">&quot;key2&quot;</span>,<span class="string">&quot;value2&quot;</span>));</span><br><span class="line">        System.out.println(jedis.set(<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;value3&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;删除键key2:&quot;</span>+jedis.del(<span class="string">&quot;key2&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取键key2:&quot;</span>+jedis.get(<span class="string">&quot;key2&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;修改key1:&quot;</span>+jedis.set(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1Changed&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取key1的值：&quot;</span>+jedis.get(<span class="string">&quot;key1&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;在key3后面加入值：&quot;</span>+jedis.append(<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;End&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;key3的值：&quot;</span>+jedis.get(<span class="string">&quot;key3&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;增加多个键值对：&quot;</span>+jedis.mset(<span class="string">&quot;key01&quot;</span>,<span class="string">&quot;value01&quot;</span>,<span class="string">&quot;key02&quot;</span>,<span class="string">&quot;value02&quot;</span>,<span class="string">&quot;key03&quot;</span>,<span class="string">&quot;value03&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取多个键值对：&quot;</span>+jedis.mget(<span class="string">&quot;key01&quot;</span>,<span class="string">&quot;key02&quot;</span>,<span class="string">&quot;key03&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取多个键值对：&quot;</span>+jedis.mget(<span class="string">&quot;key01&quot;</span>,<span class="string">&quot;key02&quot;</span>,<span class="string">&quot;key03&quot;</span>,<span class="string">&quot;key04&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;删除多个键值对：&quot;</span>+jedis.del(<span class="string">&quot;key01&quot;</span>,<span class="string">&quot;key02&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取多个键值对：&quot;</span>+jedis.mget(<span class="string">&quot;key01&quot;</span>,<span class="string">&quot;key02&quot;</span>,<span class="string">&quot;key03&quot;</span>));</span><br><span class="line"></span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        System.out.println(<span class="string">&quot;===========新增键值对防止覆盖原先值==============&quot;</span>);</span><br><span class="line">        System.out.println(jedis.setnx(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>));</span><br><span class="line">        System.out.println(jedis.setnx(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>));</span><br><span class="line">        System.out.println(jedis.setnx(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2-new&quot;</span>));</span><br><span class="line">        System.out.println(jedis.get(<span class="string">&quot;key1&quot;</span>));</span><br><span class="line">        System.out.println(jedis.get(<span class="string">&quot;key2&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===========新增键值对并设置有效时间=============&quot;</span>);</span><br><span class="line">        System.out.println(jedis.setex(<span class="string">&quot;key3&quot;</span>, <span class="number">2</span>, <span class="string">&quot;value3&quot;</span>));</span><br><span class="line">        System.out.println(jedis.get(<span class="string">&quot;key3&quot;</span>));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(jedis.get(<span class="string">&quot;key3&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===========获取原值，更新为新值==========&quot;</span>);</span><br><span class="line">        System.out.println(jedis.getSet(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;key2GetSet&quot;</span>));</span><br><span class="line">        System.out.println(jedis.get(<span class="string">&quot;key2&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;获得key2的值的字串：&quot;</span>+jedis.getrange(<span class="string">&quot;key2&quot;</span>, <span class="number">2</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        System.out.println(<span class="string">&quot;===========添加一个list===========&quot;</span>);</span><br><span class="line">        jedis.lpush(<span class="string">&quot;collections&quot;</span>, <span class="string">&quot;ArrayList&quot;</span>, <span class="string">&quot;Vector&quot;</span>, <span class="string">&quot;Stack&quot;</span>, <span class="string">&quot;HashMap&quot;</span>, <span class="string">&quot;WeakHashMap&quot;</span>, <span class="string">&quot;LinkedHashMap&quot;</span>);</span><br><span class="line">        jedis.lpush(<span class="string">&quot;collections&quot;</span>, <span class="string">&quot;HashSet&quot;</span>);</span><br><span class="line">        jedis.lpush(<span class="string">&quot;collections&quot;</span>, <span class="string">&quot;TreeSet&quot;</span>);</span><br><span class="line">        jedis.lpush(<span class="string">&quot;collections&quot;</span>, <span class="string">&quot;TreeMap&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;collections的内容：&quot;</span>+jedis.lrange(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));<span class="comment">//-1代表倒数第一个元素，-2代表倒数第二个元素,end为-1表示查询全部</span></span><br><span class="line">        System.out.println(<span class="string">&quot;collections区间0-3的元素：&quot;</span>+jedis.lrange(<span class="string">&quot;collections&quot;</span>,<span class="number">0</span>,<span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">        <span class="comment">// 删除列表指定的值 ，第二个参数为删除的个数（有重复时），后add进去的值先被删，类似于出栈</span></span><br><span class="line">        System.out.println(<span class="string">&quot;删除指定元素个数：&quot;</span>+jedis.lrem(<span class="string">&quot;collections&quot;</span>, <span class="number">2</span>, <span class="string">&quot;HashMap&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;collections的内容：&quot;</span>+jedis.lrange(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;删除下表0-3区间之外的元素：&quot;</span>+jedis.ltrim(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;collections的内容：&quot;</span>+jedis.lrange(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;collections列表出栈（左端）：&quot;</span>+jedis.lpop(<span class="string">&quot;collections&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;collections的内容：&quot;</span>+jedis.lrange(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;collections添加元素，从列表右端，与lpush相对应：&quot;</span>+jedis.rpush(<span class="string">&quot;collections&quot;</span>, <span class="string">&quot;EnumMap&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;collections的内容：&quot;</span>+jedis.lrange(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;collections列表出栈（右端）：&quot;</span>+jedis.rpop(<span class="string">&quot;collections&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;collections的内容：&quot;</span>+jedis.lrange(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;修改collections指定下标1的内容：&quot;</span>+jedis.lset(<span class="string">&quot;collections&quot;</span>, <span class="number">1</span>, <span class="string">&quot;LinkedArrayList&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;collections的内容：&quot;</span>+jedis.lrange(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;collections的长度：&quot;</span>+jedis.llen(<span class="string">&quot;collections&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取collections下标为2的元素：&quot;</span>+jedis.lindex(<span class="string">&quot;collections&quot;</span>, <span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">        jedis.lpush(<span class="string">&quot;sortedList&quot;</span>, <span class="string">&quot;3&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;4&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;sortedList排序前：&quot;</span>+jedis.lrange(<span class="string">&quot;sortedList&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(jedis.sort(<span class="string">&quot;sortedList&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;sortedList排序后：&quot;</span>+jedis.lrange(<span class="string">&quot;sortedList&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br></pre></td></tr></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        System.out.println(<span class="string">&quot;============向集合中添加元素（不重复）============&quot;</span>);</span><br><span class="line">        System.out.println(jedis.sadd(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e1&quot;</span>,<span class="string">&quot;e2&quot;</span>,<span class="string">&quot;e4&quot;</span>,<span class="string">&quot;e3&quot;</span>,<span class="string">&quot;e0&quot;</span>,<span class="string">&quot;e8&quot;</span>,<span class="string">&quot;e7&quot;</span>,<span class="string">&quot;e5&quot;</span>));</span><br><span class="line">        System.out.println(jedis.sadd(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e6&quot;</span>));</span><br><span class="line">        System.out.println(jedis.sadd(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e6&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet的所有元素为：&quot;</span>+jedis.smembers(<span class="string">&quot;eleSet&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;删除一个元素e0：&quot;</span>+jedis.srem(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e0&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet的所有元素为：&quot;</span>+jedis.smembers(<span class="string">&quot;eleSet&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;删除两个元素e7和e6：&quot;</span>+jedis.srem(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e7&quot;</span>,<span class="string">&quot;e6&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet的所有元素为：&quot;</span>+jedis.smembers(<span class="string">&quot;eleSet&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;随机的移除集合中的一个元素：&quot;</span>+jedis.spop(<span class="string">&quot;eleSet&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;随机的移除集合中的一个元素：&quot;</span>+jedis.spop(<span class="string">&quot;eleSet&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet的所有元素为：&quot;</span>+jedis.smembers(<span class="string">&quot;eleSet&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet中包含元素的个数：&quot;</span>+jedis.scard(<span class="string">&quot;eleSet&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;e3是否在eleSet中：&quot;</span>+jedis.sismember(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e3&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;e1是否在eleSet中：&quot;</span>+jedis.sismember(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e1&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;e1是否在eleSet中：&quot;</span>+jedis.sismember(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e5&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">        System.out.println(jedis.sadd(<span class="string">&quot;eleSet1&quot;</span>, <span class="string">&quot;e1&quot;</span>,<span class="string">&quot;e2&quot;</span>,<span class="string">&quot;e4&quot;</span>,<span class="string">&quot;e3&quot;</span>,<span class="string">&quot;e0&quot;</span>,<span class="string">&quot;e8&quot;</span>,<span class="string">&quot;e7&quot;</span>,<span class="string">&quot;e5&quot;</span>));</span><br><span class="line">        System.out.println(jedis.sadd(<span class="string">&quot;eleSet2&quot;</span>, <span class="string">&quot;e1&quot;</span>,<span class="string">&quot;e2&quot;</span>,<span class="string">&quot;e4&quot;</span>,<span class="string">&quot;e3&quot;</span>,<span class="string">&quot;e0&quot;</span>,<span class="string">&quot;e8&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;将eleSet1中删除e1并存入eleSet3中：&quot;</span>+jedis.smove(<span class="string">&quot;eleSet1&quot;</span>, <span class="string">&quot;eleSet3&quot;</span>, <span class="string">&quot;e1&quot;</span>));<span class="comment">//移到集合元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;将eleSet1中删除e2并存入eleSet3中：&quot;</span>+jedis.smove(<span class="string">&quot;eleSet1&quot;</span>, <span class="string">&quot;eleSet3&quot;</span>, <span class="string">&quot;e2&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet1中的元素：&quot;</span>+jedis.smembers(<span class="string">&quot;eleSet1&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet3中的元素：&quot;</span>+jedis.smembers(<span class="string">&quot;eleSet3&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;============集合运算=================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet1中的元素：&quot;</span>+jedis.smembers(<span class="string">&quot;eleSet1&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet2中的元素：&quot;</span>+jedis.smembers(<span class="string">&quot;eleSet2&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet1和eleSet2的交集:&quot;</span>+jedis.sinter(<span class="string">&quot;eleSet1&quot;</span>,<span class="string">&quot;eleSet2&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet1和eleSet2的并集:&quot;</span>+jedis.sunion(<span class="string">&quot;eleSet1&quot;</span>,<span class="string">&quot;eleSet2&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet1和eleSet2的差集:&quot;</span>+jedis.sdiff(<span class="string">&quot;eleSet1&quot;</span>,<span class="string">&quot;eleSet2&quot;</span>));<span class="comment">//eleSet1中有，eleSet2中没有</span></span><br><span class="line">        jedis.sinterstore(<span class="string">&quot;eleSet4&quot;</span>,<span class="string">&quot;eleSet1&quot;</span>,<span class="string">&quot;eleSet2&quot;</span>);<span class="comment">//求交集并将交集保存到dstkey的集合</span></span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet4中的元素：&quot;</span>+jedis.smembers(<span class="string">&quot;eleSet4&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;key2&quot;</span>,<span class="string">&quot;value2&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;key3&quot;</span>,<span class="string">&quot;value3&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;key4&quot;</span>,<span class="string">&quot;value4&quot;</span>);</span><br><span class="line">        <span class="comment">//添加名称为hash（key）的hash元素</span></span><br><span class="line">        jedis.hmset(<span class="string">&quot;hash&quot;</span>,map);</span><br><span class="line">        <span class="comment">//向名称为hash的hash中添加key为key5，value为value5元素</span></span><br><span class="line">        jedis.hset(<span class="string">&quot;hash&quot;</span>, <span class="string">&quot;key5&quot;</span>, <span class="string">&quot;value5&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;散列hash的所有键值对为：&quot;</span>+jedis.hgetAll(<span class="string">&quot;hash&quot;</span>));<span class="comment">//return Map&lt;String,String&gt;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;散列hash的所有键为：&quot;</span>+jedis.hkeys(<span class="string">&quot;hash&quot;</span>));<span class="comment">//return Set&lt;String&gt;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;散列hash的所有值为：&quot;</span>+jedis.hvals(<span class="string">&quot;hash&quot;</span>));<span class="comment">//return List&lt;String&gt;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;将key6保存的值加上一个整数，如果key6不存在则添加key6：&quot;</span>+jedis.hincrBy(<span class="string">&quot;hash&quot;</span>, <span class="string">&quot;key6&quot;</span>, <span class="number">6</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;散列hash的所有键值对为：&quot;</span>+jedis.hgetAll(<span class="string">&quot;hash&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;将key6保存的值加上一个整数，如果key6不存在则添加key6：&quot;</span>+jedis.hincrBy(<span class="string">&quot;hash&quot;</span>, <span class="string">&quot;key6&quot;</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;散列hash的所有键值对为：&quot;</span>+jedis.hgetAll(<span class="string">&quot;hash&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;删除一个或者多个键值对：&quot;</span>+jedis.hdel(<span class="string">&quot;hash&quot;</span>, <span class="string">&quot;key2&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;散列hash的所有键值对为：&quot;</span>+jedis.hgetAll(<span class="string">&quot;hash&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;散列hash中键值对的个数：&quot;</span>+jedis.hlen(<span class="string">&quot;hash&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;判断hash中是否存在key2：&quot;</span>+jedis.hexists(<span class="string">&quot;hash&quot;</span>,<span class="string">&quot;key2&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;判断hash中是否存在key3：&quot;</span>+jedis.hexists(<span class="string">&quot;hash&quot;</span>,<span class="string">&quot;key3&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取hash中的值：&quot;</span>+jedis.hmget(<span class="string">&quot;hash&quot;</span>,<span class="string">&quot;key3&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取hash中的值：&quot;</span>+jedis.hmget(<span class="string">&quot;hash&quot;</span>,<span class="string">&quot;key3&quot;</span>,<span class="string">&quot;key4&quot;</span>));</span><br></pre></td></tr></table></figure><h1 id="SpringBoot-整合"><a href="#SpringBoot-整合" class="headerlink" title="SpringBoot 整合"></a>SpringBoot 整合</h1><p>在SpringBoot2.x之后，原来使用的jedis被替换为lettuce</p><p>jedis: 采用的直连，多个线程操作的话是不安全的，如果想要避免不安全，使用jedis pool连接池！类似BIO模式</p><p>lettuce : 采用netty，实例可以再多个线程中进行共享，不存在线程不安全的情况！可以减少线程数据<br>了，更像 NIO 模式</p><h2 id="导入依赖-1"><a href="#导入依赖-1" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 操作redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置连接"><a href="#配置连接" class="headerlink" title="配置连接"></a>配置连接</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置redis</span></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string">6379</span></span><br></pre></td></tr></table></figure><h2 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Redis02SpringbootApplicationTests</span> &#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// redisTemplate 操作不同的数据类型，api和我们的指令是一样的</span></span><br><span class="line">    <span class="comment">// opsForValue 操作字符串 类似String</span></span><br><span class="line">    <span class="comment">// opsForList  操作List 类似List</span></span><br><span class="line">    <span class="comment">// opsForSet</span></span><br><span class="line">    <span class="comment">// opsForHash</span></span><br><span class="line">    <span class="comment">// opsForZSet</span></span><br><span class="line">    <span class="comment">// opsForGeo</span></span><br><span class="line">    <span class="comment">// opsForHyperLogLog</span></span><br><span class="line">    <span class="comment">// 除了进本的操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务，和基本的CRUD</span></span><br><span class="line">    <span class="comment">// 获取redis的连接对象</span></span><br><span class="line">  <span class="comment">// RedisConnection connection=redisTemplate.getConnectionFactory().getConnection();</span></span><br><span class="line">    <span class="comment">//    connection.flushDb();</span></span><br><span class="line">    <span class="comment">//    connection.flushAll();</span></span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;mykey&quot;</span>,<span class="string">&quot;test123&quot;</span>);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;mykey&quot;</span>));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义RedisTemplete"><a href="#自定义RedisTemplete" class="headerlink" title="自定义RedisTemplete"></a>自定义RedisTemplete</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">  <span class="comment">// 这是我给大家写好的一个固定模板，大家在企业中，拿去就可以直接使用！</span></span><br><span class="line">  <span class="comment">// 自己定义了一个 RedisTemplate</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory</span></span><br><span class="line"><span class="params">factory)</span> &#123;</span><br><span class="line">    <span class="comment">// 我们为了自己开发方便，一般直接使用 &lt;String, Object&gt;</span></span><br><span class="line">    RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;String,</span><br><span class="line">Object&gt;();</span><br><span class="line">    template.setConnectionFactory(factory);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// Json序列化配置</span></span><br><span class="line">    <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">    <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">    om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">    jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">    <span class="comment">// String 的序列化</span></span><br><span class="line">    <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">    <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">    template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">    <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">    template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">    <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">    template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">    <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">    template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">    template.afterPropertiesSet();</span><br><span class="line">    <span class="keyword">return</span> template;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="redisUtil"><a href="#redisUtil" class="headerlink" title="redisUtil"></a>redisUtil</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">RedisUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// =============================common============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getExpire</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String... key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="literal">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================String=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">key</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="literal">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ================================Map=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hget</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hmget</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hset</span><span class="params">(String key, String item, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hset</span><span class="params">(String key, String item, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hdel</span><span class="params">(String key, Object... item)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hHasKey</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hincr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要减少记(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hdecr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================set=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">sGet</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sHasKey</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sSet</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sSetAndTime</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sGetSetSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">setRemove</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ===============================list=================================</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束 0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">lGet</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">lGetListSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">lGetIndex</span><span class="params">(String key, <span class="type">long</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lUpdateIndex</span><span class="params">(String key, <span class="type">long</span> index, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">remove</span> <span class="operator">=</span> redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="OutOfDirectMemoryError"><a href="#OutOfDirectMemoryError" class="headerlink" title="OutOfDirectMemoryError"></a>OutOfDirectMemoryError</h2><p>springboot 2.0以后默认使用lettuce作为操作redis的客户端，它使用netty进行网络通信<br>lettuce的bug导致netty堆外内存溢出 </p><p>解决方案：</p><ul><li>方案1：升级lettuce客户端 </li><li>方案2：切换使用jedis</li></ul><p>这里我们采用方案2</p><p>在pom文件中修改：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.lettuce<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lettuce-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习笔记03-Redis事务</title>
      <link href="/post/26f9fd15.html"/>
      <url>/post/26f9fd15.html</url>
      
        <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>Redis事务本质：一组命令的集合，一个事务中的所有命令都会被序列化，在事务执行的过程中，会按照顺序执行</p><p>一次性、顺序性、排他性！执行一些列的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">------ 队列 <span class="built_in">set</span> <span class="built_in">set</span> <span class="built_in">set</span> 执行 -----</span><br></pre></td></tr></table></figure><p>==Redis事务没有隔离级别的概念==</p><p>所有的命令在事务中，并没有直接被执行，只有发起执行命令的时候才会执行</p><p>==Redis单条命令是保证原子性的，但是事务不保证原子性==</p><p>redis的事务：</p><ul><li>开启事务（multi）</li><li>命令入队（…）</li><li>执行事务（exec）</li></ul><h2 id="正常执行事务"><a href="#正常执行事务" class="headerlink" title="正常执行事务"></a>正常执行事务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI <span class="comment">#开启事务</span></span><br><span class="line">OK</span><br><span class="line"><span class="comment">#命令入队</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line"><span class="comment"># 执行事务</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) <span class="string">&quot;v2&quot;</span></span><br><span class="line">4) OK</span><br></pre></td></tr></table></figure><h2 id="放弃事务"><a href="#放弃事务" class="headerlink" title="放弃事务"></a>放弃事务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; DISCARD<span class="comment"># 取消事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k4<span class="comment"># 事务队列中命令都不会被执行</span></span><br><span class="line">(nil)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><blockquote><p>编译型异常（代码有问题！命令有错），事务中所有的命令都不会被执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; getset k3</span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">&#x27;getset&#x27;</span> <span class="built_in">command</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">(nil)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>运行时异常（1/0），如果事务队列中存在错误，那么执行命令时，其他命令是可以正常执行的，错误的命令抛出异常</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 <span class="string">&quot;v1&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; INCR k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">1) (error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">2) OK</span><br><span class="line">3) OK</span><br><span class="line">4) <span class="string">&quot;v3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line"><span class="string">&quot;v2&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><ul><li>很悲观，认为什么时候都会出现问题，无论做什么都会枷锁</li></ul><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><ul><li>很乐观，认为什么时候都不会出现问题，所以不会上锁！更新数据的时候去判断一下，在此期间是否有人修改过这个数据</li><li>获取version</li><li>更新的时候比较version</li></ul><blockquote><p>redis监视测试</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; WATCH money<span class="comment"># 监视money 对象</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI<span class="comment"># 事务正常结束，数据期间没有发生变动，这个时候就正常执行成功</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECRBY money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCRBY out 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">1) (<span class="built_in">integer</span>) 80</span><br><span class="line">2) (<span class="built_in">integer</span>) 20</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习笔记02-Redis数据类型</title>
      <link href="/post/3869b046.html"/>
      <url>/post/3869b046.html</url>
      
        <content type="html"><![CDATA[<h2 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h2><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 <a href="http://www.redis.cn/topics/data-types-intro.html#strings">字符串（strings）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hashes">散列（hashes）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#lists">列表（lists）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sets">集合（sets）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sorted-sets">有序集合（sorted sets）</a> 与范围查询， <a href="http://www.redis.cn/topics/data-types-intro.html#bitmaps">bitmaps</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hyperloglogs">hyperloglogs</a> 和 <a href="http://www.redis.cn/commands/geoadd.html">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href="http://www.redis.cn/topics/replication.html">复制（replication）</a>，<a href="http://www.redis.cn/commands/eval.html">LUA脚本（Lua scripting）</a>， <a href="http://www.redis.cn/topics/lru-cache.html">LRU驱动事件（LRU eviction）</a>，<a href="http://www.redis.cn/topics/transactions.html">事务（transactions）</a> 和不同级别的 <a href="http://www.redis.cn/topics/persistence.html">磁盘持久化（persistence）</a>， 并通过 <a href="http://www.redis.cn/topics/sentinel.html">Redis哨兵（Sentinel）</a>和自动 <a href="http://www.redis.cn/topics/cluster-tutorial.html">分区（Cluster）</a>提供高可用性（high availability）。</p><h3 id="Redis-Key"><a href="#Redis-Key" class="headerlink" title="Redis-Key"></a>Redis-Key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name hello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EXPIRE name 10 <span class="comment"># 设置key的过期时间，单位是秒</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name <span class="comment">#查看当前key的剩余时间</span></span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> name <span class="comment"># 查看当前key的类型</span></span><br><span class="line">string</span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 v1 <span class="comment"># 设置值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1 <span class="comment"># 获得值</span></span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; keys * <span class="comment">#获得所有的key</span></span><br><span class="line">1) <span class="string">&quot;key1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EXISTS key1 <span class="comment"># 判断某一个key是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; APPEND key1 <span class="string">&quot;hello&quot;</span>  <span class="comment"># 追加字符串，如果key不存在，就相当于set key</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;v1hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; STRLEN key1 <span class="comment"># 获取字符串的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; APPEND key1 <span class="string">&quot;,world&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 13</span><br><span class="line">127.0.0.1:6379&gt; STRLEN key1</span><br><span class="line">(<span class="built_in">integer</span>) 13</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;v1hello,world&quot;</span></span><br><span class="line"><span class="comment">##########################################################</span></span><br><span class="line"><span class="comment"># i++</span></span><br><span class="line"><span class="comment"># 步长</span></span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> view 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get view</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; INCR view <span class="comment"># 自增1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; INCR view</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; DECR view <span class="comment"># 自减1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; DECR view</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get view</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; INCRBY view 10 <span class="comment"># 可以设置步长，指定增量</span></span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379&gt; INCRBY view 10</span><br><span class="line">(<span class="built_in">integer</span>) 20</span><br><span class="line">127.0.0.1:6379&gt; DECRBY view 10</span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line"></span><br><span class="line"><span class="comment">#############################################</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 <span class="string">&quot;hello,world&quot;</span> <span class="comment"># 设置key1的值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1</span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">&#x27;set&#x27;</span> <span class="built_in">command</span></span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;hello,world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GETRANGE key1 0 3 <span class="comment"># 截取字符串 [0,3]</span></span><br><span class="line"><span class="string">&quot;hell&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GETRANGE key1 0 -1 <span class="comment"># 获取全部的字符串 和 get key是一样的</span></span><br><span class="line"><span class="string">&quot;hello,world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key2 abcdefg</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key2</span><br><span class="line"><span class="string">&quot;abcdefg&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SETRANGE key2 1 xx <span class="comment"># 替换指定位置开始的字符串</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; get key2</span><br><span class="line"><span class="string">&quot;axxdefg&quot;</span></span><br><span class="line"><span class="comment">##################################################################</span></span><br><span class="line"><span class="comment"># setex (set with expire)  # 设置过期时间</span></span><br><span class="line"><span class="comment"># setnx (set if not exist) # 不存在再设置 (在分布式锁中会经常使用)</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SETEX key3 30 <span class="string">&quot;hello&quot;</span>  <span class="comment"># 设置key3 的值为 hello,30秒后过期</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl key3</span><br><span class="line">(<span class="built_in">integer</span>) 27</span><br><span class="line">127.0.0.1:6379&gt; get key3</span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; setnx mykey <span class="string">&quot;redis&quot;</span>  <span class="comment"># 如果mykey 不存在，创建mykey</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;mykey&quot;</span></span><br><span class="line">2) <span class="string">&quot;key1&quot;</span></span><br><span class="line">3) <span class="string">&quot;key2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; setnx mykey <span class="string">&quot;MongoDB&quot;</span>  <span class="comment"># 如果mykey存在，创建失败</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get mykey</span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line"><span class="comment">#####################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3 <span class="comment"># 同时设置多个值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k3&quot;</span></span><br><span class="line">2) <span class="string">&quot;k2&quot;</span></span><br><span class="line">3) <span class="string">&quot;k1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2 k3 <span class="comment"># 同时获取多个值</span></span><br><span class="line">1) <span class="string">&quot;v1&quot;</span></span><br><span class="line">2) <span class="string">&quot;v2&quot;</span></span><br><span class="line">3) <span class="string">&quot;v3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; msetnx k1 v1 k4 v4 <span class="comment"># msetnx 是一个原子性的操作，要么一起成功，要么一起失败</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象</span></span><br><span class="line"><span class="built_in">set</span> user:1 &#123;name:zhangsan,age:3&#125; <span class="comment">#设置一个user:1 对象 值为json字符来保存一个对象！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里的key是一个巧妙的设计 ： user:&#123;id&#125;:&#123;filed&#125; , 如此设计在Redis中是完全ok</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; mset user:1:name zhangsan user:1:age 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget user:1:name user:1:age</span><br><span class="line">1) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">2) <span class="string">&quot;2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#############################################################</span></span><br><span class="line">getset <span class="comment"># 先get然后再set</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; getset db redis  <span class="comment"># 如果不存在值，则返回nil</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getset db mongoDB <span class="comment"># 如果存在值，获取原来的值，并设置新的值</span></span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line"><span class="string">&quot;mongoDB&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>所有的list命令都是以l开头的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#############################################################</span></span><br><span class="line">127.0.0.1:6379&gt; LPUSH list one  <span class="comment"># 将一个值或者多个值，插入到列表头部（左）</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list two</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list three</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1 <span class="comment"># 获取list中的值</span></span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 1 <span class="comment"># 通过区间获取具体的值</span></span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; RPUSH list right <span class="comment"># 将一个值或者多个值，插入到列表尾部（右）</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;right&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;right&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LPOP list <span class="comment"># 移除list的第一个元素</span></span><br><span class="line"><span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; rpop list <span class="comment"># 移除list的最后一个元素</span></span><br><span class="line"><span class="string">&quot;right&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line">127.0.0.1:6379&gt; LINDEX list 1</span><br><span class="line"><span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LINDEX list 0</span><br><span class="line"><span class="string">&quot;two&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#############################################################</span></span><br><span class="line">127.0.0.1:6379&gt; LPUSH list one</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list two</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list three</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; LLEN list                <span class="comment"># 返回列表的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line">移除指定的值</span><br><span class="line">127.0.0.1:6379&gt; LREM list 1 one <span class="comment"># 移除list集合中指定个数的value，精确匹配</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LPUSH list three</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LREM list 2 three</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line">trim 修剪。</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist <span class="string">&quot;hello1&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist <span class="string">&quot;hello2&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist <span class="string">&quot;hello3&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; LTRIM mylist 1 2  <span class="comment"># 通过下表截取指定的长度</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line">rpoplpush <span class="comment"># 移除列表的最后一个元素，将他移动到新的列表中</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist <span class="string">&quot;hello1&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist <span class="string">&quot;hello2&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; RPOPLPUSH mylist mytoherlist  <span class="comment"># 移除列表的最后一个元素，将他移动到新的列表中</span></span><br><span class="line"><span class="string">&quot;hello2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE mytoherlist 0 -1</span><br><span class="line">1) <span class="string">&quot;hello2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line">lset 将列表中指定下标的值替换为另一个值，更新操作</span><br><span class="line">127.0.0.1:6379&gt; EXISTS list  <span class="comment"># 判断这个列表是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; lset list 0 item <span class="comment"># 如果不存在列表我们去更新就会报错</span></span><br><span class="line">(error) ERR no such key</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list value1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 0</span><br><span class="line">1) <span class="string">&quot;value1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lset list 0 item <span class="comment"># 如果存在，更新当前下标的值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 0</span><br><span class="line">1) <span class="string">&quot;item&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lset list 1 other <span class="comment"># 如果不存在，则会报错</span></span><br><span class="line">(error) ERR index out of range</span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line">linsert <span class="comment"># 将某个具体的value插入到列表中某个元素的前面或者后面</span></span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist <span class="string">&quot;world&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; LINSERT mylist before <span class="string">&quot;world&quot;</span> <span class="string">&quot;other&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;other&quot;</span></span><br><span class="line">3) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LINSERT  mylist after world new</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;other&quot;</span></span><br><span class="line">3) <span class="string">&quot;world&quot;</span></span><br><span class="line">4) <span class="string">&quot;new&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>小结</p></blockquote><ul><li>list实际上是一个链表，before Node after , left ,right 都可以插入值</li><li>如果key不存在，创建新的链表</li><li>如果key存在，新增内容</li><li>如果移除了所有值，空链表，也代表不存在</li><li>在两边插入或者改动值，效率最高</li></ul><h3 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############################################################</span></span><br><span class="line">127.0.0.1:6379&gt; sadd myset <span class="string">&quot;hello&quot;</span><span class="comment"># set集合中添加值</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset <span class="string">&quot;world&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset <span class="string">&quot;one two&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset<span class="comment"># 查看指定set的所有值</span></span><br><span class="line">1) <span class="string">&quot;one two&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br><span class="line">3) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER myset hello<span class="comment"># 判断某一个值是否在set中</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER myset gkd</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line">127.0.0.1:6379&gt; SCARD myset<span class="comment"># 获取set集合中的内容元素个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line">127.0.0.1:6379&gt; SREM myset hello<span class="comment"># 移除set集合中的指定元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SCARD myset</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;one two&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;one two&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset<span class="comment"># 随机抽选出一个元素</span></span><br><span class="line"><span class="string">&quot;one two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class="line"><span class="string">&quot;one two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class="line"><span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line">随机删除key</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;one two&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SPOP myset<span class="comment"># 随机删除一些set集合中的元素</span></span><br><span class="line"><span class="string">&quot;one two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>Map集合，key-map集合，本质和String类型没有太大区别，还是一个简单的key-value</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET myhash field1 hello<span class="comment"># set 一个具体 key-value</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HGET myhash field1<span class="comment"># 获取一个字段值</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; HMSET myhash field1 hello1 field2 world<span class="comment"># set多个具体 key-value</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; HMGET myhash  field1 field2<span class="comment"># 获取多个字段值</span></span><br><span class="line">1) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; HGETALL myhash<span class="comment"># 获取全部的数据</span></span><br><span class="line">1) <span class="string">&quot;field1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">3) <span class="string">&quot;field2&quot;</span></span><br><span class="line">4) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; HDEL myhash field1<span class="comment"># 删除hash指定key字段，对应的value值也就消失了</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HGETALL myhash</span><br><span class="line">1) <span class="string">&quot;field2&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line">127.0.0.1:6379&gt; HMSET myhash field1 hello1 field2 world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; HGETALL myhash</span><br><span class="line">1) <span class="string">&quot;field2&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">3) <span class="string">&quot;field1&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hlen myhash<span class="comment"># 获取hash表的字段数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line">127.0.0.1:6379&gt; HEXISTS myhash field1<span class="comment"># 判断hash中指定字段是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HEXISTS myhash field3</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line">127.0.0.1:6379&gt; hkeys myhash<span class="comment"># 值获得所有field</span></span><br><span class="line">1) <span class="string">&quot;field2&quot;</span></span><br><span class="line">2) <span class="string">&quot;field1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; HVALS myhash<span class="comment"># 只获得所有value</span></span><br><span class="line">1) <span class="string">&quot;world&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello1&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hash变更的数据user name age ,尤其是用户信息之类的，经常变动的信息</p><h3 id="Zset-有序集合"><a href="#Zset-有序集合" class="headerlink" title="Zset(有序集合)"></a>Zset(有序集合)</h3><p>在set的基础上，增加了一个值,set k1 v1 zset k1 score1 v1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd myset 1 one<span class="comment"># 添加一个值</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD myset 2 two 3 three <span class="comment"># 添加多个值</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myset 0 -1</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line">排序如何实现</span><br><span class="line">127.0.0.1:6379&gt; ZADD salary 2500 xiaohong</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD salary 5000 zhangsan</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD salary 500 xiaoming</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf<span class="comment"># 显示全部用户 从小到大</span></span><br><span class="line">1) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">2) <span class="string">&quot;xiaohong&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf 2500 withscores</span><br><span class="line">1) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">2) <span class="string">&quot;500&quot;</span></span><br><span class="line">3) <span class="string">&quot;xiaohong&quot;</span></span><br><span class="line">4) <span class="string">&quot;2500&quot;</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zrange salary 0 -1</span><br><span class="line">1) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">2) <span class="string">&quot;xiaohong&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrem salary xiaohong<span class="comment"># 移除有序集合的指定数据</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange salary 0 -1</span><br><span class="line">1) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">2) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习笔记01-Redis入门</title>
      <link href="/post/61cf417d.html"/>
      <url>/post/61cf417d.html</url>
      
        <content type="html"><![CDATA[<h2 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>Redis是什么？</p></blockquote><p>Redis（<strong>Re</strong>mote <strong>Di</strong>ctionary <strong>S</strong>erver )，即远程字典服务</p><p>是一个开源的使用ANSI <a href="https://baike.baidu.com/item/C语言">C语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href="https://baike.baidu.com/item/数据库/103728">数据库</a>，并提供多种语言的API。</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200505214923.png" alt=""></p><p>redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p><p>免费和开源！是当下最热门的nosql技术之一！也被人们称为结构化数据库！</p><blockquote><p>Redis 能干嘛？</p></blockquote><p>1、内存存储、持久化、内存是断电即失、所以说持久化很重要（rdb、aof）</p><p>2、效率高，可以用于高速缓存</p><p>3、发布订阅系统</p><p>4、地图信息分析</p><p>5、计时器、计数器（浏览量！）</p><p>6、……</p><blockquote><p>特性</p></blockquote><p>1、多样的数据类型</p><p>2、持久化</p><p>3、集群</p><p>4、事务</p><blockquote><p>学习中需要用到的东西</p></blockquote><p>1、官网：<a href="https://redis.io/">https://redis.io/</a></p><p>2、中文网站：<a href="http://www.redis.cn/">http://www.redis.cn/</a></p><p>3.下载地址</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200505215745.png" alt=""></p><p>注意：windows在GitHub上下载（停更很久了！）</p><h3 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h3><p>1、下载安装包：<a href="https://github.com/microsoftarchive/redis/releases">https://github.com/microsoftarchive/redis/releases</a></p><p>2、下载完毕得到安装包：</p><p>3、解压到自己电脑上的环境目录下</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200505220535.png" alt=""></p><p>4、双击redis-server.exe，启动运行服务即可！</p><p>5、使用redis-cli客户端来连接redis</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200505221054.png" alt=""></p><h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h3><p>1、下载安装包<a href="https://redis.io/download">https://redis.io/download</a></p><p>2、解压redis的安装包</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200507221444.png" alt=""></p><p>3、进入解压后的文件，可以看到Redis的配置文件</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200507221630.png" alt=""></p><p>4、基本的环境安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200507222307.png" alt=""></p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200507222357.png" alt=""></p><p>5、Redis的默认安装路径<code>/usr/local/bin</code></p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200507222554.png" alt=""></p><p>6、将redis配置文件。复制到我们当前目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /opt/redis-5.0.8/redis.conf myconfig/</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200507222910.png" alt=""></p><p>7、redis默认不是后台启动的，修改配置文件</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200507223125.png" alt=""></p><p>8、通过制定的配置文件启动Redis服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server myconfig/redis.conf</span><br></pre></td></tr></table></figure><p><img src="C:\Users\dik\AppData\Roaming\Typora\typora-user-images\1588861993613.png" alt="1588861993613"></p><p>9、使用redis-cli 进行测试</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200507223524.png" alt=""></p><p>10、查看redis的进程是否开启</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200507223753.png" alt=""></p><p>11、如何关闭Redis服务？</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200507223924.png" alt=""></p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>redis默认有16个数据库</p><p>默认使用的是第0个数据库</p><p>可以使用select进行切换数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; select 3 <span class="comment"># 切换数据库</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[3]&gt; DBSIZE <span class="comment"># 查看DB大小</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200510222926.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[3]&gt; keys * <span class="comment">#查看数据库所有的key</span></span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br></pre></td></tr></table></figure><p>清除当前数据库<code>flushdb</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[3]&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[3]&gt; keys *</span><br><span class="line">(empty list or set)</span><br></pre></td></tr></table></figure><p>清除全部数据库的内容<code>flushall</code></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JAVA核心技术(卷1)》读书笔记03-数据类型</title>
      <link href="/post/a0fefe31.html"/>
      <url>/post/a0fefe31.html</url>
      
        <content type="html"><![CDATA[<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>Java 没有内置的字符串类型，而是在标准Java 类库中提供了一个预定义类，<br>很自然地叫做String。每个用双引号括起来的字符串都是String类的一个实例。</p><h3 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h3><p>String类的substring方法可以从一个较大的字符串提取一个子串。例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">greeting</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> greeting.substring(<span class="number">0</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>substring 方法的第二个参数是不想复制的第一个位置。这里要复制位置为0、1 和2 (从0 到2, 包括0 和2 ) 的字符。在substring 中从0 开始计数，直到3 为止，但不含3。substring 的工作方式有一个优点：容易计算子串的长度。字符串s.substring(a,b) 的长度为b-a 。例如，子串“ Hel”的长度为3-0=3 。</p><h3 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h3><p>Java 语言允许使用+ 号连接（拼接）两个字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">expletive</span> <span class="operator">=</span> <span class="string">&quot;Expletive&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">PG13</span> <span class="operator">=</span> <span class="string">&quot;deleted&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> expletive + PG13;</span><br></pre></td></tr></table></figure><p>当将一个字符串与一个非字符串的值进行拼接时，后者被转换成字符串。</p><p>如果需要把多个字符串放在一起，用一个定界符分隔，可以使用静态join方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">all</span> <span class="operator">=</span> String.join(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="string">&quot;M&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="检测字符串是否相等"><a href="#检测字符串是否相等" class="headerlink" title="检测字符串是否相等"></a>检测字符串是否相等</h3><p>可以使用equals 方法检测两个字符串是否相等。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.equals(t)</span><br></pre></td></tr></table></figure><p>如果字符串s 与字符串t 相等，则返回true ; 否则，返回false。需要注意，s 与t 可以是字符串变量，也可以是字符串字面量。</p><p>如果想要检测2个字符串是否相等，而不区分大小写，可以用equalsIgnoreCase 方法。</p><p>一定不要使用==运算符检测两个字符串是否相等！这个运算符只能够确定两个字符串是否放置在同一个位置上。当然，如果字符串放置在同一个位置上，它们必然相等。但是，完全有可能将内容相同的多个字符串的拷贝放置在不同的位置上。</p><h3 id="空串与null串"><a href="#空串与null串" class="headerlink" title="空串与null串"></a>空串与null串</h3><p>空串””是长度为0 的字符串。可以调用以下代码检查一个字符串是否为空：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (str.length() == <span class="number">0</span>)&#123;&#125;</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line"><span class="keyword">if</span> (str.equals(<span class="string">&quot;&quot;</span>))&#123;&#125;</span><br></pre></td></tr></table></figure><p>空串是一个Java 对象，有自己的串长度（0 ) 和内容（空）。不过，String 变量还可以存放一个特殊的值，名为null , 这表示目前没有任何对象与该变量关联。要检查一个字符串是否为null , 要使用以下条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (str == <span class="literal">null</span>)&#123;&#125;</span><br></pre></td></tr></table></figure><p>有时要检查一个字符串既不是null 也不为空串，这种情况下就需要使用以下条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (str != <span class="literal">null</span> &amp;&amp; str.length() != <span class="number">0</span>)&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h3 id="读取输入"><a href="#读取输入" class="headerlink" title="读取输入"></a>读取输入</h3><p>前面已经看到，打印输出到“ 标准输出流”（即控制台窗口）是一件非常容易的事情，只要调用System.out.println 即可。然而，读取“标准输人流” System.in 就没有那么简单了。要想通过控制台进行输人，首先需要构造一个Scanner 对象，并与“ 标准输入流” System.in 关联。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in)</span><br></pre></td></tr></table></figure><p>现在，就可以使用Scanner 类的各种方法实现输入操作了。例如，nextLine 方法将输入一行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.print(<span class="string">&quot;What is your name? &quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span>in.nextLine();</span><br></pre></td></tr></table></figure><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><p>可以使用SyStem.0Ut.print(x) 将数值x 输出到控制台上。这条命令将以x 对应的数据类型所允许的最大非0 数字位数打印输出X。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> x= <span class="number">10000.0</span> / <span class="number">3.0</span>;</span><br><span class="line">System.out.print(x);</span><br><span class="line"># 输出</span><br><span class="line"><span class="number">3333.3333333333335</span></span><br></pre></td></tr></table></figure><p>Java SE 5.0 沿用了C语言库函数中的printf方法。例如，调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">&quot;%8.2f&quot;</span>, x);</span><br></pre></td></tr></table></figure><p>可以用8 个字符的宽度和小数点后两个字符的精度打印x。也就是说，打印输出一个空格和7 个字符，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">333.33</span></span><br></pre></td></tr></table></figure><p>在printf中，可以使用多个参数，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">&quot;Hello,%s. Next year, you&#x27;llbe %d&quot;</span>,name,age);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>每一个以％字符开始的格式说明符都用相应的参数替换。格式说明符尾部的转换符将指示被格式化的数值类型：f 表示浮点数，s 表示字符串，d 表示十进制整数。</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200419183152.png" alt=""></p><h3 id="文件输入与输出"><a href="#文件输入与输出" class="headerlink" title="文件输入与输出"></a>文件输入与输出</h3><p>要想对文件进行读取，就需要一个用File 对象构造一个Scanner 对象，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(Paths.get(<span class="string">&quot;myflle.txt&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果文件名中包含反斜杠符号，就要记住在每个<strong>反斜杠</strong>之前再加一个额外的反斜杠：“ c:\mydirectory\myfile.txt” </p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JAVA核心技术(卷1)》读书笔记04-控制流程</title>
      <link href="/post/8318455c.html"/>
      <url>/post/8318455c.html</url>
      
        <content type="html"><![CDATA[<p>与任何程序设计语言一样，Java 使用条件语句和循环结构确定控制流程。</p><h2 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h2><h4 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h4><p>块（即复合语句）是指由一对大括号括起来的若干条简单的Java 语句。块确定了变量的作用域。一个块可以嵌套在另一个块中。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>但是 ，不能在嵌套的两个块中声明同名的变量。</p><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p>在Java 中，条件语句的格式为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) statement</span><br></pre></td></tr></table></figure><p>这里的条件<strong>必须</strong>用括号括起来。</p><p>与绝大多数程序设计语言一样，Java 常常希望在某个条件为真时执行多条语句。在这种情况下，应该使用块语句(block statement), 形式为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    statement1</span><br><span class="line">    statement2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (yourSales &gt;= target)&#123;</span><br><span class="line">    performance = <span class="string">&quot;Satisfactory&quot;</span></span><br><span class="line">    bonus = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当yourSales 大于或等于target时，将执行括号中的所有语句。</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200423214741.png" alt=""></p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>当条件为true 时，while 循环执行一条语句（也可以是一个语句块）。一般格式为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(condition) statement</span><br></pre></td></tr></table></figure><p>如果开始循环条件的值就为false，则while循环体一次也不执行。</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200423222919.png" alt=""></p><h3 id="确定循环"><a href="#确定循环" class="headerlink" title="确定循环"></a>确定循环</h3><p>for 循环语句是支持迭代的一种通用结构，利用每次迭代之后更新的计数器或类似的变量来控制迭代次数。</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200427204022.png" alt=""></p><p>for 语句的第1 部分通常用于对计数器初始化；第2 部分给出每次新一轮循环执行前要检测的循环条件；第3 部分指示如何更新计数器。</p><h3 id="多重选择：switch-语句"><a href="#多重选择：switch-语句" class="headerlink" title="多重选择：switch 语句"></a>多重选择：switch 语句</h3><p>在处理多个选项时，使用if/else 结构显得有些笨拙。Java 有一个与C/C++ 完全一样的switch 语句。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(choice)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch 语句将从与选项值相匹配的case 标签处开始执行直到遇到break 语句，或者执行到switchi吾句的结束处为止。如果没有相匹配的case 标签，而有default 子句，就执行这个子句。</p><p>case 标签可以是：</p><ul><li>类型为char、byte 、short 或int 的常量表达式。</li><li>枚举常量。</li><li>从Java SE 7 开始，case 标签还可以是字符串字面量。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JAVA核心技术(卷1)》读书笔记02-运算符</title>
      <link href="/post/8589a366.html"/>
      <url>/post/8589a366.html</url>
      
        <content type="html"><![CDATA[<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="数学函数与常量"><a href="#数学函数与常量" class="headerlink" title="数学函数与常量"></a>数学函数与常量</h3><p>在Math 类中，包含了各种各样的数学函数。在编写不同类别的程序时，可能需要的函数也不同。</p><p>可以用<code>sqrt</code>方法计算一个数值的平方根</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo351</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">y</span> <span class="operator">=</span> Math.sqrt(x);</span><br><span class="line">        System.out.println(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数值类型之间的转换"><a href="#数值类型之间的转换" class="headerlink" title="数值类型之间的转换"></a>数值类型之间的转换</h3><p>我们经常需要将一种数值类型转换为另一种数值类型。</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200329123321.png" alt=""></p><p>在图中有6 个<strong>实心</strong>箭头，表示无信息丢失的转换；有3 个虚箭头，表示可能有精度<br>损失的转换。例如，123 456 789 是一个大整数，它所包含的位数比float 类型所能够表达的位数多。当将这个整型数值转换为float 类型时，将会得到同样大小的结果，但却失去了一定的精度。</p><p>当使用上面两个数值进行二元操作时（例如n + f ，n 是整数，f 是浮点数)，先要将两个操作数转换为同一种类型，然后再进行计算。</p><ul><li>如果两个操作数中有一个是double 类型，另一个操作数就会转换为double 类型。</li><li>否则，如果其中一个操作数是float 类型，另一个操作数将会转换为float 类型。</li><li>否则，如果其中一个操作数是long 类型，另一个操作数将会转换为long 类型。</li><li>否则，两个操作数都将被转换为int 类型。</li></ul><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>在必要的时候，int 类型的值将会自动地转换为double 类型。但另一方面，有时也需要将double 转换成int 。在Java 中，允许进行这种数值之间的类型转换。当然，有可能会丢失一些信息。在这种情况下，需要通过<strong>强制类型转换</strong>（cast) 实现这个操作。强制类型转换的语法格式是在圆括号中给出想要转换的目标类型，后面紧跟待转换的变量名。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">9.997</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">nx</span> <span class="operator">=</span> (<span class="type">int</span>)x;</span><br></pre></td></tr></table></figure><p>这样，变量nx 的值为9。强制类型转换通过截断小数部分将浮点值转换为整型。</p><h3 id="自增与自减运算符"><a href="#自增与自减运算符" class="headerlink" title="自增与自减运算符"></a>自增与自减运算符</h3><p>在Java 中，借鉴了C 和C++的做法，也提供了自增、自减运算符：n++ 将变量n 的当前值加1,n—则将n 的值减1。例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">n++;</span><br></pre></td></tr></table></figure><h3 id="关系和boolean运算符"><a href="#关系和boolean运算符" class="headerlink" title="关系和boolean运算符"></a>关系和boolean运算符</h3><p>Java 沿用了C++ 的做法，使用&amp;&amp; 表示逻辑“ 与”运算符，使用丨|表示逻辑“ 或” 运算符。从!=运算符可以想到，感叹号！就是逻辑非运算符。&amp;&amp; 和丨|运算符是按照“ 短路”方式来求值的：如果第一个操作数已经能够确定表达式的值，<strong>第二个操作数就不必计算了</strong>。如果用&amp;&amp; 运算符合并两个表达式，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expression1 &amp;&amp; expression2</span><br></pre></td></tr></table></figure><p>已经计算得到第一个表达式的真值为false, 那么结果就不可能为true 。因此，第二个表达式就不必计算了。</p><p>Java 支持三元操作符？：，这个操作符有时很有用。如果条件为true, 下面的表达式</p><p><code>condition ? expression1 : expression2</code></p><p>就为第一个表达式的值，否则计算为第二个表达式的值。例如，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x&lt; y? x : y</span><br></pre></td></tr></table></figure><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><p>有时候，变量的取值只在一个有限的集合内。例如：销售的服装或比萨饼只有小、中、大和超大这四种尺寸。当然，可以将这些尺寸分别编码为1、2、3、4 或S、M<br>、L、X。但这样存在着一定的隐患。在变量中很可能保存的是一个错误的值（如0 或m) 。针对这种情况，可以自定义枚举类型。枚举类型包括有限个命名的值。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Size</span> &#123;SMALL, MEDIUM, LARGE, EXTRA_LARGE&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue学习笔记05-vuex入门</title>
      <link href="/post/b76dd40b.html"/>
      <url>/post/b76dd40b.html</url>
      
        <content type="html"><![CDATA[<h2 id="Vuex入门"><a href="#Vuex入门" class="headerlink" title="Vuex入门"></a>Vuex入门</h2><h3 id="Vuex概述"><a href="#Vuex概述" class="headerlink" title="Vuex概述"></a>Vuex概述</h3><p>Vuex是实现组件全局状态（数据）管理的一种机制，可以方便的实现组件之间的数据共享</p><p>使用Vuex管理数据的好处：</p><ul><li>能够在vuex中集中管理共享的数据，便于开发和后期进行维护</li><li>能够高效的实现组件之间的数据共享，提高开发效率</li><li>存储在vuex中的数据是响应式的，当数据发生改变时，页面中的数据也会同步更新</li></ul><h3 id="Vuex中的核心特性"><a href="#Vuex中的核心特性" class="headerlink" title="Vuex中的核心特性"></a>Vuex中的核心特性</h3><h4 id="state"><a href="#state" class="headerlink" title="state"></a>state</h4><p>State提供唯一的公共数据源，所有共享的数据都要统一放到Store中的State中存储</p><p>在组件中访问State的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 方式一</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">xxx</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 方式二</span><br><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="attr">computed</span>:&#123; ...<span class="title function_">mapState</span>([<span class="string">&#x27;全局数据名称&#x27;</span>]) &#125; <span class="comment">//数据映射为计算属性</span></span><br></pre></td></tr></table></figure><h4 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h4><p>Mutation用于修改变更$store中的数据(<strong>注意不要直接在组件中操作store中的数据,而是通过Mutation操作数据</strong>)</p><p>打开store.js文件，在mutations中添加代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params">state,step</span>)&#123;</span><br><span class="line">      <span class="comment">//第一个形参永远都是state也就是$state对象</span></span><br><span class="line">      <span class="comment">//第二个形参是调用add时传递的参数</span></span><br><span class="line">      state.<span class="property">count</span>+=step;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Mutation的使用方式一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;Add&quot;</span>&gt;+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">  <span class="title class_">Add</span>()&#123;</span><br><span class="line">    <span class="comment">//使用commit函数调用mutations中的对应函数，</span></span><br><span class="line">    <span class="comment">//第一个参数就是我们要调用的mutations中的函数名</span></span><br><span class="line">    <span class="comment">//第二个参数就是传递给add函数的参数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;add&#x27;</span>,<span class="number">10</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mutation的使用方式二：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState,mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">      <span class="comment">//获得mapMutations映射的sub函数</span></span><br><span class="line">      ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;sub&#x27;</span>]),</span><br><span class="line">      <span class="comment">//当点击按钮时触发Sub函数</span></span><br><span class="line">      <span class="title class_">Sub</span>()&#123;</span><br><span class="line">          <span class="comment">//调用sub函数完成对数据的操作</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">sub</span>(<span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>:&#123;</span><br><span class="line">      ...<span class="title function_">mapState</span>([<span class="string">&#x27;count&#x27;</span>])</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><p>在mutations中不能编写异步的代码，会导致vue调试器的显示出错。<br>在vuex中我们可以使用Action来执行异步操作。</p><p>打开store.js文件，修改Action，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">  <span class="title function_">addAsync</span>(<span class="params">context,step</span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;add&#x27;</span>,step);</span><br><span class="line">    &#125;,<span class="number">2000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Action的使用方式一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;AddAsync&quot;</span>&gt;...+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">  <span class="title class_">AddAsync</span>()&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;addAsync&#x27;</span>,<span class="number">5</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Action的使用方式二：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState,mapMutations,mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">      <span class="comment">//获得mapMutations映射的sub函数</span></span><br><span class="line">      ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;sub&#x27;</span>]),</span><br><span class="line">      <span class="comment">//当点击按钮时触发Sub函数</span></span><br><span class="line">      <span class="title class_">Sub</span>()&#123;</span><br><span class="line">          <span class="comment">//调用sub函数完成对数据的操作</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">sub</span>(<span class="number">10</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//获得mapActions映射的addAsync函数</span></span><br><span class="line">      ...<span class="title function_">mapActions</span>([<span class="string">&#x27;subAsync&#x27;</span>]),</span><br><span class="line">      <span class="title function_">asyncSub</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">subAsync</span>(<span class="number">5</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>:&#123;</span><br><span class="line">      ...<span class="title function_">mapState</span>([<span class="string">&#x27;count&#x27;</span>])</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h4><p>Getter用于对Store中的数据进行加工处理形成新的数据<br>它只会包装Store中保存的数据，并不会修改Store中保存的数据，当Store中的数据发生变化时，Getter生成的内容也会随之变化</p><p>打开store.js文件，添加getters，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  .......</span><br><span class="line">  <span class="attr">getters</span>:&#123;</span><br><span class="line">    <span class="comment">//添加了一个showNum的属性</span></span><br><span class="line">    showNum : <span class="function"><span class="params">state</span> =&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;最新的count值为：&#x27;</span>+state.<span class="property">count</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Getter的使用方式一:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;$store.<span class="property">getters</span>.<span class="property">showNum</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>Getter的使用方式二:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">  ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;showNum&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JAVA核心技术(卷1)》读书笔记01-数据类型</title>
      <link href="/post/12172c7b.html"/>
      <url>/post/12172c7b.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>在java中一共有8种数据类型，其中有4 种整型、2 种浮点类型、1 种用于表示Unicode 编码的字符单元的字符类型char 和1种用于表示真值的boolean类型。</p><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p>整型用于表示没有小数部分的数值，它允许是负数。</p><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">存储需求</th><th style="text-align:center">取值范围</th></tr></thead><tbody><tr><td style="text-align:center">int</td><td style="text-align:center">4字节</td><td style="text-align:center">-2 147 483648~2 147 483 647( 正好超过20 亿)</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2字节</td><td style="text-align:center">-32768~32767</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">8字节</td><td style="text-align:center">-9 223 372 036 854 775808~9 223 372 036 854 775 807</td></tr><tr><td style="text-align:center">byte</td><td style="text-align:center">1字节</td><td style="text-align:center">-128~127</td></tr></tbody></table></div><p>长整型数值有一个后缀<code>L</code>或<code>l</code>（如40000000L）。十六进制数值有一个前缀Ox 或0X ( 如OxCAFEL ）八进制有一个前缀0, 例如，010 对应八进制中的8 。很显然，八进制表示法比较容易混淆，所以建议最好不要使用八进制常数。</p><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><p>浮点类型用于表示有小数部分的数值</p><div class="table-container"><table><thead><tr><th>类型</th><th>存储需求</th><th>取值范围</th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>大约± 3.402 823 47E+38F (有效位数为6 ~ 7 位）</td></tr><tr><td>double</td><td>8字节</td><td>大约± 1.797 693 134 862 315 70E+308 (有效位数为15 位&gt;</td></tr></tbody></table></div><p>double 表示这种类型的数值精度是float 类型的<code>两倍</code>（有人称之为双精度数值)，绝大部分应用程序都采用double 类型在很多情况下，float 类型的精度很难满足需求，实际上，只有很少的情况适合使用float 类型，例如，需要单精度数据的库，或者需要存储大量数据。</p><p>float 类型的数值有一个后缀<code>F</code> 或<code>f</code> ( 例如，3.14F)。没有后缀F 的浮点数值（如3.14 ) <code>默认为double</code> 类型。当然，也可以在浮点数值后面添加后缀D 或d ( 例如，3.14D)。</p><h3 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h3><p>char 类型的字面量值要用<code>单引号</code>括起来。例如：W 是编码值为65 所对应的字符常量。它与”A” 不同，”A”是包含一个字符A 的字符串, char 类型的值可以表示为十六进制值，其范围从\u0000 到\Uffff。</p><h3 id="boolean-类型"><a href="#boolean-类型" class="headerlink" title="boolean 类型"></a>boolean 类型</h3><p>boolean (布尔）类型有两个值：false 和true, 用来判定逻辑条件整型值和布尔值之间不能进行相互转换。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>在Java 中，每个变量都有一个类型（type) 。在声明变量时，变量的类型位于变量名之前。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> salary;</span><br><span class="line"><span class="type">int</span> vacationDays;</span><br><span class="line"><span class="type">long</span> earthPopulation;</span><br><span class="line"><span class="type">boolean</span> done;</span><br></pre></td></tr></table></figure><p>可以看到，每个声明以分号结束。由于声明是一条完整的Java语句，所以<code>必须</code>以分号结束。</p><h3 id="变量初始化"><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h3><p>声明一个变量之后，必须用赋值语句对变量进行显式初始化，千万不要使用未初始化的变量。要想对一个已经声明过的变量进行赋值，就需要将变量名放在等号（=) 左侧，相应取值的Java 表达式放在等号的右侧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> vacationDays;</span><br><span class="line">vacationDays = <span class="number">12</span>;</span><br></pre></td></tr></table></figure><p>也可以将变量的声明和初始化放在同一行中。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">vacationDays</span> <span class="operator">=</span> <span class="number">12</span>;</span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>在Java 中，利用关键字final 指示常量。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Constants1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">double</span> <span class="variable">CM_PER_INCH</span> <span class="operator">=</span> <span class="number">2.54</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">paperWidth</span> <span class="operator">=</span> <span class="number">8.5</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">paperHeight</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Paper size in centimeters: &quot;</span>+paperWidth * CM_PER_INCH + <span class="string">&quot;by &quot;</span> + paperHeight * CM_PER_INCH);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键字final 表示这个变量只能被赋值一次。一旦被赋值之后，就<code>不能够再更改了</code>。习惯上,常量名使用<code>全大写</code>。</p><p>在Java 中，经常希望某个常量可以在一个类中的多个方法中使用，通常将这些常量称为类常量。可以使用关键字static fina 丨设置一个类常量。下面是使用类常量的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Constants2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">CM_PER_INCH</span> <span class="operator">=</span> <span class="number">2.54</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">paperWidth</span> <span class="operator">=</span> <span class="number">8.5</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">paperHeight</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Paper size in centimeters: &quot;</span>+paperWidth * CM_PER_INCH + <span class="string">&quot;by &quot;</span> + paperHeight * CM_PER_INCH);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意，类常量的定义位于main方法的<code>外部</code>。因此，在同一个类的其他方法中也可以使用这个常量。而且，如果一个常量被声明为<code>public</code>，那么其他类的方法也可以使用这个常量。在这个示例中，Constants2.CM_PER-INCH 就是这样一个常量。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue学习笔记04-vue组件化开发</title>
      <link href="/post/1d42d00b.html"/>
      <url>/post/1d42d00b.html</url>
      
        <content type="html"><![CDATA[<h2 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h2><h3 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h3><ul><li>Vue.component(‘组件名称’, { })     第1个参数是标签名称，第2个参数是一个选项对象</li><li><strong>全局组件</strong>注册后，任何<strong>vue实例</strong>都可以用</li></ul><h4 id="组件基础用"><a href="#组件基础用" class="headerlink" title="组件基础用"></a>组件基础用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 2、 组件使用 组件名称 是以HTML标签的形式使用  --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   注册组件 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1、 my-component 就是组件中自定义的标签名</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;A custom component!&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#example&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="组件注意事项"><a href="#组件注意事项" class="headerlink" title="组件注意事项"></a>组件注意事项</h4><ul><li>组件参数的data值必须是函数同时这个函数要求返回一个对象 </li><li>组件模板必须是单个根元素</li><li>组件模板的内容可以是模板字符串</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">4、  组件可以重复使用多次 </span></span><br><span class="line"><span class="comment">      因为data中返回的是一个对象所以每个组件中的数据是私有的</span></span><br><span class="line"><span class="comment">  即每个实例可以维护一份被返回对象的独立的拷贝   </span></span><br><span class="line"><span class="comment">--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 8、必须使用短横线的方式使用组件 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">hello-world</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-world</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//5  如果使用驼峰式命名组件，那么在使用组件的时候，只能在字符串模板中用驼峰的方式使用组件，</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 7、但是在普通的标签模板中，必须使用短横线的方式使用组件</span></span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;HelloWorld&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg</span>: <span class="string">&#x27;HelloWorld&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;button-counter&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1、组件参数的data值必须是函数 </span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 同时这个函数要求返回一个对象  </span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//  2、组件模板必须是单个根元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//  3、组件模板的内容可以是模板字符串  </span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;button @click=&quot;handle&quot;&gt;点击了&#123;&#123;count&#125;&#125;次&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;button&gt;测试123&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">#  6 在字符串模板中可以使用驼峰的方式使用组件</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">   &lt;HelloWorld&gt;&lt;/HelloWorld&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      `</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">handle</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">count</span> += <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h3><ul><li>只能在当前注册它的vue实例中使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义组件的模板</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> <span class="title class_">Child</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;A custom component!&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//局部注册组件  </span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &lt;my-component&gt; 将只在父模板可用  一定要在实例上注册了才能在html文件中使用</span></span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;my-component&#x27;</span>: <span class="title class_">Child</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue组件之间传值"><a href="#Vue组件之间传值" class="headerlink" title="Vue组件之间传值"></a>Vue组件之间传值</h2><h3 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h3><ul><li>父组件发送的形式是以属性的形式绑定值到子组件身上。</li><li>然后子组件用属性props接收</li><li>在props中使用驼峰形式，模板中需要使用短横线的形式字符串形式的模板中没有这个限制</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;pmsg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1、menu-item  在 APP中嵌套着 故 menu-item   为  子组件      --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给子组件传入一个静态的值 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">menu-item</span> <span class="attr">title</span>=<span class="string">&#x27;来自父组件的值&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 2、 需要动态的数据的时候 需要属性绑定的形式设置 此时 ptitle  来自父组件data 中的数据 . </span></span><br><span class="line"><span class="comment">  传的值可以是数字、对象、数组等等</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">menu-item</span> <span class="attr">:title</span>=<span class="string">&#x27;ptitle&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;hello&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;menu-item&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">// 3、 子组件用属性props接收父组件传递过来的数据  </span></span></span><br><span class="line"><span class="language-javascript">     <span class="attr">props</span>: [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;content&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">msg</span>: <span class="string">&#x27;子组件本身的数据&#x27;</span></span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">     &#125;,</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&#123;&#123;msg + &quot;----&quot; + title + &quot;-----&quot; + content&#125;&#125;&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">   &#125;);</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">pmsg</span>: <span class="string">&#x27;父组件中内容&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">ptitle</span>: <span class="string">&#x27;动态绑定属性&#x27;</span></span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;);</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h3><ul><li>子组件用<code>$emit()</code>触发事件</li><li><code>$emit()</code>  第一个参数为 自定义的事件名称     第二个参数为需要传递的数据</li><li>父组件用v-on 监听子组件的事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&#x27;&#123;fontSize: fontSize + &quot;px&quot;&#125;&#x27;</span>&gt;</span>&#123;&#123;pmsg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 2 父组件用v-on 监听子组件的事件</span></span><br><span class="line"><span class="comment">这里 enlarge-text  是从 $emit 中的第一个参数对应   handle 为对应的事件处理函数</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">menu-item</span> <span class="attr">:parr</span>=<span class="string">&#x27;parr&#x27;</span> @<span class="attr">enlarge-text</span>=<span class="string">&#x27;handle($event)&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    /*</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      子组件向父组件传值-携带参数</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    */</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.component(&#x27;menu-item&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      props: [&#x27;parr&#x27;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">&#x27;index&#x27;</span> <span class="attr">v-for</span>=<span class="string">&#x27;(item,index) in parr&#x27;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">###  1、子组件用$emit()触发事件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">### 第一个参数为 自定义的事件名称   第二个参数为需要传递的数据  </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;$emit(&quot;enlarge-text&quot;, 5)&#x27;</span>&gt;</span>扩大父组件中字体大小<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;$emit(&quot;enlarge-text&quot;, 10)&#x27;</span>&gt;</span>扩大父组件中字体大小<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    var vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        pmsg: &#x27;父组件中内容&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        parr: [&#x27;apple&#x27;,&#x27;orange&#x27;,&#x27;banana&#x27;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        fontSize: 10</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        handle: function(val)&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          // 扩大字体大小</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          this.fontSize += val;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="兄弟之间的传递"><a href="#兄弟之间的传递" class="headerlink" title="兄弟之间的传递"></a>兄弟之间的传递</h3><ul><li>兄弟之间传递数据需要借助于事件中心，通过事件中心传递数据 </li><li>提供事件中心    var hub = new Vue()</li><li>传递数据方，通过一个事件触发hub.$emit(方法名，传递的数据)</li><li>接收数据方，通过mounted(){} 钩子中  触发hub.$on()方法名</li><li>销毁事件 通过hub.$off()方法名销毁之后无法进行传递数据</li></ul><h2 id="组件插槽"><a href="#组件插槽" class="headerlink" title="组件插槽"></a>组件插槽</h2><ul><li>组件的最大特性就是复用性，而用好插槽能大大提高组件的可复用能力</li></ul><h3 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里的所有组件标签中嵌套的内容会替换掉slot  如果不传值 则使用 slot 中的默认值  --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">alert-box</span>&gt;</span>有bug发生<span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alert-box</span>&gt;</span>有一个警告<span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alert-box</span>&gt;</span><span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    /*</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      组件插槽：父组件向子组件传递内容</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    */</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.component(&#x27;alert-box&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">strong</span>&gt;</span>ERROR:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"># 当组件渲染的时候，这个 <span class="tag">&lt;<span class="name">slot</span>&gt;</span> 元素将会被替换为“组件标签中嵌套的内容”。</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"># 插槽内可以包含任何模板代码，包括 HTML</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">slot</span>&gt;</span>默认内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    var vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><ul><li>具有名字的插槽</li><li>使用 <slot> 中的 “name” 属性绑定元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 2、 通过slot属性来指定, 这个slot的值必须和下面slot组件得name值对应上</span></span><br><span class="line"><span class="comment">如果没有匹配到 则放到匿名的插槽中   --&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span>标题信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span>底部信息信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 注意点：template临时的包裹标签最终不会渲染到页面上     --&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>标题信息1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>标题信息2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>底部信息信息1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>底部信息信息2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    /*</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      具名插槽</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    */</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.component(&#x27;base-layout&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">###1、 使用 <span class="tag">&lt;<span class="name">slot</span>&gt;</span> 中的 &quot;name&quot; 属性绑定元素 指定当前插槽的名字</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">###  注意点： </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">###  具名插槽的渲染顺序，完全取决于模板，而不是取决于父组件中元素的顺序</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    var vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><ul><li>父组件对子组件加工处理</li><li>既可以复用子组件的slot，又可以使slot内容不一致</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker学习笔记03-docker compose的安装以及基本使用</title>
      <link href="/post/4e5c17ed.html"/>
      <url>/post/4e5c17ed.html</url>
      
        <content type="html"><![CDATA[<h1 id="docker-compose-的使用"><a href="#docker-compose-的使用" class="headerlink" title="docker compose 的使用"></a>docker compose 的使用</h1><p>在微服务时代，使用微服务架构的应用系统一般包含若干个微服务，每个微服务一般都会部署多个实例。如果每个微服务都要手动启停，那么效率之低、维护量之大可想而知。本节课将讨论如何使用 Docker Compose来轻松、高效地管理容器。</p><h2 id="docker-compose的安装"><a href="#docker-compose的安装" class="headerlink" title="docker-compose的安装"></a>docker-compose的安装</h2><p> 通过curl的方式安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.25.3/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p> 也可以自行到github上面下载安装</p><p>``</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200207152050.png" alt=""></p><p> 给予权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>查看是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose version</span><br></pre></td></tr></table></figure><h2 id="docker-compose-管理容器的结构"><a href="#docker-compose-管理容器的结构" class="headerlink" title="docker-compose 管理容器的结构"></a>docker-compose 管理容器的结构</h2><p>docker-compose将所管理的容器分为3层：</p><ul><li>工程层</li><li>服务层</li><li>容器层</li></ul><h3 id="工程层"><a href="#工程层" class="headerlink" title="工程层"></a>工程层</h3><p>docker-compose运行目录下的所有文件（ docker-compose.yml、 extends文件或环境变量文件等）组成一个工程（默认为 docker-compose.yml所在目录的目录名称）</p><h3 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h3><p>一个工程可包含多个服务，每个服务中定义了容器运行的镜像、参数和依赖，一般一个Dockerfile文件所在的文件夹，为一个服务</p><h3 id="容器层"><a href="#容器层" class="headerlink" title="容器层"></a>容器层</h3><p>一个服务可包括多个容器实例</p><h2 id="docker-compose常用命令"><a href="#docker-compose常用命令" class="headerlink" title="docker-compose常用命令"></a>docker-compose常用命令</h2><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><p>指定镜像名称或者镜像id，如果该镜像在本地不存在，Compose会尝试pull下来。</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image: java</span><br></pre></td></tr></table></figure><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><p>指定Dockerfile文件的路径。可以是一个路径，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build: ./dir</span><br></pre></td></tr></table></figure><p>也可以是一个对象，用以指定Dockerfile和参数，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build:   context: ./dir   dockerfile: Dockerfile-alternate   args:     buildno: 1</span><br></pre></td></tr></table></figure><h3 id="command"><a href="#command" class="headerlink" title="command"></a>command</h3><p>覆盖容器启动后默认执行的命令</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command: bundle exec thin -p 3000</span><br></pre></td></tr></table></figure><p>或:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command: [bundle, exec, thin, -p, 3000]</span><br></pre></td></tr></table></figure><h3 id="links"><a href="#links" class="headerlink" title="links"></a>links</h3><p>链接到其他服务中的容器。可以指定服务名称和链接的别名使用SERVICE:ALIAS 的形式，或者只指定服务名称，</p><p>示例:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web:   links:    - db    - db:database    - redis</span><br></pre></td></tr></table></figure><h3 id="external-links"><a href="#external-links" class="headerlink" title="external_links"></a>external_links</h3><p>表示链接到docker-compose.yml外部的容器，甚至并非Compose管理的容器，特别是对于那些提供共享容器或共同服务。格式跟links类似</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">external_links:  - redis_1  - project_db_1:mysql  - project_db_1:postgresql</span><br></pre></td></tr></table></figure><h3 id="ports"><a href="#ports" class="headerlink" title="ports"></a>ports</h3><p>暴露端口信息。使用宿主端口:容器端口的格式，或者仅仅指定容器的端口（此时宿主机将会随机指定端口），类似于docker run -p </p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ports:  - &quot;3000&quot;  - &quot;3000-3005&quot;  - &quot;8000:8000&quot;  - &quot;9090-9091:8080-8081&quot;  - &quot;49100:22&quot;  - &quot;127.0.0.1:8001:8001&quot;  - &quot;127.0.0.1:5000-5010:5000-5010&quot;</span><br></pre></td></tr></table></figure><h3 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h3><p>从文件中获取环境变量，可以为单独的文件路径或列表。如果通过 docker-compose -f FILE 指定了模板文件，则 env_file 中路径会基于模板文件路径。如果有变量名称与 environment 指令冲突，则以envirment 为准</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">env_file: .env  </span><br><span class="line">env_file:   - ./common.env   - ./apps/web.env   - /opt/secrets.env</span><br></pre></td></tr></table></figure><p>如果感兴趣的，可以参考docker-compose.yml文件官方文档：<a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker学习笔记02-docker镜像私服的安装以及基本使用</title>
      <link href="/post/bb43724c.html"/>
      <url>/post/bb43724c.html</url>
      
        <content type="html"><![CDATA[<h1 id="用Harbor搭建docker镜像私服"><a href="#用Harbor搭建docker镜像私服" class="headerlink" title="用Harbor搭建docker镜像私服"></a>用Harbor搭建docker镜像私服</h1><p>我们在拉取 docker 镜像的时候总会遇到网络的问题，而导致拉取失败的，而且在实际开发中，公司有的服务器只能访问内网的，这时候就需要我们的 docker 镜像私服—Harbor</p><h2 id="什么是harbor？"><a href="#什么是harbor？" class="headerlink" title="什么是harbor？"></a>什么是harbor？</h2><p>Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，可以用来构建企业内部的Docker镜像仓库</p><h2 id="安装harbor"><a href="#安装harbor" class="headerlink" title="安装harbor"></a>安装harbor</h2><p>在安装harbor之前需要先安装docker-compose，安装教程可以看我上一篇笔记</p><p><a href="https://www.yuweizhan.cn/articles/2020/02/07/1581059387404.html">docker学习笔记03-docker compose的使用</a></p><ul><li><p>在GitHub上面下载离线安装包，并且解压到本地</p><p><a href="https://github.com/goharbor/harbor/releases">https://github.com/goharbor/harbor/releases</a></p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200207225018.png" alt=""></p></li></ul><ul><li>修改harbor的配置文件</li></ul>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd harbor</span><br><span class="line">vim harbor.yml</span><br></pre></td></tr></table></figure><p>  在这个配置文件中你需要修改hostname，注意<strong>不能</strong>用0.0.0.0而是用对应的IP地址</p><p>  <img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200207225554.png" alt=""></p><ul><li><p>执行安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh install.sh</span><br></pre></td></tr></table></figure></li><li><p>登录harbor</p></li></ul><p>  <img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200207225838.png" alt=""><br>  初始的账号是amin 密码是Harbor12345</p><h2 id="docker接入harbor"><a href="#docker接入harbor" class="headerlink" title="docker接入harbor"></a>docker接入harbor</h2><ul><li><p>修改daemon.json文件，在里面添加harbor的地址</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200208124937.png" alt=""></p></li><li><p>重启docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li></ul><h2 id="上传镜像到harbor"><a href="#上传镜像到harbor" class="headerlink" title="上传镜像到harbor"></a>上传镜像到harbor</h2><ul><li><p>首先我们需要在harbor中新建一个公开的项目</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200208231458.png" alt=""></p></li><li><p>标记镜像</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200208233120.png" alt=""></p><p>如图所示，需要在容器上打开指定格式的标签,这里我们以nginx为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag nginx:latest 192.168.111.100/pub/nginx:0.0.1</span><br></pre></td></tr></table></figure></li><li><p>上传至公开库</p><p>这里可能需要先登录一下harbor</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login 192.168.111.100</span><br></pre></td></tr></table></figure><p>上传</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.111.100/pub/nginx:0.0.1</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200208232308.png" alt=""></p><p>在harbor上面我们也能看到刚上传的镜像</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200208232348.png" alt=""></p></li></ul><h2 id="harbor-拉取镜像"><a href="#harbor-拉取镜像" class="headerlink" title="harbor 拉取镜像"></a>harbor 拉取镜像</h2><p>把对应的命令复制下来</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200208232631.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 192.168.111.100/pub/nginx:0.0.1</span><br></pre></td></tr></table></figure><p>harbor 还提供私有的项目，其用法也是类似的。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker学习笔记01-docker的安装以及基本使用</title>
      <link href="/post/db693fc9.html"/>
      <url>/post/db693fc9.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装最新Docker"><a href="#安装最新Docker" class="headerlink" title="安装最新Docker"></a>安装最新Docker</h1><h2 id="安装yum-utils"><a href="#安装yum-utils" class="headerlink" title="安装yum-utils"></a>安装yum-utils</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure><h2 id="安装docker官方源"><a href="#安装docker官方源" class="headerlink" title="安装docker官方源"></a>安装docker官方源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h2 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><h2 id="安装docker-ce"><a href="#安装docker-ce" class="headerlink" title="安装docker-ce"></a>安装docker-ce</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce</span><br></pre></td></tr></table></figure><h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h2 id="设置docker开机启动"><a href="#设置docker开机启动" class="headerlink" title="设置docker开机启动"></a>设置docker开机启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><h2 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200131142542.png" alt=""></p><h2 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h2><p>因为docker的仓库在国外，所以下载镜像的时候会有点慢，这里改用国内网易提供的源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>在里面加入以下代码<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;[&quot;http://hub-mirror.c.163.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重载此配置文件以及重启docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h1 id="docker镜像操作"><a href="#docker镜像操作" class="headerlink" title="docker镜像操作"></a>docker镜像操作</h1><p>docker镜像操作是docker最重要的一个环节，这里我们以nginx镜像的下载，查看，删除为例子。</p><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p><code>docker pull name:tag</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx:1.17</span><br></pre></td></tr></table></figure><h2 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200131150612.png" alt=""></p><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><p><code>docker rmi imageId</code></p><h1 id="docker端口操作"><a href="#docker端口操作" class="headerlink" title="docker端口操作"></a>docker端口操作</h1><h2 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h2><p>安装一个nginx，并且映射到8080端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name test-nginx -d -p 8080:80 nginx</span><br></pre></td></tr></table></figure><p><code>-d</code> 后台执行</p><p><code>-p</code> 端口映射</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200131171229.png" alt=""></p><h1 id="挂载操作"><a href="#挂载操作" class="headerlink" title="挂载操作"></a>挂载操作</h1><p>有的时候我们需要把应用的某些目录挂载到本地目录，比如log日志，这时候便需要把容器的目录挂载出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name test-nginx2 -d -p 8081:80 -v /data:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure><p>在<code>-v /data:/usr/share/nginx/html nginx</code>中</p><p><code>/data</code> 是宿主机的目录</p><p><code>/usr/share/nginx/html</code> 是容器的目录</p><p>因为<code>/data</code>目录是没有文件的，所有会出现：</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200131172249.png" alt=""></p><p>我们在这个目录中创建一个<code>index.html</code>，并且在里面写入<code>hello docker</code>,然后再访问8081这个端口</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200131172432.png" alt=""></p><h1 id="日志操作"><a href="#日志操作" class="headerlink" title="日志操作"></a>日志操作</h1><p>查看实时日志(有点类似 tail -f xxx)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">docker logs -f names</span></span><br><span class="line">docker logs -f test-nginx2</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200131173353.png" alt=""></p><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">docker logs -f 容器ID</span></span><br><span class="line">docker logs -f 0098d3585b78</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20200131173539.png" alt=""></p><h1 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h1><p>docker还可以进入到容器当中，进行一些shell的操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it test-nginx2 sh</span><br></pre></td></tr></table></figure><p>其中</p><p><code>-i</code> 标准输入</p><p><code>-t</code> 终端</p><p><code>exit</code> 退出容器</p><h2 id="用busybox工具进行操作"><a href="#用busybox工具进行操作" class="headerlink" title="用busybox工具进行操作"></a>用busybox工具进行操作</h2><p>如果只是用上面的命令进入到容器中，会有很多shell命令不支持，这里我们用busybox工具，它提供了很多我们常用的shell命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  -it --name test-busybox --link test-nginx2 busybox sh</span><br></pre></td></tr></table></figure><h2 id="查看容器的详细信息"><a href="#查看容器的详细信息" class="headerlink" title="查看容器的详细信息"></a>查看容器的详细信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect test-nginx2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue学习笔记03-vue模板语法</title>
      <link href="/post/1964bb84.html"/>
      <url>/post/1964bb84.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Vue是一个渐进式框架，它提供了一系列的模板语法用于数据渲染。</p><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><ul><li>v-bind 指令被用来响应地更新 HTML 属性</li><li>v-bind:href    可以缩写为    :href;</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定一个属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imageSrc&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imageSrc&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="绑定对象"><a href="#绑定对象" class="headerlink" title="绑定对象"></a>绑定对象</h3><ul><li>我们可以给v-bind:class 一个对象，以动态地切换class。</li><li>注意：v-bind:class指令可以与普通的class特性共存</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">1、 v-bind 中支持绑定一个对象 </span><br><span class="line">如果绑定的是一个对象 则 键为 对应的类名  值 为对应data中的数据 </span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">HTML最终渲染为 &lt;ul class=&quot;box textColor textSize&quot;&gt;&lt;/ul&gt;</span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">textColor，textSize  对应的渲染到页面上的CSS类名</span></span><br><span class="line"><span class="comment">isColor，isSize  对应vue data中的数据  如果为true 则对应的类名 渲染到页面上 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">当 isColor 和 isSize 变化时，class列表将相应的更新，</span></span><br><span class="line"><span class="comment">例如，将isSize改成false，</span></span><br><span class="line"><span class="comment">class列表将变为 &lt;ul class=&quot;box textColor&quot;&gt;&lt;/ul&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;textColor:isColor, textSize:isSize&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>学习Vue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>学习Node<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>学习React<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123;color:activeColor,fontSize:activeSize&#125;&quot;</span>&gt;</span>对象语法<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sript</span>&gt;</span></span><br><span class="line">var vm= new Vue(&#123;</span><br><span class="line">    el:&#x27;.box&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        isColor:true,</span><br><span class="line">        isSize:true，</span><br><span class="line">    activeColor:&quot;red&quot;,</span><br><span class="line">        activeSize:&quot;25px&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">sript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>:<span class="number">1px</span> dashed <span class="number">#f0f</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.textColor</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>:<span class="number">#f00</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>:<span class="number">#eef</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.textSize</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-weight</span>:bold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="绑定class"><a href="#绑定class" class="headerlink" title="绑定class"></a>绑定class</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">2、  v-bind 中支持绑定一个数组    数组中classA和 classB 对应为data中的数据</span><br><span class="line"></span><br><span class="line">这里的classA  对用data 中的  classA</span><br><span class="line">这里的classB  对用data 中的  classB</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;[classA, classB]&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>学习Vue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>学习Node<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>学习React<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm= <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&#x27;.box&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">classA</span>:‘textColor‘,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">classB</span>:‘textSize‘</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>:<span class="number">1px</span> dashed <span class="number">#f0f</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.textColor</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>:<span class="number">#f00</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>:<span class="number">#eef</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.textSize</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-weight</span>:bold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="绑定对象和绑定数组-的区别"><a href="#绑定对象和绑定数组-的区别" class="headerlink" title="绑定对象和绑定数组 的区别"></a>绑定对象和绑定数组 的区别</h3><ul><li>绑定对象的时候 对象的属性 即要渲染的类名 对象的属性值对应的是 data 中的数据</li><li>绑定数组的时候数组里面存的是data 中的数据</li></ul><h3 id="绑定style"><a href="#绑定style" class="headerlink" title="绑定style"></a>绑定style</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;styleObject&quot;</span>&gt;</span>绑定样式对象<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- CSS 属性名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用单引号括起来)    --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123; color: activeColor, fontSize: fontSize,background:&#x27;red&#x27; &#125;&quot;</span>&gt;</span>内联样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--组语法可以将多个样式对象应用到同一个元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;[styleObj1, styleObj2]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">styleObject</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">color</span>: <span class="string">&#x27;green&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">fontSize</span>: <span class="string">&#x27;30px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">background</span>:<span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;，</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">activeColor</span>: <span class="string">&#x27;green&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">   <span class="attr">fontSize</span>: <span class="string">&quot;30px&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">styleObj1</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">       &#125;,</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">styleObj2</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fontSize</span>: <span class="string">&#x27;30px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><h3 id="v-if-使用场景"><a href="#v-if-使用场景" class="headerlink" title="v-if 使用场景"></a>v-if 使用场景</h3><ul><li>1- 多个元素 通过条件判断展示或者隐藏某个元素。或者多个元素</li><li>2- 进行两个视图之间的切换</li></ul><h3 id="v-show-和-v-if的区别"><a href="#v-show-和-v-if的区别" class="headerlink" title="v-show 和 v-if的区别"></a>v-show 和 v-if的区别</h3><ul><li>v-show本质就是标签display设置为none，控制隐藏<ul><li>v-show只编译一次，后面其实就是控制css，而v-if不停的销毁和创建，故v-show性能更好一点。</li></ul></li><li>v-if是动态的向DOM树内添加或者删除DOM元素<ul><li>v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件</li></ul></li></ul><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><ul><li>用于循环的数组里面的值可以是对象，也可以是普通元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;example-1&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 循环结构-遍历数组  </span></span><br><span class="line"><span class="comment">item 是我们自己定义的一个名字  代表数组里面的每一项  </span></span><br><span class="line"><span class="comment">items对应的是 data中的数组--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>: <span class="string">&#x27;#example-1&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">items</span>: [</span></span><br><span class="line"><span class="language-javascript">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Foo&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">    ]，</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>不推荐</strong>同时使用 <code>v-if</code> 和 <code>v-for</code></li><li>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  循环结构-遍历对象</span></span><br><span class="line"><span class="comment">v 代表   对象的value</span></span><br><span class="line"><span class="comment">k  代表对象的 键 </span></span><br><span class="line"><span class="comment">i  代表索引</span></span><br><span class="line"><span class="comment">---&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&#x27;v==13&#x27;</span> <span class="attr">v-for</span>=<span class="string">&#x27;(v,k,i) in obj&#x27;</span>&gt;</span>&#123;&#123;v + &#x27;---&#x27; + k + &#x27;---&#x27; + i&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>: <span class="string">&#x27;#example-1&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">items</span>: [</span></span><br><span class="line"><span class="language-javascript">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Foo&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">    ]，</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">obj</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">uname</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="number">13</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>key 的作用<ul><li><strong>key来给每个节点做一个唯一标识</strong></li><li>key的作用主要是为了高效的更新虚拟DOM</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue学习笔记02-vue模板语法</title>
      <link href="/post/9ec270c7.html"/>
      <url>/post/9ec270c7.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Vue是一个渐进式框架，它提供了一系列的模板语法用于数据渲染。</p><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><ul><li>指令就是一个自定义属性</li><li>Vue中指令都是以 v-  开头</li></ul><h2 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h2><ul><li>v-cloak用于防止页面加载时出现闪烁问题</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document 02<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * v-cloak 指令的用法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 1. 提供样式</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * [v-cloak]&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     *     display: none;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 2. 在插值表达式所在的标签中添加v-cloak指令</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     *</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 背后的原理： 先通过样式隐藏内容，然后在内存中进行值的替换，替换好之后</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 再显示最终的结果</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&#x27;Hello Vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h2><ul><li><p>v-text指令用于将数据填充到标签中，作用于插值表达式类似，但是没有闪动问题</p></li><li><p>如果数据中有HTML标签会将html标签一并输出</p></li><li><p>注意：此处为单向绑定，数据对象上的值改变，插值会发生变化；但是当插值发生变化并不会影响数据对象的值</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">注意:在指令中不要写插值语法  直接写对应的变量名称 </span></span><br><span class="line"><span class="comment">        在 v-text 中 赋值的时候不要在写 插值语法</span></span><br><span class="line"><span class="comment">一般属性中不加 &#123;&#123;&#125;&#125;  直接写 对应 的数据名 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Vue  中只有在标签的 内容中 才用插值语法 --&gt;</span></span><br><span class="line">        &#123;&#123;msg&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&#x27;Hello Vue.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><ul><li><p>用法和v-text 相似  但是他可以将HTML片段填充到标签中</p></li><li><p>可能有安全问题, 一般只在可信任内容上使用 <code>v-html</code>，<strong>永不</strong>用在用户提交的内容上</p></li><li><p>它与v-text区别在于v-text输出的是纯文本，浏览器不会对其再进行html解析，但v-html会将其当html标签解析后输出。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 输出：html标签在渲染的时候被解析 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 输出：&lt;span&gt;通过双括号绑定&lt;/span&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line">　　<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 输出：&lt;span&gt;html标签在渲染的时候被源码输出&lt;/span&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">　　<span class="keyword">let</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">　　<span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">　　<span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">　　　　<span class="attr">message</span>: <span class="string">&quot;&lt;span&gt;通过双括号绑定&lt;/span&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">　　　　<span class="attr">html</span>: <span class="string">&quot;&lt;span&gt;html标签在渲染的时候被解析&lt;/span&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">　　　　<span class="attr">text</span>: <span class="string">&quot;&lt;span&gt;html标签在渲染的时候被源码输出&lt;/span&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">　　&#125;</span></span><br><span class="line"><span class="language-javascript"> &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h2><ul><li><p>显示原始信息跳过编译过程</p></li><li><p>跳过这个元素和它的子元素的编译过程。</p></li><li><p><strong>一些静态的内容不需要编译加这个指令可以加快渲染</strong></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123; this will not be compiled &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>    </span><br><span class="line"><span class="comment">&lt;!--  显示的是&#123;&#123; this will not be compiled &#125;&#125;  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>  </span><br><span class="line">     <span class="comment">&lt;!--   即使data里面定义了msg这里仍然是显示的&#123;&#123;msg&#125;&#125;  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&#x27;Hello Vue.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h2><ul><li>执行一次性的插值【当数据改变时，插值处的内容不会继续更新】</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 即使data里面定义了msg 后期我们修改了 仍然显示的是第一次data里面存储的数据即 Hello Vue.js  --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123; msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&#x27;Hello Vue.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h2><ul><li>当数据发生变化的时候，视图也就发生变化</li><li>当视图发生变化的时候，数据也会跟着同步变化</li></ul><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><ul><li><strong>v-model</strong>是一个指令，限制在 <code>&lt;input&gt;、&lt;select&gt;、&lt;textarea&gt;、components</code>中使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">          当输入框中内容改变的时候，  页面上的msg  会自动更新</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;msg&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="mvvm"><a href="#mvvm" class="headerlink" title="mvvm"></a>mvvm</h2><ul><li>MVC 是后端的分层开发概念； MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel</li><li>m   model<ul><li>数据层   Vue  中 数据层 都放在 data 里面</li></ul></li><li>v   view     视图   <ul><li>Vue  中  view      即 我们的HTML页面  </li></ul></li><li>vm   （view-model）     控制器     将数据和视图层建立联系<ul><li>vm 即  Vue 的实例  就是 vm  </li></ul></li></ul><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><ul><li>用来绑定事件的</li><li>形式如：v-on:click  缩写为 @click;</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:v-on</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document 06<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> &gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;num++&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;num++&quot;</span>&gt;</span>点击1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">handle()</span>&gt;</span>点击2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     *</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">num</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handle</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">num</span>++;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-on事件函数中传入参数"><a href="#v-on事件函数中传入参数" class="headerlink" title="v-on事件函数中传入参数"></a>v-on事件函数中传入参数</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:v-on</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document 07<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">handle1</span>&gt;</span>点击1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">handle2(123,456,$event)</span>&gt;</span>点击2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     *事件绑定-参数传递</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 1. 如果事件直接绑定函数名称，那么默认会传递事件对象作为事件函数的第一个参数</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 2. 如果事件绑定函数调用(就是有括号的形式),那么事件对象必须作为最后一个参数</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 显示传递，并且事件对象的名称必须是$event</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">num</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handle2</span>(<span class="params">p, p1, event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">innerHTML</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(p)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">num</span>++;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handle1</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">innerHTML</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><ul><li>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。</li><li>Vue 不推荐我们操作DOM    为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong></li><li>修饰符是由点开头的指令后缀来表示的</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联   即阻止冒泡也阻止默认事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。</span><br></pre></td></tr></table></figure><h2 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h2><ul><li>在做项目中有时会用到键盘事件，在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 `keyCode` 是 13 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- -当点击enter 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--当点击enter或者space时  时调用 `vm.alertMe()`   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-on:keyup.enter.space</span>=<span class="string">&quot;alertMe&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">常用的按键修饰符</span><br><span class="line">.enter =&gt;    enter键</span><br><span class="line">.tab =&gt; tab键</span><br><span class="line">.delete (捕获“删除”和“退格”按键) =&gt;  删除键</span><br><span class="line">.esc =&gt; 取消键</span><br><span class="line">.space =&gt;  空格键</span><br><span class="line">.up =&gt;  上</span><br><span class="line">.down =&gt;  下</span><br><span class="line">.left =&gt;  左</span><br><span class="line">.right =&gt;  右</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">submit</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">alertMe</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义按键修饰符别名"><a href="#自定义按键修饰符别名" class="headerlink" title="自定义按键修饰符别名"></a>自定义按键修饰符别名</h2><ul><li>在Vue中可以通过<code>config.keyCodes</code>自定义按键修饰符别名</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    预先定义了keycode 116（即F5）的别名为f5，因此在文字输入框中按下F5，会触发prompt方法</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-on:keydown.f5</span>=<span class="string">&quot;prompt()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">keyCodes</span>.<span class="property">f5</span> = <span class="number">116</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">prompt</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;我是 F5！&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue学习笔记01-vue基本使用</title>
      <link href="/post/ead85430.html"/>
      <url>/post/ead85430.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>用Vue已经有一段时间，但是之前因为赶项目，所以只是大概学了一下Vue，便开始开发了。在工作中总是会遇到各种问题，最近打算系统的学习一下Vue, 把Vue学习笔记都记录在这里。</p><h1 id="Vue-Hello-World"><a href="#Vue-Hello-World" class="headerlink" title="Vue-Hello World"></a>Vue-Hello World</h1><ul><li>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的渐进式框架</li><li>vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合</li></ul><h2 id="安装Vue"><a href="#安装Vue" class="headerlink" title="安装Vue"></a>安装Vue</h2><p>Vue的安装主要有2种形式，一种是通过CDN的方式引用，另一种则是通过下载对应的文件，然后引用。这里我用的是第二种形式。</p><p>进入官网<a href="https://cn.vuejs.org/v2/guide/installation.html">https://cn.vuejs.org/v2/guide/installation.html</a></p><p>选择开发版本</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20191130235039.png" alt=""></p><p>把解压好的文件，放进项目文件夹的js文件夹中。</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20191130235129.png" alt=""></p><p>新建一个HTML文件，并且在里面引用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>在HTML文件的body块中，创建一个标签,用于填充数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用vm的语法做功能,并且把Vue提供的数据填充到标签里面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#app&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            msg: &quot;Hello World&quot;</span><br><span class="line">    &#125;&#125;)</span><br></pre></td></tr></table></figure><p>打开网页，查看结果</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20191201000410.png" alt=""></p><p>完整的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;Hello World&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx学习笔记02-nginx负载均衡</title>
      <link href="/post/bec16396.html"/>
      <url>/post/bec16396.html</url>
      
        <content type="html"><![CDATA[<h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><p>增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的负载均衡</p><h2 id="nginx负载均衡"><a href="#nginx负载均衡" class="headerlink" title="nginx负载均衡"></a>nginx负载均衡</h2><h3 id="Step0-准备工作"><a href="#Step0-准备工作" class="headerlink" title="Step0 准备工作"></a>Step0 准备工作</h3><ol><li><p>准备2个tomcat，在webapps文件夹下创建edu文件夹,以及在edu/文件夹中创建a.html文件</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20191124171215.png" alt=""></p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20191124171248.png" alt=""></p></li><li><p>启动2个tomcat，分别在8080端口以及8081端口</p></li></ol><h3 id="Step1-修改nginx配置文件"><a href="#Step1-修改nginx配置文件" class="headerlink" title="Step1 修改nginx配置文件"></a>Step1 修改nginx配置文件</h3><p>在全局http块中添加以下代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream myserver &#123;</span><br><span class="line">       server  192.168.111.100:8080;</span><br><span class="line">       server  192.168.111.100:8081;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>修改80端口的server块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">listen       80;</span><br><span class="line">       server_name  192.168.111.100;</span><br><span class="line"></span><br><span class="line">       #charset koi8-r;</span><br><span class="line"></span><br><span class="line">       #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">           root   html;</span><br><span class="line">           proxy_pass  http://myserver;</span><br><span class="line">           index  index.html index.htm;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h3 id="Step2-重载nginx配置"><a href="#Step2-重载nginx配置" class="headerlink" title="Step2 重载nginx配置"></a>Step2 重载nginx配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20191124183735.png" alt=""></p><p><img src="C:\Users\dik\AppData\Roaming\Typora\typora-user-images\1574591866776.png" alt="1574591866776"></p><p>如果访问同一个地址能够出现不同的页面，那就说明配置成功！</p><h2 id="nginx负载均衡分配策略"><a href="#nginx负载均衡分配策略" class="headerlink" title="nginx负载均衡分配策略"></a>nginx负载均衡分配策略</h2><p>随着互联网信息的爆炸性增长，负载均衡（load balance）已经不再是一个很陌生的话题，顾名思义，负载均衡即是将负载分摊到不同的服务单元，既保证服务的可用性，又保证响应足够快，给用户很好的体验。快速增长的访问量和数据流量催生了各式各样的负载均衡产品，很多专业的负载均衡硬件提供了很好的功能，但却价格不菲，这使得负载均衡软件大受欢迎，nginx 就是其中的一个，在 linux 下有 Nginx、LVS、Haproxy 等等服务可以提供负载均衡服务，而且 Nginx 提供了几种分配方式(策略)</p><h3 id="轮询（默认）"><a href="#轮询（默认）" class="headerlink" title="轮询（默认）"></a>轮询（默认）</h3><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除</p><h3 id="weight"><a href="#weight" class="headerlink" title="weight"></a>weight</h3><p>weight 代表权,重默认为 1,<strong>权重越高</strong>被分配的客户端越多</p><p>指定轮询几率，weight 和访问比率成正比，用于后端服务器性能不均的情况。 例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream myserver &#123;</span><br><span class="line">       server  192.168.111.100:8080 weight=10;</span><br><span class="line">       server  192.168.111.100:8081 weight=10;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h3><p>每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。 例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream myserver &#123;</span><br><span class="line">   ip_hash;</span><br><span class="line">        server  192.168.111.100:8080;</span><br><span class="line">        server  192.168.111.100:8081;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="fair-（第三方）"><a href="#fair-（第三方）" class="headerlink" title="fair （第三方）"></a>fair （第三方）</h3><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream myserver &#123;</span><br><span class="line">   </span><br><span class="line">        server  192.168.111.100:8080;</span><br><span class="line">        server  192.168.111.100:8081;</span><br><span class="line">        fair;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx学习笔记01-nginx安装</title>
      <link href="/post/2f3cfde9.html"/>
      <url>/post/2f3cfde9.html</url>
      
        <content type="html"><![CDATA[<p>这次安装nginx采用编译安装的方式，所以在安装nginx之前需要把相关的依赖先安装了</p><h2 id="Step1-安装依赖"><a href="#Step1-安装依赖" class="headerlink" title="Step1 安装依赖"></a>Step1 安装依赖</h2><h3 id="安装pcre-依赖"><a href="#安装pcre-依赖" class="headerlink" title="安装pcre 依赖"></a>安装pcre 依赖</h3><ol><li><p>第一步联网下载pcre 压缩文件依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://downloads.sourceforge.net/project/pcre/pcre/8.37/pcre-8.37.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>第二步解压压缩文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar –xvf pcre-8.37.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>执行./configure </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure </span><br></pre></td></tr></table></figure></li><li><p>编译安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li><p>最后查看一下是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pre-config --version</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20191123231806.png" alt=""></p></li></ol><h3 id="安装openssl-、zlib-、gcc-依赖"><a href="#安装openssl-、zlib-、gcc-依赖" class="headerlink" title="安装openssl 、zlib 、gcc 依赖"></a>安装openssl 、zlib 、gcc 依赖</h3><p>直接用yum安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-deve</span><br></pre></td></tr></table></figure><h2 id="Step2-安装与启动nginx"><a href="#Step2-安装与启动nginx" class="headerlink" title="Step2 安装与启动nginx"></a>Step2 安装与启动nginx</h2><p>先到官网下载nginx <a href="http://nginx.org/">http://nginx.org/</a></p><ol><li><p>把下载好的nginx进行解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf nginx-1.12.2.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>检查一下相关依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure></li><li><p>编译安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li><p>启动nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin/</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure></li><li><p>开启服务器对应的80远程访问端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-port=80/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li></ol><p>访问对应的地址</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20191123233228.png" alt=""></p><p>如果能出现上面的信息，就表示nginx安装成功了！</p><h1 id="nginx常用命令"><a href="#nginx常用命令" class="headerlink" title="nginx常用命令"></a>nginx常用命令</h1><ul><li><p>首先需要进入到nginx的sbin目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin/</span><br></pre></td></tr></table></figure></li><li><p>nginx启动命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx</span><br></pre></td></tr></table></figure></li><li><p>nginx停止命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s stop</span><br></pre></td></tr></table></figure></li><li><p>nginx重新加载配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure></li><li><p>nginx查看版本号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -v</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20191124112917.png" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据入门09-HDFS总结</title>
      <link href="/post/2a6eff8e.html"/>
      <url>/post/2a6eff8e.html</url>
      
        <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%" /></p><span id="more"></span><h2 id="HDFS概述"><a href="#HDFS概述" class="headerlink" title="HDFS概述"></a>HDFS概述</h2><p>HDFS（Hadoop Distributed File System），它是一个文件系统，用于存储文件，通过目录树来定位文件；其次，它是分布式的，由很多服务器联合起来实现其功能，集群中的服务器有各自的角色。<br>HDFS的使用场景：适合一次写入，多次读出的场景，且不支持文件的修改。适合用来做数据分析，并不适合用来做网盘应用。</p><h3 id="HDFS优缺点"><a href="#HDFS优缺点" class="headerlink" title="HDFS优缺点"></a>HDFS优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li><p>高容错性<br>1)数据自动保存多个副本。它通过增加副本的形式，提高容错性<br>2)某一个副本丢失以后，它可以自动恢复</p></li><li><p>适合处理大数据<br>1)数据规模：能够处理数据规模达到GB、TB、甚至PB级别的数据<br>2)文件规模：能够处理百万规模以上的文件数量，数量相当之大</p></li><li><p>可构建在廉价机器上，通过多副本机制，提高可靠性</p></li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li><p>不适合低延时数据访问，比如毫秒级的存储数据，是做不到的</p></li><li><p>无法高效的对大量小文件进行存储<br>1)存储大量小文件的话，它会占用NameNode大量的内存来存储文件目录和块信息。这样是不可取的，因为NameNode的内存总是有限的<br>2)小文件存储的寻址时间会超过读取时间，它违反了HDFS的设计目标</p></li><li><p>不支持并发写入、文件随机修改<br>1)一个文件只能有一个写，不允许多个线程同时写<br>2)仅支持数据append（追加），不支持文件的随机修改</p></li></ul><h3 id="HDFS组成架构"><a href="#HDFS组成架构" class="headerlink" title="HDFS组成架构"></a>HDFS组成架构</h3><p>1) NameNode（nn）：就是Master，它是一个主管、管理者。</p><ul><li>管理HDFS的名称空间</li><li>配置副本策略</li><li>管理数据块（Block）映射信息</li><li>处理客户端读写请求</li></ul><p>2) DataNode：就是Slave。NameNode下达命令，DataNode执行实际的操作</p><ul><li>存储实际的数据块</li><li>执行数据块的读/写操作</li></ul><p>3) Client：就是客户端</p><ul><li>文件切分。文件上传HDFS的时候，Client将文件切分成一个一个的Block，然后进行上传</li><li>与NameNode交互，获取文件的位置信息</li><li>与DataNode交互，读取或者写入数据</li><li>Client提供一些命令来管理HDFS，比如NameNode格式化</li><li>Client可以通过一些命令来访问HDFS，比如对HDFS增删查改操作</li></ul><p>4) Secondary NameNode：并非NameNode的热备。当NameNode挂掉的时候，它并不能马上替换NameNode并提供服务</p><ul><li>辅助NameNode，分担其工作量，比如定期合并Fsimage和Edits，并推送给NameNode </li><li>在紧急情况下，可辅助恢复NameNode</li></ul><h2 id="HDFS的常用Shell操作"><a href="#HDFS的常用Shell操作" class="headerlink" title="HDFS的常用Shell操作"></a>HDFS的常用Shell操作</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>bin/hadoop fs 具体命令   OR  bin/hdfs dfs 具体命令<br>dfs是fs的实现类</p><h3 id="命令大全"><a href="#命令大全" class="headerlink" title="命令大全"></a>命令大全</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[-appendToFile &lt;localsrc&gt; ... &lt;dst&gt;]</span><br><span class="line">        [-cat [-ignoreCrc] &lt;src&gt; ...]</span><br><span class="line">        [-checksum &lt;src&gt; ...]</span><br><span class="line">        [-chgrp [-R] GROUP PATH...]</span><br><span class="line">        [-chmod [-R] &lt;MODE[,MODE]... | OCTALMODE&gt; PATH...]</span><br><span class="line">        [-chown [-R] [OWNER][:[GROUP]] PATH...]</span><br><span class="line">        [-copyFromLocal [-f] [-p] &lt;localsrc&gt; ... &lt;dst&gt;]</span><br><span class="line">        [-copyToLocal [-p] [-ignoreCrc] [-crc] &lt;src&gt; ... &lt;localdst&gt;]</span><br><span class="line">        [-count [-q] &lt;path&gt; ...]</span><br><span class="line">        [-cp [-f] [-p] &lt;src&gt; ... &lt;dst&gt;]</span><br><span class="line">        [-createSnapshot &lt;snapshotDir&gt; [&lt;snapshotName&gt;]]</span><br><span class="line">        [-deleteSnapshot &lt;snapshotDir&gt; &lt;snapshotName&gt;]</span><br><span class="line">        [-df [-h] [&lt;path&gt; ...]]</span><br><span class="line">        [-du [-s] [-h] &lt;path&gt; ...]</span><br><span class="line">        [-expunge]</span><br><span class="line">        [-get [-p] [-ignoreCrc] [-crc] &lt;src&gt; ... &lt;localdst&gt;]</span><br><span class="line">        [-getfacl [-R] &lt;path&gt;]</span><br><span class="line">        [-getmerge [-nl] &lt;src&gt; &lt;localdst&gt;]</span><br><span class="line">        [-help [cmd ...]]</span><br><span class="line">        [-ls [-d] [-h] [-R] [&lt;path&gt; ...]]</span><br><span class="line">        [-mkdir [-p] &lt;path&gt; ...]</span><br><span class="line">        [-moveFromLocal &lt;localsrc&gt; ... &lt;dst&gt;]</span><br><span class="line">        [-moveToLocal &lt;src&gt; &lt;localdst&gt;]</span><br><span class="line">        [-mv &lt;src&gt; ... &lt;dst&gt;]</span><br><span class="line">        [-put [-f] [-p] &lt;localsrc&gt; ... &lt;dst&gt;]</span><br><span class="line">        [-renameSnapshot &lt;snapshotDir&gt; &lt;oldName&gt; &lt;newName&gt;]</span><br><span class="line">        [-rm [-f] [-r|-R] [-skipTrash] &lt;src&gt; ...]</span><br><span class="line">        [-rmdir [--ignore-fail-on-non-empty] &lt;dir&gt; ...]</span><br><span class="line">        [-setfacl [-R] [&#123;-b|-k&#125; &#123;-m|-x &lt;acl_spec&gt;&#125; &lt;path&gt;]|[--set &lt;acl_spec&gt; &lt;path&gt;]]</span><br><span class="line">        [-setrep [-R] [-w] &lt;rep&gt; &lt;path&gt; ...]</span><br><span class="line">        [-stat [format] &lt;path&gt; ...]</span><br><span class="line">        [-tail [-f] &lt;file&gt;]</span><br><span class="line">        [-test -[defsz] &lt;path&gt;]</span><br><span class="line">        [-text [-ignoreCrc] &lt;src&gt; ...]</span><br><span class="line">        [-touchz &lt;path&gt; ...]</span><br><span class="line">        [-usage [cmd ...]]</span><br></pre></td></tr></table></figure><h3 id="常用命令实操"><a href="#常用命令实操" class="headerlink" title="常用命令实操"></a>常用命令实操</h3><ul><li><p>-help：输出这个命令参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -help rm</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-rm [-f] [-r|-R] [-skipTrash] &lt;src&gt; ... :</span><br><span class="line">  Delete all files that match the specified file pattern. Equivalent to the Unix</span><br><span class="line">  command &quot;rm &lt;src&gt;&quot;</span><br><span class="line">                                                                                 </span><br><span class="line">  -skipTrash  option bypasses trash, if enabled, and immediately deletes &lt;src&gt;   </span><br><span class="line">  -f          If the file does not exist, do not display a diagnostic message or </span><br><span class="line">              modify the exit status to reflect an error.                        </span><br><span class="line">  -[rR]       Recursively deletes directories  </span><br></pre></td></tr></table></figure></li><li><p>-ls: 显示目录信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -ls /</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Found 5 items</span><br><span class="line">-rw-r--r--   3 root supergroup       1366 2019-02-15 15:33 /README.txt</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2019-02-21 14:20 /directory</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2019-02-18 10:09 /hadoop</span><br><span class="line">drwxrwxr-x   - root supergroup          0 2019-02-20 16:24 /tmp</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2019-02-27 11:48 /user</span><br></pre></td></tr></table></figure></li><li><p>-mkdir：在HDFS上创建目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -mkdir -p /sanguo/shuguo</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190416174323.png" alt=""></p></li><li><p>-moveFromLocal：从本地剪切粘贴到HDFS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch kongming.txt</span><br><span class="line">hadoop fs -moveFromLocal ./kongming.txt /sanguo/shuguo</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190416174603.png" alt=""></p></li><li><p>-appendToFile：追加一个文件到已经存在的文件末尾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch liubei.txt</span><br><span class="line">vim liubei.txt</span><br><span class="line">hadoop fs -appendToFile liubei.txt /sanguo/shuguo/kongming.txt</span><br></pre></td></tr></table></figure></li><li><p>-cat：显示文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -cat /sanguo/shuguo/kongming.txt</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190416175122.png" alt=""></p></li><li><p>-chgrp 、-chmod、-chown：Linux文件系统中的用法一样，修改文件所属权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs  -chmod  666  /sanguo/shuguo/kongming.txt</span><br><span class="line">hadoop fs  -chown  atguigu:atguigu   /sanguo/shuguo/kongming.txt</span><br></pre></td></tr></table></figure></li><li><p>-copyFromLocal：从本地文件系统中拷贝文件到HDFS路径去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -copyFromLocal NOTICE.txt /</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190416175646.png" alt=""></p></li><li><p>-copyToLocal：从HDFS拷贝到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -copyToLocal /sanguo/shuguo/kongming.txt ./</span><br></pre></td></tr></table></figure></li><li><p>-cp ：从HDFS的一个路径拷贝到HDFS的另一个路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -cp /sanguo/shuguo/kongming.txt /zhuge.txt</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190416181455.png" alt=""></p></li><li><p>-mv：在HDFS目录中移动文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -mv /zhuge.txt /sanguo/shuguo/</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190416181749.png" alt=""></p></li><li><p>-getmerge：合并下载多个文件，比如HDFS的目录 /user/atguigu/test下有多个文件:log.1, log.2,log.3,…</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -getmerge /sanguo/shuguo/* ./zaiyiqi.txt</span><br></pre></td></tr></table></figure><ul><li><p>-get：等同于copyToLocal，就是从HDFS下载文件到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -get /sanguo/shuguo/kongming.txt ./</span><br></pre></td></tr></table></figure></li><li><p>-put：等同于copyFromLocal</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -put ./zaiyiqi.txt /user/</span><br></pre></td></tr></table></figure><ul><li><p>-rm：删除文件或文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -rm /user/zaiyiqi.txt</span><br></pre></td></tr></table></figure></li><li><p>-du统计文件夹的大小信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -du -s -h /user</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190416182500.png" alt=""></p></li></ul><h2 id="HDFS的数据流"><a href="#HDFS的数据流" class="headerlink" title="HDFS的数据流"></a>HDFS的数据流</h2><h3 id="HDFS写数据流程"><a href="#HDFS写数据流程" class="headerlink" title="HDFS写数据流程"></a>HDFS写数据流程</h3><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190417152653.png" alt=""></p><ul><li>客户端通过Distributed FileSystem模块向NameNode请求上传文件，NameNode检查目标文件是否已存在，父目录是否存在</li><li>NameNode返回是否可以上传</li><li>客户端请求第一个 Block上传到哪几个DataNode服务器上</li><li>NameNode返回3个DataNode节点，分别为dn1,dn2,dn3</li><li>客户端通过FSDataOutputStream模块请求dn1上传数据，dn1收到请求会继续调用dn2，然后dn2调用dn3，将这个通信管道建立完成</li><li>dn1、dn2、dn3逐级应答客户端</li><li>客户端开始往dn1上传第一个Block（先从磁盘读取数据放到一个本地内存缓存），以Packet为单位，dn1收到一个Packet就会传给dn2，dn2传给dn3；dn1每传一个packet会放入一个应答队列等待应答</li><li>当一个Block传输完成之后，客户端再次请求NameNode上传第二个Block的服务器。（重复执行3-7步）</li></ul><h3 id="HDFS读数据流程"><a href="#HDFS读数据流程" class="headerlink" title="HDFS读数据流程"></a>HDFS读数据流程</h3><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190423163351.png" alt=""></p><ul><li>客户端通过Distributed FileSystem向NameNode请求下载文件，NameNode通过查询元数据，找到文件块所在的DataNode地址</li><li>挑选一台DataNode（就近原则，然后随机）服务器，请求读取数据</li><li>DataNode开始传输数据给客户端（从磁盘里面读取数据输入流，以Packet为单位来做校验）</li><li>客户端以Packet为单位接收，先在本地缓存，然后写入目标文件</li></ul><h2 id="SecondaryNameNode和NameNode"><a href="#SecondaryNameNode和NameNode" class="headerlink" title="SecondaryNameNode和NameNode"></a>SecondaryNameNode和NameNode</h2><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190423173551.png" alt=""></p><h3 id="第一阶段：NameNode启动"><a href="#第一阶段：NameNode启动" class="headerlink" title="第一阶段：NameNode启动"></a>第一阶段：NameNode启动</h3><ul><li>第一次启动NameNode格式化后，创建Fsimage和Edits文件。如果不是第一次启动，直接加载编辑日志和镜像文件到内存</li><li>客户端对元数据进行增删改的请求</li><li>NameNode记录操作日志，更新滚动日志</li><li>NameNode在内存中对数据进行增删改</li></ul><h3 id="第二阶段：Secondary-NameNode工作"><a href="#第二阶段：Secondary-NameNode工作" class="headerlink" title="第二阶段：Secondary NameNode工作"></a>第二阶段：Secondary NameNode工作</h3><ul><li>Secondary NameNode询问NameNode是否需要CheckPoint。直接带回NameNode是否检查结果</li><li>Secondary NameNode请求执行CheckPoint</li><li>NameNode滚动正在写的Edits日志</li><li>将滚动前的编辑日志和镜像文件拷贝到Secondary NameNode</li><li>Secondary NameNode加载编辑日志和镜像文件到内存，并合并</li><li>生成新的镜像文件fsimage.chkpoint</li><li>拷贝fsimage.chkpoint到NameNode</li><li>NameNode将fsimage.chkpoint重新命名成fsimage</li></ul><h2 id="DataNode"><a href="#DataNode" class="headerlink" title="DataNode"></a>DataNode</h2><h3 id="DataNode工作机制"><a href="#DataNode工作机制" class="headerlink" title="DataNode工作机制"></a>DataNode工作机制</h3><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190423181910.png" alt=""></p><ul><li>一个数据块在DataNode上以文件形式存储在磁盘上，包括两个文件，一个是数据本身，一个是元数据包括数据块的长度，块数据的校验和，以及时间戳</li><li>DataNode启动后向NameNode注册，通过后，周期性（1小时）的向NameNode上报所有的块信息</li><li>心跳是每3秒一次，心跳返回结果带有NameNode给该DataNode的命令如复制块数据到另一台机器，或删除某个数据块。如果超过10分钟没有收到某个DataNode的心跳，则认为该节点不可用</li><li>集群运行中可以安全加入和退出一些机器<hr /></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> HDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据入门08-HIVE常用DDL操作</title>
      <link href="/post/8e0139aa.html"/>
      <url>/post/8e0139aa.html</url>
      
        <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%" /></p><span id="more"></span><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><ul><li>创建一个数据库，数据库在 HDFS 上的默认存储路径是/user/hive/warehouse/*.db。 </li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database db_hive; </span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190324115057.png" alt=""></p><ul><li>避免要创建的数据库已经存在错误，增加 if not exists 判断。（标准写法） </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> db_hive; </span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190324115225.png" alt=""></p><ul><li>创建一个数据库，指定数据库在 HDFS 上存放的位置 </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database db_hive2 location <span class="string">&#x27;/db_hive2.db&#x27;</span>; </span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190324115344.png" alt=""></p><h2 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h2><p>用户可以使用 ALTER DATABASE 命令为某个数据库的 DBPROPERTIES 设置键-值对<br>属性值，来描述这个数据库的属性信息。<strong>数据库的其他元数据信息都是不可更改的，包括数<br>据库名和数据库所在的目录位置。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter database db_hive set dbproperties(&#x27;createtime&#x27;=&#x27;20190101&#x27;); </span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190324115923.png" alt=""></p><h2 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h2><h3 id="查看数据库详情"><a href="#查看数据库详情" class="headerlink" title="查看数据库详情"></a>查看数据库详情</h3><ul><li>显示数据库信息 </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> database db_hive; </span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190324120548.png" alt=""></p><ul><li>显示数据库详细信息，extended</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> database extended db_hive; </span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190324121207.png" alt=""></p><h3 id="切换当前数据库"><a href="#切换当前数据库" class="headerlink" title="切换当前数据库"></a>切换当前数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use db_hive; </span><br></pre></td></tr></table></figure><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><ul><li>删除空数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database db_hive2;</span><br></pre></td></tr></table></figure><ul><li>如果删除的数据库不存在，最好采用 if exists 判断数据库是否存在 </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database if <span class="keyword">exists</span> db_hive2; </span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190324122021.png" alt=""></p><ul><li>如果数据库不为空，可以采用 cascade 命令，强制删除 </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database db_hive cascade; </span><br></pre></td></tr></table></figure><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>建表语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">EXTERNAL</span>] <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] table_name  </span><br><span class="line">[(col_name data_type [COMMENT col_comment], ...)]  </span><br><span class="line">[COMMENT table_comment]  </span><br><span class="line">[PARTITIONED <span class="keyword">BY</span> (col_name data_type [COMMENT col_comment], ...)]  </span><br><span class="line">[CLUSTERED <span class="keyword">BY</span> (col_name, col_name, ...)  </span><br><span class="line">[SORTED <span class="keyword">BY</span> (col_name [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], ...)] <span class="keyword">INTO</span> num_buckets BUCKETS]  </span><br><span class="line">[<span class="type">ROW</span> FORMAT row_format]  </span><br><span class="line">[STORED <span class="keyword">AS</span> file_format]  </span><br><span class="line">[LOCATION hdfs_path] </span><br></pre></td></tr></table></figure><ul><li>CREATE TABLE 创建一个指定名字的表。如果相同名字的表已经存在，则抛出<br>异常；用户可以用 IF NOT EXISTS 选项来忽略这个异常。</li><li>EXTERNAL 关键字可以让用户创建一个外部表，在建表的同时指定一个指向实际<br>数据的路径（LOCATION），Hive 创建内部表时，会将数据移动到数据仓库指向的路<br>径；若创建外部表，仅记录数据所在的路径，不对数据的位置做任何改变。在删除表的<br>时候，内部表的元数据和数据会被一起删除，而外部表只删除元数据，不删除数据。 </li><li>COMMENT：为表和列添加注释。 </li><li>PARTITIONED BY 创建分区表 </li><li>CLUSTERED BY 创建分桶表</li><li>SORTED BY 不常用 </li><li><p>ROW FORMAT<br>DELIMITED [FIELDS TERMINATED BY char] [COLLECTION ITEMS TERMINATED BY char]<br>[MAP KEYS TERMINATED BY char] [LINES TERMINATED BY char]<br>| SERDE serde_name [WITH SERDEPROPERTIES (property_name=property_value, property_name=property_value, …)]<br>用户在建表的时候可以自定义 SerDe 或者使用自带的 SerDe。如果没有指定 ROW FORMAT 或者 ROW FORMAT DELIMITED，将会使用自带的 SerDe。在建表的时候，<br>用户还需要为表指定列，用户在指定表的列的同时也会指定自定义的 SerDe，Hive 通过 SerDe 确定表的具体的列的数据。<br><em>SerDe是Serialize/Deserilize的简称，目的是用于序列化和反序列化。</em></p></li><li><p>STORED AS 指定存储文件类型<br>常用的存储文件类型：SEQUENCEFILE（二进制序列文件）、TEXTFILE（文本）、<br>RCFILE（列式存储格式文件）<br>如果文件数据是纯文本，可以使用 STORED AS TEXTFILE。如果数据需要压缩，<br>使用 STORED AS SEQUENCEFILE。</p></li><li><p>LOCATION ：指定表在 HDFS 上的存储位置.</p></li><li>LIKE 允许用户复制现有的表结构，但是不复制数据.</li></ul><h3 id="管理表-内部表"><a href="#管理表-内部表" class="headerlink" title="管理表(内部表)"></a>管理表(内部表)</h3><p>默认创建的表都是所谓的管理表，有时也被称为内部表。因为这种表，Hive 会（或多<br>或少地）控制着数据的生命周期。Hive 默认情况下会将这些表的数据存储在由配置项<br>hive.metastore.warehouse.dir(例如，/user/hive/warehouse)所定义的目录的子目录下。 当我们<br>删除一个管理表时，Hive 也会删除这个表中数据。管理表不适合和其他工具共享数据。 </p><ul><li>普通创建表 </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> student2( id <span class="type">int</span>, name string ) </span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span> </span><br><span class="line">stored <span class="keyword">as</span> textfile </span><br><span class="line">location <span class="string">&#x27;/user/hive/warehouse/student2&#x27;</span>; </span><br></pre></td></tr></table></figure><ul><li>根据查询结果创建表（查询的结果会添加到新创建的表中）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> student3 </span><br><span class="line"><span class="keyword">as</span> <span class="keyword">select</span> id, name <span class="keyword">from</span> student; </span><br></pre></td></tr></table></figure><ul><li>根据已经存在的表结构创建表 </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> student4 <span class="keyword">like</span> student; </span><br></pre></td></tr></table></figure><ul><li>查询表的类型 </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> formatted student2; </span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190324155054.png" alt=""></p><h3 id="外部表"><a href="#外部表" class="headerlink" title="外部表"></a>外部表</h3><ul><li>建表语句<br>创建部门表 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> default.dept( </span><br><span class="line">    deptno <span class="type">int</span>, </span><br><span class="line">    dname string, </span><br><span class="line">    loc <span class="type">int</span> ) </span><br><span class="line">    <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span>; </span><br></pre></td></tr></table></figure>创建员工表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> default.emp( </span><br><span class="line">    empno <span class="type">int</span>, </span><br><span class="line">    ename string, </span><br><span class="line">    job string, </span><br><span class="line">    mgr <span class="type">int</span>, </span><br><span class="line">    hiredate string,  </span><br><span class="line">    sal <span class="keyword">double</span>,  </span><br><span class="line">    comm <span class="keyword">double</span>, </span><br><span class="line">    deptno <span class="type">int</span>) </span><br><span class="line">    <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span>; </span><br></pre></td></tr></table></figure><ul><li>向外部表中导入数据 </li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">load data local inpath &#x27;/opt/module/datas/dept.txt&#x27; into table default.dept;</span><br><span class="line">load data local inpath &#x27;/opt/module/datas/emp.txt&#x27; into table default.emp; </span><br></pre></td></tr></table></figure><p>查询结果<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp; </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept; </span><br></pre></td></tr></table></figure><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190324164442.png" alt=""><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190324164458.png" alt=""></p><ul><li>查看表格式化数据 </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> formatted dept; </span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190324164602.png" alt=""></p><h3 id="管理表与外部表的互相转换"><a href="#管理表与外部表的互相转换" class="headerlink" title="管理表与外部表的互相转换"></a>管理表与外部表的互相转换</h3><ul><li>修改内部表student2为外部表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student2 <span class="keyword">set</span> tblproperties(<span class="string">&#x27;EXTERNAL&#x27;</span><span class="operator">=</span><span class="string">&#x27;TRUE&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>查询表的类型</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> formatted student2;</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190324170327.png" alt=""></p><ul><li>修改外部表student2为内部表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student2 <span class="keyword">set</span> tblproperties(<span class="string">&#x27;EXTERNAL&#x27;</span><span class="operator">=</span><span class="string">&#x27;FALSE&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190324170439.png" alt=""></p><h3 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h3><p>分区表实际上就是对应一个 HDFS 文件系统上的独立的文件夹，该文件夹下是该分区<br>所有的数据文件。Hive 中的分区就是分目录，把一个大的数据集根据业务需要分割成小的<br>数据集。在查询时通过 WHERE 子句中的表达式选择查询所需要的指定的分区，这样的查<br>询效率会提高很多。<br>因为表是外部表，所以 Hive 并非认为其完全拥有这份数据。<strong>删除该表并不会删除掉这<br>份数据，不过描述表的元数据信息会被删除掉。</strong> </p><ul><li>创建分区表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept_partition( </span><br><span class="line">deptno <span class="type">int</span>, </span><br><span class="line">dname string, </span><br><span class="line">loc string ) </span><br><span class="line">partitioned <span class="keyword">by</span> (<span class="keyword">month</span> string) </span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span>; </span><br></pre></td></tr></table></figure><ul><li>加载数据到分区表中 </li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">load data local inpath &#x27;/opt/module/datas/dept.txt&#x27; into table default.dept_partition partition(month=&#x27;201809&#x27;);</span><br><span class="line">load data local inpath &#x27;/opt/module/datas/dept.txt&#x27; into table default.dept_partition partition(month=&#x27;201808&#x27;);</span><br><span class="line">load data local inpath &#x27;/opt/module/datas/dept.txt&#x27; into table default.dept_partition partition(month=&#x27;201807&#x27;);</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190324172605.png" alt=""></p><ul><li>查询分区表中数据 </li></ul><p>单分区查询<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept_partition <span class="keyword">where</span> <span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;201809&#x27;</span>;</span><br></pre></td></tr></table></figure><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190324175204.png" alt=""></p><p>多分区联合查询<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept_partition <span class="keyword">where</span> <span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;201809&#x27;</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept_partition <span class="keyword">where</span> <span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;201808&#x27;</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept_partition <span class="keyword">where</span> <span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;201807&#x27;</span>;</span><br></pre></td></tr></table></figure><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190324180218.png" alt=""></p><ul><li>增加分区</li></ul><p>增加单个分区<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> dept_partition <span class="keyword">add</span> <span class="keyword">partition</span>(<span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;201806&#x27;</span>);</span><br></pre></td></tr></table></figure></p><p>增加多个分区<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> dept_partition <span class="keyword">add</span> <span class="keyword">partition</span>(<span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;201805&#x27;</span>) <span class="keyword">partition</span>(<span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;201804&#x27;</span>);</span><br></pre></td></tr></table></figure><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190324181103.png" alt=""></p><ul><li>删除分区 </li></ul><p>删除单个分区<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> dept_partition <span class="keyword">drop</span> <span class="keyword">partition</span> (<span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;201804&#x27;</span>); </span><br></pre></td></tr></table></figure></p><p>同时删除多个分区<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> dept_partition <span class="keyword">drop</span> <span class="keyword">partition</span> (<span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;201805&#x27;</span>), <span class="keyword">partition</span> </span><br><span class="line">(<span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;201806&#x27;</span>); </span><br></pre></td></tr></table></figure><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190324184116.png" alt=""><br><strong>这里需要注意的是删除多个分区是以” , “ 分割，而增加多个分区是以空格分割。</strong></p><ul><li>查看分区表有多少分区 </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> partitions dept_partition; </span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190324184717.png" alt=""></p><ul><li>查看分区表结构 </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> formatted dept_partition; </span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190324184926.png" alt=""></p><h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><h3 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h3><p>语法：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name RENAME <span class="keyword">TO</span> new_table_name </span><br></pre></td></tr></table></figure></p><h3 id="增加-修改-替换列信息"><a href="#增加-修改-替换列信息" class="headerlink" title="增加/修改/替换列信息"></a>增加/修改/替换列信息</h3><ul><li>语法</li></ul><p>更新列<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name CHANGE [<span class="keyword">COLUMN</span>] col_old_name col_new_name column_type [COMMENT col_comment] [<span class="keyword">FIRST</span><span class="operator">|</span>AFTER column_name] </span><br></pre></td></tr></table></figure><br>增加和替换列 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span><span class="operator">|</span>REPLACE COLUMNS (col_name data_type [COMMENT col_comment], ...) </span><br></pre></td></tr></table></figure><p><em>ADD 是代表新增一字段，字段位置在所有列后面(partition 列前)，REPLACE 则是<br>表示替换表中所有字段。</em></p><hr />]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据入门07-Hive安装配置与用法</title>
      <link href="/post/56b50f11.html"/>
      <url>/post/56b50f11.html</url>
      
        <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%" /><br>在这篇文章中，我们会安装配置Hive,并且把Hive的元数据库配置在mysql上面。<br><span id="more"></span></p><h2 id="Hive安装配置"><a href="#Hive安装配置" class="headerlink" title="Hive安装配置"></a>Hive安装配置</h2><p>下载地址:<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/hive/">https://mirrors.tuna.tsinghua.edu.cn/apache/hive/</a></p><h3 id="下载-amp-安装"><a href="#下载-amp-安装" class="headerlink" title="下载&amp;安装"></a>下载&amp;安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/hive/hive-2.3.4/apache-hive-2.3.4-bin.tar.gz</span><br></pre></td></tr></table></figure><p>解压到/opt/module/目录<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf tar -zxvf apache-hive-2.3.4-bin.tar.gz  -C ../module/hive-2.3.4</span><br></pre></td></tr></table></figure></p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>插入以下内容<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">##HIVE_HOME</span><br><span class="line">export HIVE_HOME=/opt/module/hive-2.3.4</span><br><span class="line">export PATH=$PATH:$HIVE_HOME/bin</span><br></pre></td></tr></table></figure><br>刷新环境<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p><h3 id="配置Hive"><a href="#配置Hive" class="headerlink" title="配置Hive"></a>配置Hive</h3><p>切换到Hive/conf目录中<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp hive-env.sh.template hive-env.sh</span><br></pre></td></tr></table></figure><br>在hive-env.sh文件中添加hadoop路径以及hive的conf路径<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HADOOP_HOME=/opt/module/hadoop-2.7.7</span><br><span class="line">export HIVE_CONF_DIR=/opt/module/hive-2.3.4</span><br></pre></td></tr></table></figure><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190302224327.png" alt=""></p><h2 id="安装MySQL数据库"><a href="#安装MySQL数据库" class="headerlink" title="安装MySQL数据库"></a>安装MySQL数据库</h2><p>hive默认自带的derby数据库，但是在这种模式下，hive只能打开一个。所以我们把hive的元数据库搭建在MySQL上面</p><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><ul><li>下载地址：<a href="https://dev.mysql.com/downloads/mysql/5.7.html#downloads">https://dev.mysql.com/downloads/mysql/5.7.html#downloads</a><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190302224741.png" alt=""></li><li>首先卸载操作系统可能会自带的mariadb-libs<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove mariadb-libs</span><br></pre></td></tr></table></figure><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190302224842.png" alt=""></li></ul><p>解压mysql rpm-bundle tar包<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir mysql</span><br><span class="line">tar -xvf mysql-5.7.25-1.el7.x86_64.rpm-bundle.tar -C mysql</span><br></pre></td></tr></table></figure></p><ul><li>开始安装mysq<br>一定要按照下面的顺序来安装，否则会安装不成功：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-server-5.7.25-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-compat-5.7.25-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3></li><li>启动mysql服务,并且设置为开机启动<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld</span><br><span class="line">systemctl enable mysqld</span><br></pre></td></tr></table></figure></li><li>查看root用户初始密码,并且登录MySQL<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep password /var/log/mysqld.log</span><br><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure></li><li>修改MySQL的密码长度以及安全性要求<br>因为MySQL有长度以及安全性的要求，所以需要对此作出修改<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password_policy=0; </span><br><span class="line">set global validate_password_length=1;</span><br></pre></td></tr></table></figure></li><li>修改root密码<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set password = password(&#x27;123456&#x27;);</span><br></pre></td></tr></table></figure></li><li>设置远程登录权限<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;12345678&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>到这里MySQL就配置完成了。</li></ul><h2 id="配置Hive的MySQL元数据库"><a href="#配置Hive的MySQL元数据库" class="headerlink" title="配置Hive的MySQL元数据库"></a>配置Hive的MySQL元数据库</h2><p>在hive/conf目录中新增hive-site.xml文件并且插入以下内容<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp hive-default.xml.template hive-site.xml</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;Driver class name for a JDBC metastore&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;jdbc:mysql://hadoop101:3306/hive?createDatabaseIfNotExist=true&amp;amp;useSSL=false&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;JDBC connect string for a JDBC metastore&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;root&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;Username to use against metastore database&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;123456&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;password to use against metastore database&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></p><h3 id="下载mysql-connector-java"><a href="#下载mysql-connector-java" class="headerlink" title="下载mysql-connector-java"></a>下载mysql-connector-java</h3><p>在 <a href="https://dev.mysql.com/downloads/connector/j/5.1.html">https://dev.mysql.com/downloads/connector/j/5.1.html</a> 中下载mysql-connector-java，并且把该文件拉到../hive/lib目录中</p><h3 id="初始化元数据库"><a href="#初始化元数据库" class="headerlink" title="初始化元数据库"></a>初始化元数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schematool -dbType mysql -initSchema</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190302230835.png" alt=""><br>在这里遇到一个比较坑的就是官方文档是在hive/bin目录执行上面的命令的，但我在执行这条命令之后就遇到这个报错：<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190302231100.png" alt=""><br>卡了好久，切换到hive/conf目录再执行这条命令居然成功了- - ，不知道是不是一个bug</p><h2 id="启动Hive"><a href="#启动Hive" class="headerlink" title="启动Hive"></a>启动Hive</h2><p>在启动hive之前需要先启动hadoop的dfs</p><h3 id="启动dfs"><a href="#启动dfs" class="headerlink" title="启动dfs"></a>启动dfs</h3><p>切换到hadoop的sbin目录<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./start-dfs.sh</span><br></pre></td></tr></table></figure></p><h3 id="启动Hive-1"><a href="#启动Hive-1" class="headerlink" title="启动Hive"></a>启动Hive</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190302231259.png" alt=""><br>一个简单的测试：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190302231340.png" alt=""></p><h2 id="Hive-常见属性配置"><a href="#Hive-常见属性配置" class="headerlink" title="Hive 常见属性配置"></a>Hive 常见属性配置</h2><h3 id="Hive-数据仓库位置配置"><a href="#Hive-数据仓库位置配置" class="headerlink" title="Hive 数据仓库位置配置"></a>Hive 数据仓库位置配置</h3><ul><li>Default 数据仓库的最原始位置是在 hdfs 上的：/user/hive/warehouse 路径下</li><li>在仓库目录下，没有对默认的数据库 default 创建文件夹。如果某张表属于 default数据库，直接在数据仓库目录下创建一个文件夹。</li><li>修改 default 数据仓库原始位置（将 hive-default.xml.template 如下配置信息拷贝到hive-site.xml 文件中）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hive.metastore.warehouse.dir&lt;/name&gt;</span><br><span class="line">&lt;value&gt;/user/hive/warehouse&lt;/value&gt;</span><br><span class="line">&lt;description&gt;location of default database for the warehouse&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="查询后信息显示配置"><a href="#查询后信息显示配置" class="headerlink" title="查询后信息显示配置"></a>查询后信息显示配置</h3><p>在 hive-site.xml 文件中添加如下配置信息，就可以实现显示当前数据库，以及查询表的头信息配置。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hive.cli.print.header&lt;/name&gt;</span><br><span class="line">&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hive.cli.print.current.db&lt;/name&gt;</span><br><span class="line">&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><br>重新启动 hive，对比配置前后差异</p><ul><li><p>配置前：<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190319143023.png" alt=""></p></li><li><p>配置后：<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190319143119.png" alt=""></p></li></ul><h3 id="Hive-运行日志信息配置"><a href="#Hive-运行日志信息配置" class="headerlink" title="Hive 运行日志信息配置"></a>Hive 运行日志信息配置</h3><p>Hive 的 log 默认存放在/tmp/atguigu/hive.log 目录下（当前用户名下）<br>修改 hive 的 log 存放日志到/opt/module/hive/logs</p><ul><li>修改/opt/module/hive/conf/hive-log4j.properties.template 文件名称为hive-log4j.properties</li><li>在 hive-log4j.properties 文件中修改 log 存放位置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive.log.dir=/opt/module/hive/logs</span><br></pre></td></tr></table></figure></li></ul><p>到这里，Hive的安装配置就完成啦！</p><hr />]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据入门06-spark项目实战</title>
      <link href="/post/7ca34ba0.html"/>
      <url>/post/7ca34ba0.html</url>
      
        <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%" /><br>在这篇文章中，我们会用pyspark分析空气质量,并且把数据存入elasticsearch,用kibana进行可视化。<br><span id="more"></span></p><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>数据来源：<a href="http://stateair.net/web/historical/1/1.html">http://stateair.net/web/historical/1/1.html</a></p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190217170619.png" alt=""><br>我们把数据下载到本地，然后上传到hdfs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -put Beijing* /data</span><br></pre></td></tr></table></figure><h2 id="编写pyspark程序"><a href="#编写pyspark程序" class="headerlink" title="编写pyspark程序"></a>编写pyspark程序</h2><h3 id="创建sparkSession"><a href="#创建sparkSession" class="headerlink" title="创建sparkSession"></a>创建sparkSession</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spark = SparkSession.builder.appName(<span class="string">&quot;project&quot;</span>).getOrCreate()</span><br></pre></td></tr></table></figure><h3 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data2017 = spark.read.<span class="built_in">format</span>(<span class="string">&quot;csv&quot;</span>).option(<span class="string">&quot;header&quot;</span>,<span class="string">&quot;true&quot;</span>).option(<span class="string">&quot;inferSchema&quot;</span>,<span class="string">&quot;true&quot;</span>).load(<span class="string">&quot;/data/Beijing_2017_HourlyPM25_created20170803.csv&quot;</span>).select(<span class="string">&quot;Year&quot;</span>,<span class="string">&quot;Month&quot;</span>,<span class="string">&quot;Day&quot;</span>,<span class="string">&quot;Hour&quot;</span>,<span class="string">&quot;Value&quot;</span>,<span class="string">&quot;QC Name&quot;</span>)</span><br><span class="line">data2016 = spark.read.<span class="built_in">format</span>(<span class="string">&quot;csv&quot;</span>).option(<span class="string">&quot;header&quot;</span>,<span class="string">&quot;true&quot;</span>).option(<span class="string">&quot;inferSchema&quot;</span>,<span class="string">&quot;true&quot;</span>).load(<span class="string">&quot;/data/Beijing_2016_HourlyPM25_created20170201.csv&quot;</span>).select(<span class="string">&quot;Year&quot;</span>,<span class="string">&quot;Month&quot;</span>,<span class="string">&quot;Day&quot;</span>,<span class="string">&quot;Hour&quot;</span>,<span class="string">&quot;Value&quot;</span>,<span class="string">&quot;QC Name&quot;</span>)</span><br><span class="line">data2015 = spark.read.<span class="built_in">format</span>(<span class="string">&quot;csv&quot;</span>).option(<span class="string">&quot;header&quot;</span>,<span class="string">&quot;true&quot;</span>).option(<span class="string">&quot;inferSchema&quot;</span>,<span class="string">&quot;true&quot;</span>).load(<span class="string">&quot;/data/Beijing_2015_HourlyPM25_created20160201.csv&quot;</span>).select(<span class="string">&quot;Year&quot;</span>,<span class="string">&quot;Month&quot;</span>,<span class="string">&quot;Day&quot;</span>,<span class="string">&quot;Hour&quot;</span>,<span class="string">&quot;Value&quot;</span>,<span class="string">&quot;QC Name&quot;</span>)</span><br></pre></td></tr></table></figure><p>其中option(“inferSchema”,”true”)是用于自动推导数值类型的</p><h3 id="编写自定义函数"><a href="#编写自定义函数" class="headerlink" title="编写自定义函数"></a>编写自定义函数</h3><p>我们需要把value的值进行聚合，并且按照空气质量指数进行划分<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0-50      健康</span><br><span class="line">51-100    中等</span><br><span class="line">101-150   对敏感人群不健康</span><br><span class="line">151-200   不健康</span><br><span class="line">201-300   非常不健康</span><br><span class="line">301-500   危险</span><br><span class="line">&gt;500      爆表</span><br></pre></td></tr></table></figure></p><ul><li>自定义函数的一般流程<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.创建普通的python函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">toDate</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(s)+<span class="string">&#x27;-&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.注册自定义函数</span></span><br><span class="line"><span class="keyword">from</span> pyspark.sql.functions <span class="keyword">import</span> udf</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> StringType</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据python的返回值类型定义好spark对应的数据类型</span></span><br><span class="line"><span class="comment"># python函数中返回的是string，对应的pyspark是StringType</span></span><br><span class="line">toDateUDF=udf(toDate, StringType())  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用自定义函数</span></span><br><span class="line">df1.withColumn(<span class="string">&#x27;color&#x27;</span>,toDateUDF(<span class="string">&#x27;color&#x27;</span>)).show()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_grade</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">if</span> value &lt;= <span class="number">50</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;健康&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> value &lt;= <span class="number">100</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;中等&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> value &lt;= <span class="number">150</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;对敏感人群不健康&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> value &lt;= <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;不健康&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> value &lt;= <span class="number">300</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;非常不健康&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> value &lt;= <span class="number">500</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;危险&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> value &gt; <span class="number">500</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;爆表&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">grade_function_udf = udf(get_grade, StringType())</span><br></pre></td></tr></table></figure><h3 id="按空气质量指数进行分组聚合"><a href="#按空气质量指数进行分组聚合" class="headerlink" title="按空气质量指数进行分组聚合"></a>按空气质量指数进行分组聚合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">group2017 = data2017.withColumn(<span class="string">&quot;Grade&quot;</span>, grade_function_udf(data2017[<span class="string">&#x27;Value&#x27;</span>])).groupBy(<span class="string">&quot;Grade&quot;</span>).count()</span><br><span class="line">group2016 = data2016.withColumn(<span class="string">&quot;Grade&quot;</span>, grade_function_udf(data2016[<span class="string">&#x27;Value&#x27;</span>])).groupBy(<span class="string">&quot;Grade&quot;</span>).count()</span><br><span class="line">group2015 = data2015.withColumn(<span class="string">&quot;Grade&quot;</span>, grade_function_udf(data2015[<span class="string">&#x27;Value&#x27;</span>])).groupBy(<span class="string">&quot;Grade&quot;</span>).count()</span><br><span class="line"></span><br><span class="line">result2017 = group2017.select(<span class="string">&quot;Grade&quot;</span>, <span class="string">&quot;count&quot;</span>).withColumn(<span class="string">&quot;precent&quot;</span>,group2017[<span class="string">&#x27;count&#x27;</span>] / data2017.count()*<span class="number">100</span>)</span><br><span class="line">result2016 = group2016.select(<span class="string">&quot;Grade&quot;</span>, <span class="string">&quot;count&quot;</span>).withColumn(<span class="string">&quot;precent&quot;</span>,group2016[<span class="string">&#x27;count&#x27;</span>] / data2016.count()*<span class="number">100</span>)</span><br><span class="line">result2015 = group2015.select(<span class="string">&quot;Grade&quot;</span>, <span class="string">&quot;count&quot;</span>).withColumn(<span class="string">&quot;precent&quot;</span>,group2015[<span class="string">&#x27;count&#x27;</span>] / data2015.count()*<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h3 id="数据写入到elasticsearch"><a href="#数据写入到elasticsearch" class="headerlink" title="数据写入到elasticsearch"></a>数据写入到elasticsearch</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result2017.selectExpr(&quot;Grade as grade&quot;, &quot;count&quot;, &quot;precent&quot;).write.format(&quot;org.elasticsearch.spark.sql&quot;).option(&quot;es.nodes&quot;,&quot;192.168.111.101:9200&quot;).mode(&quot;overwrite&quot;).save(&quot;weather2017/pm&quot;)</span><br><span class="line">result2016.selectExpr(&quot;Grade as grade&quot;, &quot;count&quot;, &quot;precent&quot;).write.format(&quot;org.elasticsearch.spark.sql&quot;).option(&quot;es.nodes&quot;,&quot;192.168.111.101:9200&quot;).mode(&quot;overwrite&quot;).save(&quot;weather2016/pm&quot;)</span><br><span class="line">result2015.selectExpr(&quot;Grade as grade&quot;, &quot;count&quot;, &quot;precent&quot;).write.format(&quot;org.elasticsearch.spark.sql&quot;).option(&quot;es.nodes&quot;,&quot;192.168.111.101:9200&quot;).mode(&quot;overwrite&quot;).save(&quot;weather2015/pm&quot;)</span><br></pre></td></tr></table></figure><p>完整的代码在 <a href="https://github.com/dik111/pyspark-project/blob/master/13/wea.py">https://github.com/dik111/pyspark-project/blob/master/13/wea.py</a></p><h2 id="Elasticsearch安装配置"><a href="#Elasticsearch安装配置" class="headerlink" title="Elasticsearch安装配置"></a>Elasticsearch安装配置</h2><p>下载地址：<a href="https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.6.0.tar.gz">https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.6.0.tar.gz</a></p><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf elasticsearch-6.6.0.tar.gz -C ../module/</span><br></pre></td></tr></table></figure><p>解压完成之后需要在elasticsearch目录中，修改配置文件/config/elasticsearch.yml<br>添加以下内容<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bootstrap.system_call_filter: false</span><br><span class="line">network.host: 0.0.0.0</span><br></pre></td></tr></table></figure></p><h3 id="启动elasticsearch"><a href="#启动elasticsearch" class="headerlink" title="启动elasticsearch"></a>启动elasticsearch</h3><p>在后台启动elasticsearch<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /bin</span><br><span class="line">nohup ./elasticsearch &amp;</span><br></pre></td></tr></table></figure><br>这里需要注意的是elasticsearch不能用root用户启动，所以要切换到非root用户启动。<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190217210745.png" alt=""></p><h2 id="Kibana安装配置"><a href="#Kibana安装配置" class="headerlink" title="Kibana安装配置"></a>Kibana安装配置</h2><p>下载地址：<a href="https://artifacts.elastic.co/downloads/kibana/kibana-6.6.0-linux-x86_64.tar.gz">https://artifacts.elastic.co/downloads/kibana/kibana-6.6.0-linux-x86_64.tar.gz</a></p><h3 id="安装配置-1"><a href="#安装配置-1" class="headerlink" title="安装配置"></a>安装配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf kibana-6.6.0-linux-x86_64.tar.gz -C ../module/</span><br></pre></td></tr></table></figure><p>解压完成之后需要在kibana目录中，修改/config/kibana.yml 文件<br>添加以下内容：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server.host: &quot;0.0.0.0&quot;</span><br><span class="line">elasticsearch.hosts: [&quot;http://hadoop101:9200&quot;]</span><br></pre></td></tr></table></figure></p><h3 id="启动kibana"><a href="#启动kibana" class="headerlink" title="启动kibana"></a>启动kibana</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd bin/</span><br><span class="line">nohup ./kibana &amp;</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190217212250.png" alt=""></p><h2 id="数据写入到elasticsearch-1"><a href="#数据写入到elasticsearch-1" class="headerlink" title="数据写入到elasticsearch"></a>数据写入到elasticsearch</h2><h3 id="下载elasticsearch-spark-jar包"><a href="#下载elasticsearch-spark-jar包" class="headerlink" title="下载elasticsearch-spark jar包"></a>下载elasticsearch-spark jar包</h3><p>下载地址：<a href="https://www.elastic.co/downloads/hadoop">https://www.elastic.co/downloads/hadoop</a></p><h3 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/module/spark-2.3.2-bin-hadoop2.7/bin/</span><br><span class="line">./spark-submit --master yarn /home/dik/python-project/13/wea.py --jars /opt/module/elasticsearch-hadoop-6.6.0/dist/elasticsearch-spark-20_2.11-6.6.0.jar </span><br></pre></td></tr></table></figure><p>如果提示：ClassNotFoundException Failed to find data source: org.elasticsearch.spark.sql.，则表示spark没有发现jar包，此时需重新编译pyspark：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/module/spark-2.3.2-bin-hadoop2.7/python</span><br><span class="line">python setup.py sdist </span><br><span class="line">pip install dist/*.tar.gz</span><br></pre></td></tr></table></figure></p><h2 id="Kibana可视化"><a href="#Kibana可视化" class="headerlink" title="Kibana可视化"></a>Kibana可视化</h2><ul><li><p>打开Mangement中的Index patterns<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190217221214.png" alt=""></p></li><li><p>创建新的index pattern<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190217221359.png" alt=""></p></li><li><p>然后在visualize中创建可视化条形图<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190217221555.png" alt=""></p></li><li>Y轴：<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190217221623.png" alt=""></li><li>X轴：<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190217221711.png" alt=""></li><li><p>Split Series：<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190217221743.png" alt=""></p></li><li><p>Metrics：<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190217221930.png" alt=""></p></li><li><p>最终完成效果：<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190217221945.png" alt=""></p><hr /></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> pyspark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据入门05-spark运行模式</title>
      <link href="/post/32d49f0.html"/>
      <url>/post/32d49f0.html</url>
      
        <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%" /></p><span id="more"></span><h2 id="本地模式"><a href="#本地模式" class="headerlink" title="本地模式"></a>本地模式</h2><p>本地模式是我们在IDE上面编写完程序，然后运行的一种模式。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./bin/spark-submit \</span><br><span class="line">  --class &lt;main-class&gt; \</span><br><span class="line">  --master &lt;master-url&gt; \</span><br><span class="line">  --deploy-mode &lt;deploy-mode&gt; \</span><br><span class="line">  --conf &lt;key&gt;=&lt;value&gt; \</span><br><span class="line">  ... # other options</span><br><span class="line">  &lt;application-jar&gt; \</span><br><span class="line">  [application-arguments]</span><br></pre></td></tr></table></figure></p><h3 id="常用的-options"><a href="#常用的-options" class="headerlink" title="常用的 options :"></a>常用的 options :</h3><ul><li>—class: 您的应用程序的入口点（例如。 org.apache.spark.examples.SparkPi)</li><li>—master: 集群的 master URL (例如 spark://23.195.26.187:7077)</li><li>—deploy-mode: 是在 worker 节点(cluster) 上还是在本地作为一个外部的客户端(client) 部署您的 driver(默认: client) †</li><li>—conf: 按照 key=value 格式任意的 Spark 配置属性。对于包含空格的 value（值）使用引号包 “key=value” 起来。</li><li>application-jar: 包括您的应用以及所有依赖的一个打包的 Jar 的路径。该 URL 在您的集群上必须是全局可见的，例如，一个 hdfs:// path 或者一个 file:// 在所有节点是可见的。（对于 Python 应用，在 &lt;application-jar&gt; 的位置简单的传递一个 .py 文件而不是一个 JAR，并且可以用 —py-files 添加 Python .zip，.egg 或者 .py 文件到 search path（搜索路径））</li><li>application-arguments: 传递到您的 main class 的 main 方法的参数，如果有的话。</li></ul><h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./spark-submit --master local[2] --name spark-local /home/dik/python-project/03/spark0301.py </span><br></pre></td></tr></table></figure><h2 id="Spark-on-yarn模式"><a href="#Spark-on-yarn模式" class="headerlink" title="Spark on yarn模式"></a>Spark on yarn模式</h2><p>spark on yarn模式是我们工作中用的比较多的一种模式，其用法其实跟本地模式是比较类似的。spark作为客户端而已，他需要做的事情就是提交作业到yarn上去执行</p><h3 id="配置spark-on-yarn"><a href="#配置spark-on-yarn" class="headerlink" title="配置spark on yarn"></a>配置spark on yarn</h3><ul><li>配置HADOOP_CONF_DIR 或者 YARN_CONF_DIR</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /spark-2.3.2-bin-hadoop2.7/conf/spark-env.sh</span><br></pre></td></tr></table></figure><p>添加<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HADOOP_CONF_DIR=/opt/module/hadoop-2.7.7/etc/hadoop</span><br></pre></td></tr></table></figure></p><h3 id="简单例子-1"><a href="#简单例子-1" class="headerlink" title="简单例子"></a>简单例子</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./spark-submit --master yarn --name spark-local /home/dik/python-project/03/spark0301.py</span><br></pre></td></tr></table></figure><h3 id="deploy-mode"><a href="#deploy-mode" class="headerlink" title="deploy mode"></a>deploy mode</h3><p>yarn支持client和cluster模式：driver运行在哪里</p><ul><li>client：提交作业的进程是不能停止的，否则作业就挂了</li><li>cluster：提交完作业，那么提交作业端就可以断开了，因为driver是运行在am里面的</li></ul><h2 id="开启历史日志监控"><a href="#开启历史日志监控" class="headerlink" title="开启历史日志监控"></a>开启历史日志监控</h2><p>spark的作业如果正在运行的话，我们可以在4040端口上面看，但是如果作业结束的话，我们便无法查看了。因此我们需要建立一个历史日志监控的系统。</p><ul><li>在/spark-2.3.2-bin-hadoop2.7/conf目录中创建spark-defaults.conf文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp spark-defaults.conf.template spark-defaults.conf</span><br></pre></td></tr></table></figure></li><li><p>在当前安装Spark的节点上，进入到conf目录，在配置文件spark-defaults.conf添加下面的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spark.eventLog.enabled  true    # 开启日志记录</span><br><span class="line">spark.eventLog.dir      hdfs://hadoop101:9000/directory   # 日志的保存位置</span><br></pre></td></tr></table></figure></li><li><p>配置spark-env.sh 文件<br>添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SPARK_HISTORY_OPTS=&quot;-Dspark.history.fs.logDirectory=hdfs://hadoop101:9000/directory&quot;</span><br></pre></td></tr></table></figure></li><li>在/sbin目录下启动历史日志<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./start-history-server.sh</span><br></pre></td></tr></table></figure><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190217163726.png" alt=""><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190217163819.png" alt=""><hr /></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> pyspark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据入门04-pyspark环境搭建</title>
      <link href="/post/275fa010.html"/>
      <url>/post/275fa010.html</url>
      
        <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%" /></p><span id="more"></span><h2 id="安装Spark依赖的Scala"><a href="#安装Spark依赖的Scala" class="headerlink" title="安装Spark依赖的Scala"></a>安装Spark依赖的Scala</h2><p>Hadoop的安装请参考上面提到的博文，因为Spark依赖scala，所以在安装Spark之前，这里要先安装scala。在每个节点上都进行安装。</p><h3 id="下载和解压缩Scala"><a href="#下载和解压缩Scala" class="headerlink" title="下载和解压缩Scala"></a>下载和解压缩Scala</h3><p>打开地址：<a href="https://www.scala-lang.org/download/">https://www.scala-lang.org/download/</a></p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190131141743.png" alt=""></p><h3 id="配置scala环境变量"><a href="#配置scala环境变量" class="headerlink" title="配置scala环境变量"></a>配置scala环境变量</h3><ul><li>打开配置文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export SCALA_HOME=/root/module/scala-2.12.8</span><br><span class="line">export PATH=$PATH:$SCALA_HOME/bin</span><br></pre></td></tr></table></figure></li><li>保存之后刷新配置文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li>验证是否配置好<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scala -version</span><br></pre></td></tr></table></figure><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190131142644.png" alt=""></li></ul><h2 id="下载和解压缩Spark"><a href="#下载和解压缩Spark" class="headerlink" title="下载和解压缩Spark"></a>下载和解压缩Spark</h2><p>打开下载地址：<br><a href="http://spark.apache.org/downloads.html">http://spark.apache.org/downloads.html</a></p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190131142831.png" alt=""></p><p>选择清华源</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190131142859.png" alt=""></p><h3 id="配置spark环境变量"><a href="#配置spark环境变量" class="headerlink" title="配置spark环境变量"></a>配置spark环境变量</h3><ul><li>编辑/etc/profile文件，添加</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export SPARK_HOME=/root/module/spark-2.3.2-bin-hadoop2.7</span><br><span class="line">export PATH=$PATH:$SPARK_HOME/bin</span><br><span class="line">export PYSPARK_PYTHON=/home/dik/anaconda3/bin/python3.7</span><br></pre></td></tr></table></figure><h3 id="配置conf目录下的文件"><a href="#配置conf目录下的文件" class="headerlink" title="配置conf目录下的文件"></a>配置conf目录下的文件</h3><p>/root/module/spark-2.3.2-bin-hadoop2.7/conf目录下的文件进行配置</p><ul><li><p>新建spark-env.h文件<br>以spark为我们创建好的模板创建一个spark-env.h文件，命令是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp    spark-env.sh.template   spark-env.sh</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190131143625.png" alt=""></p></li><li><p>编辑spark-env.h文件，在里面加入配置(具体路径以自己的为准)：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export SCALA_HOME=/root/module/scala-2.12.8</span><br><span class="line">export JAVA_HOME=/root/module/jdk1.8.0_191</span><br><span class="line">export HADOOP_HOME=/root/module/hadoop-2.7.7</span><br><span class="line">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export SPARK_HOME=/root/module/spark-2.3.2-bin-hadoop2.7</span><br></pre></td></tr></table></figure><h3 id="新建slaves文件"><a href="#新建slaves文件" class="headerlink" title="新建slaves文件"></a>新建slaves文件</h3><p>/root/module/spark-2.3.2-bin-hadoop2.7/conf目录下的文件进行配置</p><p>以spark为我们创建好的模板创建一个slaves文件，命令是：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp    slaves.template   slaves</span><br></pre></td></tr></table></figure><br>编辑slaves文件，里面的内容为：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spark001</span><br></pre></td></tr></table></figure></p><h2 id="启动和测试Spark集群"><a href="#启动和测试Spark集群" class="headerlink" title="启动和测试Spark集群"></a>启动和测试Spark集群</h2><h3 id="启动Spark"><a href="#启动Spark" class="headerlink" title="启动Spark"></a>启动Spark</h3><ul><li>切换到sbin目录<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /root/module/spark-2.3.2-bin-hadoop2.7/sbin</span><br></pre></td></tr></table></figure></li><li>执行启动脚本：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./start-all.sh</span><br></pre></td></tr></table></figure><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190131145420.png" alt=""></li><li>查看是否启动<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190131145519.png" alt=""></li></ul><h3 id="测试和使用Spark集群"><a href="#测试和使用Spark集群" class="headerlink" title="测试和使用Spark集群"></a>测试和使用Spark集群</h3><ul><li><p>访问Spark集群提供的URL<br><a href="http://spark001:8080/">http://spark001:8080/</a><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190131145627.png" alt=""></p></li><li><p>运行Spark提供的计算圆周率的示例程序<br>进入到Spark的根目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br></pre></td></tr></table></figure><p>调用Spark自带的计算圆周率的Demo，执行下面的命令：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/spark-submit --class org.apache.spark.examples.SparkPi --master local examples/jars/spark-examples_2.11-2.3.2.jar</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190131150149.png" alt=""></p><h2 id="配置pyspark远程调试环境"><a href="#配置pyspark远程调试环境" class="headerlink" title="配置pyspark远程调试环境"></a>配置pyspark远程调试环境</h2><h3 id="安装Anaconda3"><a href="#安装Anaconda3" class="headerlink" title="安装Anaconda3"></a>安装Anaconda3</h3><p>因为服务器自带的python版本是python2的，所以要安装python3,而Anaconda3是一个比较好的选择。</p><ul><li><p>下载地址：<br><a href="https://repo.continuum.io/archive/Anaconda3-5.1.0-Linux-x86_64.sh">https://repo.continuum.io/archive/Anaconda3-5.1.0-Linux-x86_64.sh</a></p></li><li><p>依赖安装bzip2： yum -y install bzip2</p></li><li>安装anaconda3<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash Anaconda3-5.0.1-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>安装的过程比较简单，这里就不复述了。<br>安装完成之后刷新配置文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="配置本地pycharm环境"><a href="#配置本地pycharm环境" class="headerlink" title="配置本地pycharm环境"></a>配置本地pycharm环境</h3></li><li>安装py4j</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install py4j</span><br></pre></td></tr></table></figure><ul><li>配置pycharm 远程</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190131153852.png" alt=""><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190131153930.png" alt=""><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190131153955.png" alt=""></p><ul><li>配置远程的编译器</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190131154157.png" alt=""></p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190131154416.png" alt=""></p><ul><li>新建一个pyspark项目<br>填入以下测试代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_map</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    map(func)</span></span><br><span class="line"><span class="string">将func函数作用到数据集的每一个元素上，生成一个新的分布式的数据集返回</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">word =&gt; (word,1)</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    rdd1 = sc.parallelize(data)</span><br><span class="line">    rdd2 = rdd1.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x * <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(rdd2.collect())</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    conf = SparkConf().setAppName(<span class="string">&#x27;local[2]&#x27;</span>)</span><br><span class="line">    sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">    my_map()</span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>配置<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190131154635.png" alt=""></li></ul><p>在里面加入对应的JAVA_HOME,PYTHONPATH,SPARK_HOME<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190131154819.png" alt=""></p><ul><li>运行代码<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190131154928.png" alt=""><br>如果没报错的话，那么就搭建成功了！<hr /></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> pyspark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据入门03-Hadoop完全分布式运行模式</title>
      <link href="/post/d8e20e70.html"/>
      <url>/post/d8e20e70.html</url>
      
        <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%" /></p><span id="more"></span><h2 id="虚拟机准备"><a href="#虚拟机准备" class="headerlink" title="虚拟机准备"></a>虚拟机准备</h2><p>修改克隆主机的IP地址以及名字</p><ul><li><p>我们打开克隆的3台centos7虚拟机，修改里面对应的IP地址为105,106，107</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190204162411.png" alt=""><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190204162449.png" alt=""><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190204162509.png" alt=""></p></li><li><p>修改MAC地址<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190217133024.png" alt=""><br>在配置IP地址的文件中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MACADDR=XXXXXXXXXXXXXXXX</span><br></pre></td></tr></table></figure></li><li><p>修改主机的名字，分别为105,106,107</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190204162841.png" alt=""><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190204162858.png" alt=""><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190204162911.png" alt=""></p></li><li><p>修改hosts配置文件，添加对应的105，106，107的IP地址<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190204170226.png" alt=""></p></li><li><p>为三台虚拟机配置ssh<br>分别在105，106，107上面创建ssh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>然后敲（三个回车），就会生成两个文件id_rsa（私钥）、id_rsa.pub（公钥）<br>进入到.ssh文件夹，将产生的公钥拷贝到目标机器上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id hadoop105</span><br><span class="line">ssh-copy-id hadoop106</span><br><span class="line">ssh-copy-id hadoop107</span><br></pre></td></tr></table></figure></li><li><p>编写xsync集群分发脚本<br>在~/bin目录在创建xsync创建文件，文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch xsync</span><br><span class="line">vim xsync</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#1 获取输入参数个数，如果没有参数，直接退出</span><br><span class="line">pcount=$#</span><br><span class="line">if((pcount==0)); then</span><br><span class="line">echo no args;</span><br><span class="line">exit;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#2 获取文件名称</span><br><span class="line">p1=$1</span><br><span class="line">fname=`basename $p1`</span><br><span class="line">echo fname=$fname</span><br><span class="line"></span><br><span class="line">#3 获取上级目录到绝对路径</span><br><span class="line">pdir=`cd -P $(dirname $p1); pwd`</span><br><span class="line">echo pdir=$pdir</span><br><span class="line"></span><br><span class="line">#4 获取当前用户名称</span><br><span class="line">user=`whoami`</span><br><span class="line"></span><br><span class="line">#5 循环</span><br><span class="line">for((host=103; host&lt;105; host++)); do</span><br><span class="line">        echo ------------------- hadoop$host --------------</span><br><span class="line">        rsync -rvl $pdir/$fname $user@hadoop$host:$pdir</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中#5 循环部分可以改成对应的主机名称<br>修改脚本 xsync 具有执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 xsync</span><br></pre></td></tr></table></figure><h2 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h2><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190204212905.png" alt=""></p></li><li><p>核心配置文件<br>配置core-site.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop105 ~]# cd /opt/module/hadoop-2.7.7/etc/hadoop/</span><br><span class="line">[root@hadoop105 hadoop]# vim core-site.xml</span><br></pre></td></tr></table></figure><p>把namenode节点改成105</p></li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190204213451.png" alt=""></p><ul><li>HDFS配置文件</li></ul><p>配置hadoop-env.sh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop105 hadoop]# vim hadoop-env.sh</span><br><span class="line">export JAVA_HOME=/opt/module/jdk-11.0.1</span><br></pre></td></tr></table></figure><p>配置hdfs-site.xml<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop105 hadoop]# vim hdfs-site.xml</span><br></pre></td></tr></table></figure><br>在该文件中编写如下配置<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 指定Hadoop辅助名称节点主机配置 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">      &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;hadoop107:50090&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></p><ul><li>YARN配置文件<br>配置yarn-env.sh  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop105 hadoop]# vim yarn-env.sh</span><br><span class="line">export JAVA_HOME=/opt/module/jdk-11.0.1</span><br></pre></td></tr></table></figure><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190204215103.png" alt=""><br>配置yarn-site.xml<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Reducer获取数据的方式 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">&lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 指定YARN的ResourceManager的地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">&lt;value&gt;hadoop106&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>MapReduce配置文件<br>配置mapred-env.sh<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop105 hadoop]# vim mapred-env.sh</span><br><span class="line">export JAVA_HOME=/opt/module/jdk-11.0.1</span><br></pre></td></tr></table></figure>配置mapred-site.xml<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop105 hadoop]# cp mapred-site.xml.template mapred-site.xml</span><br><span class="line">[root@hadoop105 hadoop]# vim mapred-site.xml</span><br><span class="line"></span><br><span class="line">&lt;!-- 指定MR运行在Yarn上 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">&lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>接着用xsync脚本把编写的文件同步到106,107<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xsync /opt/module/hadoop-2.7.7/etc/hadoop/</span><br></pre></td></tr></table></figure><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190204221353.png" alt=""></li></ul><h2 id="群起集群"><a href="#群起集群" class="headerlink" title="群起集群"></a>群起集群</h2><ul><li>格式化NameNode<br>格式化之前，一定要先停止上次启动的所有namenode和datanode进程，然后再分别在105,106,107上删除data和log数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf data/ logs/</span><br><span class="line">bin/hdfs namenode -format</span><br></pre></td></tr></table></figure></li><li><p>配置slaves</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop105 hadoop-2.7.7]# vim etc/hadoop/slaves</span><br><span class="line">hadoop105</span><br><span class="line">hadoop106</span><br><span class="line">hadoop107</span><br></pre></td></tr></table></figure><p>接着把它分发到106，107</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/bin/xsync /opt/module/hadoop-2.7.7/etc/hadoop/slaves</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190204223134.png" alt=""></p></li><li><p>启动HDFS<br>在hadoop105上启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sbin/start-dfs.sh</span><br><span class="line">#sbin/stop-dfs.sh (关闭)</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190204223740.png" alt=""><br>分别在105，106，107上面用jps命令查看是否启动正确：<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190204223834.png" alt=""><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190204223854.png" alt=""><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190204223908.png" alt=""></p></li><li><p>启动YARN<br>在hadoop106上启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sbin/start-yarn.sh </span><br><span class="line">#sbin/stop-yarn.sh (关闭)</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190204224224.png" alt=""><br>启动之后再在105，106，107上面用jps命令查看是否启动正确：<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190204224259.png" alt=""><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190204224320.png" alt=""><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190204224334.png" alt=""><br>最后我们登录 <a href="http://hadoop105:50070/explorer.html#/">http://hadoop105:50070/explorer.html#/</a><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190204224454.png" alt=""><br>如果能成功打开，那么我们完全分布式集群就搭建成功了！</p></li></ul><h2 id="集群基本测试"><a href="#集群基本测试" class="headerlink" title="集群基本测试"></a>集群基本测试</h2><p>我们上传一个小文件到集群上面用作测试:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hdfs dfs -put README.txt /</span><br></pre></td></tr></table></figure><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190204225130.png" alt=""><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190204225221.png" alt=""></p><hr />]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据入门02-Hadoop伪分布式运行模式</title>
      <link href="/post/c6f4c136.html"/>
      <url>/post/c6f4c136.html</url>
      
        <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%" /></p><span id="more"></span><h2 id="启动HDFS并运行MapReduce程序"><a href="#启动HDFS并运行MapReduce程序" class="headerlink" title="启动HDFS并运行MapReduce程序"></a>启动HDFS并运行MapReduce程序</h2><h3 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤"></a>执行步骤</h3><ul><li><p>配置：hadoop-env.sh<br>Linux系统中获取JDK的安装路径,并且修改hadoop-env.sh文件中的JAVA_HOME：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo $JAVA_HOME</span><br><span class="line">vim /opt/module/hadoop-2.7.7/etc/hadoop/hadoop-env.sh</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20181217215536.png" alt=""></p></li><li><p>配置：core-site.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/module/hadoop-2.7.7/etc/hadoop/core-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 指定HDFS中NameNode的地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hdfs://hadoop100:9000&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 指定Hadoop运行时产生文件的存储目录 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">&lt;value&gt;/opt/module/hadoop-2.7.7/data/tmp&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20181217220516.png" alt=""></p></li><li>配置：hdfs-site.xml<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/module/hadoop-2.7.7/etc/hadoop/hdfs-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 指定HDFS副本的数量 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">&lt;value&gt;1&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20181217220409.png" alt=""></p><p>这里因为是伪分布式模式，所以副本的数量设置为1。</p><h3 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h3><ul><li>格式化NameNode（第一次启动时格式化，以后就不要总格式化）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/module/hadoop-2.7.7/</span><br><span class="line">bin/hdfs namenode -format</span><br></pre></td></tr></table></figure><ul><li><p>启动NameNode</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/hadoop-daemon.sh start namenode</span><br></pre></td></tr></table></figure></li><li><p>启动DataNode</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/hadoop-daemon.sh start datanode</span><br></pre></td></tr></table></figure><h3 id="查看集群"><a href="#查看集群" class="headerlink" title="查看集群"></a>查看集群</h3></li><li><p>查看是否启动成功<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20181217221822.png" alt=""></p></li><li><p>web端查看HDFS文件系统</p></li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20181217222111.png" alt=""></p><p>注意：如果不能查看，看如下帖子处理<br><a href="http://www.cnblogs.com/zlslch/p/6604189.html">http://www.cnblogs.com/zlslch/p/6604189.html</a></p><ul><li>查看产生的Log日志<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/module/hadoop-2.7.7/logs/</span><br></pre></td></tr></table></figure><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20181217222402.png" alt=""></li></ul><p>在企业中遇到Bug时，经常根据日志提示信息去分析问题、解决Bug。</p><h3 id="操作集群"><a href="#操作集群" class="headerlink" title="操作集群"></a>操作集群</h3><ul><li>在HDFS文件系统上创建一个input文件夹</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hdfs dfs -mkdir -p /user/dik/input</span><br></pre></td></tr></table></figure><ul><li>将测试文件内容上传到文件系统上</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hdfs dfs -put wcinput/wc.input</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20181223142636.png" alt=""></p><ul><li>运行MapReduce程序</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.7.jar  wordcount /user/dik/input   /user/dik/output</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20181223143354.png" alt=""></p><h2 id="启动YARN并运行MapReduce程序"><a href="#启动YARN并运行MapReduce程序" class="headerlink" title="启动YARN并运行MapReduce程序"></a>启动YARN并运行MapReduce程序</h2><h3 id="执行步骤-1"><a href="#执行步骤-1" class="headerlink" title="执行步骤"></a>执行步骤</h3><ul><li>配置yarn-env.sh</li></ul><p>配置一下JAVA_HOME</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo $JAVA_HOME</span><br><span class="line">vim /opt/module/hadoop-2.7.7/etc/hadoop/hadoop-env.sh</span><br><span class="line">export JAVA_HOME=/opt/module/jdk-11.0.1</span><br></pre></td></tr></table></figure><ul><li>配置yarn-site.xml</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/module/hadoop-2.7.7/etc/hadoop/yarn-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Reducer获取数据的方式 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">                &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 指定YARN的ResourceManager的地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">&lt;value&gt;hadoop101&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">                &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 日志聚集功能使能 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line"></span><br><span class="line">                &lt;name&gt;yarn.log-aggregation-enable&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;yarn.log-aggregation.retain-seconds&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;604800&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br></pre></td></tr></table></figure><ul><li>配置：mapred-env.sh</li></ul><p>配置一下JAVA_HOME</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/module/hadoop-2.7.7/etc/hadoop/mapred-env.sh</span><br><span class="line">export JAVA_HOME=/opt/module/jdk-11.0.1</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20181223145451.png" alt=""></p><ul><li>配置： (对mapred-site.xml.template重新命名为) mapred-site.xml</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv mapred-site.xml.template mapred-site.xml</span><br><span class="line">vim /opt/module/hadoop-2.7.7/etc/hadoop/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 指定MR运行在YARN上 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">                &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 历史服务器端地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span><br><span class="line">&lt;value&gt;hadoop101:10020&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- 历史服务器web端地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hadoop101:19888&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="启动集群-1"><a href="#启动集群-1" class="headerlink" title="启动集群"></a>启动集群</h3><p>启动前必须保证NameNode和DataNode已经启动</p><ul><li>启动ResourceManager</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/yarn-daemon.sh start resourcemanager</span><br></pre></td></tr></table></figure><ul><li>启动NodeManager</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/yarn-daemon.sh start nodemanager</span><br></pre></td></tr></table></figure><h3 id="集群操作"><a href="#集群操作" class="headerlink" title="集群操作"></a>集群操作</h3><ul><li>YARN的浏览器页面查看</li></ul><p><a href="http://hadoop101:8088/cluster">http://hadoop101:8088/cluster</a></p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20181223150126.png" alt=""></p><ul><li>删除文件系统上的output文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hdfs dfs -rm -R /user/dik/outpu</span><br></pre></td></tr></table></figure><ul><li>执行MapReduce程序</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.7.jar  wordcount /user/dik/input /user/dik/output</span><br></pre></td></tr></table></figure><p>到这里一个简单的伪分布式运行模式就搭建成功啦！</p><hr />]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据入门01-Hadoop运行环境搭建</title>
      <link href="/post/12172c7b.html"/>
      <url>/post/12172c7b.html</url>
      
        <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%" /><br>这篇文章主要介绍的是Hadoop运行环境搭建<br><span id="more"></span></p><h2 id="虚拟机环境准备"><a href="#虚拟机环境准备" class="headerlink" title="虚拟机环境准备"></a>虚拟机环境准备</h2><h3 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h3><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20181209151821.png" alt=""></p><h3 id="修改克隆虚拟机的静态IP"><a href="#修改克隆虚拟机的静态IP" class="headerlink" title="修改克隆虚拟机的静态IP"></a>修改克隆虚拟机的静态IP</h3><p>进入 /etc/sysconfig/network-scripts中<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/sysconfig/network-scripts</span><br><span class="line">vim ifcfg-eth0 </span><br></pre></td></tr></table></figure><br>需要对这几项进行修改：<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20181209152921.png" alt=""></p><h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/sysconfig</span><br><span class="line">sudo vim network</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20181209153740.png" alt=""></p><h3 id="配置hosts文件"><a href="#配置hosts文件" class="headerlink" title="配置hosts文件"></a>配置hosts文件</h3><ul><li>打开hosts文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/hosts</span><br></pre></td></tr></table></figure></li><li>配置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">192.168.111.100 hadoop100</span><br><span class="line">192.168.111.101 hadoop101</span><br><span class="line">192.168.111.102 hadoop102</span><br><span class="line">192.168.111.103 hadoop103</span><br><span class="line">192.168.111.104 hadoop104</span><br><span class="line">192.168.111.105 hadoop105</span><br><span class="line">192.168.111.106 hadoop106</span><br></pre></td></tr></table></figure></li></ul><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service </span><br></pre></td></tr></table></figure><p>禁止防火墙开机启动<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure></p><h3 id="在-opt目录下创建文件夹"><a href="#在-opt目录下创建文件夹" class="headerlink" title="在/opt目录下创建文件夹"></a>在/opt目录下创建文件夹</h3><ul><li><p>在/opt目录下创建module、software文件夹,其中software文件夹用于软件包的存储，module文件夹用于软件的安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir module</span><br><span class="line">sudo mkdir software</span><br></pre></td></tr></table></figure></li><li><p>修改module、software文件夹的所有者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown dik:dik module/ software/</span><br></pre></td></tr></table></figure></li></ul><h2 id="安装JDK以及配置环境变量"><a href="#安装JDK以及配置环境变量" class="headerlink" title="安装JDK以及配置环境变量"></a>安装JDK以及配置环境变量</h2><h3 id="卸载现有JDK"><a href="#卸载现有JDK" class="headerlink" title="卸载现有JDK"></a>卸载现有JDK</h3><ul><li>查询是否安装Java软件：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep java</span><br></pre></td></tr></table></figure></li><li>用Xshell工具将JDK导入到opt目录下面的software文件夹下面</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20181209174120.png" alt=""></p><ul><li>在Linux系统下的opt目录中查看软件包是否导入成功</li></ul><h3 id="解压JDK到-opt-module目录下"><a href="#解压JDK到-opt-module目录下" class="headerlink" title="解压JDK到/opt/module目录下"></a>解压JDK到/opt/module目录下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-11.0.1_linux-x64_bin.tar.gz -C /opt/module/</span><br></pre></td></tr></table></figure><h3 id="配置JDK环境变量"><a href="#配置JDK环境变量" class="headerlink" title="配置JDK环境变量"></a>配置JDK环境变量</h3><ul><li>先获取JDK路径<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[dik@hadoop102 jdk-11.0.1]$ pwd</span><br><span class="line">/opt/module/jdk-11.0.1</span><br></pre></td></tr></table></figure></li><li>打开/etc/profile文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure></li><li>在profile文件末尾添加JDK路径<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/module/jdk-11.0.1</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20181209174802.png" alt=""></p><ul><li>让修改后的文件生效<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li>测试JDK是否安装成功<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20181209174957.png" alt=""></li></ul><h2 id="安装Hadoop以及配置环境变量"><a href="#安装Hadoop以及配置环境变量" class="headerlink" title="安装Hadoop以及配置环境变量"></a>安装Hadoop以及配置环境变量</h2><p>Hadoop下载地址：<br><a href="https://archive.apache.org/dist/hadoop/common/hadoop-2.7.7/">https://archive.apache.org/dist/hadoop/common/hadoop-2.7.7/</a><br>也可以在官网直接下载。</p><h3 id="导入Hadoop软件包"><a href="#导入Hadoop软件包" class="headerlink" title="导入Hadoop软件包"></a>导入Hadoop软件包</h3><p>用Xshell工具将hadoop-2.7.7.tar.gz导入到opt目录下面的software文件夹下面</p><h3 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h3><ul><li>进入到Hadoop安装包路径下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/software/</span><br></pre></td></tr></table></figure></li><li>解压安装文件到/opt/module下面<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf hadoop-2.7.7.tar.gz -C /opt/module/</span><br></pre></td></tr></table></figure></li></ul><h3 id="将Hadoop添加到环境变量"><a href="#将Hadoop添加到环境变量" class="headerlink" title="将Hadoop添加到环境变量"></a>将Hadoop添加到环境变量</h3><ul><li>获取Hadoop安装路径<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[dik@hadoop102 module]$ cd hadoop-2.7.7/</span><br><span class="line">[dik@hadoop102 hadoop-2.7.7]$ pwd</span><br><span class="line">/opt/module/hadoop-2.7.7</span><br></pre></td></tr></table></figure></li><li>打开/etc/profile文件,在profile文件末尾添加hadoop路径<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">##HADOOP_HOME</span><br><span class="line">export HADOOP_HOME=/opt/module/hadoop-2.7.7</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure></li><li>让修改后的文件生效<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li>测试是否安装成功<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[dik@hadoop102 hadoop-2.7.7]$ hadoop version</span><br><span class="line">Hadoop 2.7.7</span><br><span class="line">Subversion Unknown -r c1aad84bd27cd79c3d1a7dd58202a8c3ee1ed3ac</span><br><span class="line">Compiled by stevel on 2018-07-18T22:47Z</span><br><span class="line">Compiled with protoc 2.5.0</span><br><span class="line">From source with checksum 792e15d20b12c74bd6f19a1fb886490</span><br><span class="line">This command was run using /opt/module/hadoop-2.7.7/share/hadoop/common/hadoop-common-2.7.7.jar</span><br></pre></td></tr></table></figure><h2 id="Hadoop目录结构"><a href="#Hadoop目录结构" class="headerlink" title="Hadoop目录结构"></a>Hadoop目录结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[dik@hadoop102 hadoop-2.7.7]$ ll</span><br><span class="line">total 116</span><br><span class="line">drwxr-xr-x. 2 dik dik   194 Dec  6 23:56 bin</span><br><span class="line">drwxrwxr-x. 3 dik dik    17 Dec  7 22:50 data</span><br><span class="line">drwxr-xr-x. 3 dik dik    20 Dec  6 23:56 etc</span><br><span class="line">drwxr-xr-x. 2 dik dik   106 Dec  6 23:56 include</span><br><span class="line">drwxrwxr-x. 2 dik dik   187 Dec  6 23:58 input</span><br><span class="line">drwxr-xr-x. 3 dik dik    20 Dec  6 23:56 lib</span><br><span class="line">drwxr-xr-x. 2 dik dik   239 Dec  6 23:56 libexec</span><br><span class="line">-rw-r--r--. 1 dik dik 86424 Dec  6 23:56 LICENSE.txt</span><br><span class="line">drwxrwxr-x. 3 dik dik  4096 Dec  9 09:40 logs</span><br><span class="line">-rw-r--r--. 1 dik dik 14978 Dec  6 23:56 NOTICE.txt</span><br><span class="line">drwxrwxr-x. 2 dik dik    88 Dec  6 23:58 output</span><br><span class="line">-rw-r--r--. 1 dik dik  1366 Dec  6 23:56 README.txt</span><br><span class="line">drwxr-xr-x. 2 dik dik  4096 Dec  8 00:37 sbin</span><br><span class="line">drwxr-xr-x. 4 dik dik    31 Dec  6 23:57 share</span><br></pre></td></tr></table></figure><h3 id="重要目录"><a href="#重要目录" class="headerlink" title="重要目录"></a>重要目录</h3>（1）bin目录：存放对Hadoop相关服务（HDFS,YARN）进行操作的脚本<br>（2）etc目录：Hadoop的配置文件目录，存放Hadoop的配置文件<br>（3）lib目录：存放Hadoop的本地库（对数据进行压缩解压缩功能）<br>（4）sbin目录：存放启动或停止Hadoop相关服务的脚本<br>（5）share目录：存放Hadoop的依赖jar包、文档、和官方案例</li></ul><h2 id="本地模式运行Hadoop"><a href="#本地模式运行Hadoop" class="headerlink" title="本地模式运行Hadoop"></a>本地模式运行Hadoop</h2><h3 id="官方Grep案例"><a href="#官方Grep案例" class="headerlink" title="官方Grep案例"></a>官方Grep案例</h3><ul><li>创建在hadoop-2.7.7文件下面创建一个input文件夹<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir input</span><br></pre></td></tr></table></figure></li><li>将Hadoop的xml配置文件复制到input<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp etc/hadoop/*.xml input</span><br></pre></td></tr></table></figure></li><li>执行share目录下的MapReduce程序<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hadoop jar  share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.7.jar grep input output &#x27;dfs[a-z.]+&#x27;</span><br></pre></td></tr></table></figure></li><li>查看输出结果<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat output/*</span><br></pre></td></tr></table></figure><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20181209185510.png" alt=""></li></ul><p>到这里一个简单的Hadoop运行环境就搭建成功了！</p><hr />]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS224n笔记 自然语言处理与深度学习简介</title>
      <link href="/post/31fab984.html"/>
      <url>/post/31fab984.html</url>
      
        <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%" /><br>这是斯坦福CS224n的第一篇笔记，也是第一次系统地学习用深度学习来做自然语言处理。<br><span id="more"></span></p><h2 id="什么是自然语言处理"><a href="#什么是自然语言处理" class="headerlink" title="什么是自然语言处理"></a>什么是自然语言处理</h2><p>这是一门计算机科学、人工智能以及语言学的交叉学科。虽然语言只是人工智能的一部分（人工智能还包括计算机视觉等），但它是非常独特的一部分。这个星球上有许多生物拥有超过人类的视觉系统，但只有人类才拥有这么高级的语言。</p><p>自然语言处理的目标是让计算机处理或说“理解”自然语言，以完成有意义的任务，比如订机票购物或QA等。完全理解和表达语言是极其困难的，完美的语言理解等效于实现人工智能。</p><h3 id="自然语言处理涉及的几个层次"><a href="#自然语言处理涉及的几个层次" class="headerlink" title="自然语言处理涉及的几个层次"></a>自然语言处理涉及的几个层次</h3><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181111/1hAAbhCihJ.png?imageslim" alt="mark"></p><p>作为输入一共有两个来源，语音与文本。所以第一级是语音识别和OCR或分词（事实上，跳过分词虽然理所当然地不能做句法分析，但字符级也可以直接做不少应用）。接下来是形态学，援引《统计自然语言处理》中的定义：<br>形态学（morphology）：形态学（又称“词汇形态学”或“词法”）是语言学的一个分支，研究词的内部结构，包括屈折变化和构词法两个部分。由于词具有语音特征、句法特征和语义特征，形态学处于音位学、句法学和语义学的结合部位，所以形态学是每个语言学家都要关注的一门学科［Matthews,2000］。<br>下面的是句法分析和语义分析，最后面的在中文中似乎翻译做“对话分析”，需要根据上文语境理解下文。</p><p>这门课主要关注画圈的三个部分，其中中间的两个是重中之重，虽然深度学习在语音识别上的发力最大。</p><h3 id="自然语言处理应用"><a href="#自然语言处理应用" class="headerlink" title="自然语言处理应用"></a>自然语言处理应用</h3><p>一个小子集，从简单到复杂有：</p><ul><li>拼写检查、关键词检索……</li><li>文本挖掘（产品价格、日期、时间、地点、人名、公司名）</li><li>文本分类</li><li>机器翻译</li><li>客服系统</li><li>复杂对话系统</li></ul><p>在工业界从搜索到广告投放、自动\辅助翻译、情感舆情分析、语音识别、聊天机器人\管家等等五花八门。</p><h3 id="人类语言的特殊之处"><a href="#人类语言的特殊之处" class="headerlink" title="人类语言的特殊之处"></a>人类语言的特殊之处</h3><p>与信号处理、数据挖掘不同，自然语言的随机性小而目的性强；语言是用来传输有意义的信息的，这种传输连小孩子都能很快学会。人类语言是离散的、明确的符号系统。但又允许出现各种变种，比如颜文字，随意的错误拼写“I loooove it”。这种自由性可能是因为语言的可靠性（赘余性）。所以说语言文字绝对不是形式逻辑或传统AI的产物。</p><p>语言符号有多种形式（声音、手势、书写），在这些不同的形式中，其意义保持不变：</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181111/kbKKIc7DL1.png?imageslim" alt="mark"></p><p>虽然人类语言是明确的符号系统，但符号传输到大脑的过程是通过连续的声学光学信号，大脑编码似乎是连续的激活值上的模式。另外巨大的词表也导致数据稀疏，不利于机器学习。这构成一种动机，是不是应该用连续的信号而不是离散的符号去处理语言。</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181111/1AECLm4IIB.png?imageslim" alt="mark"></p><h2 id="什么是深度学习"><a href="#什么是深度学习" class="headerlink" title="什么是深度学习"></a>什么是深度学习</h2><p>这是机器学习的一个子集。传统机器学习中，人类需要对专业问题理解非常透彻，才能手工设计特征。比如地名和机构名识别的特征模板：</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181111/9LHAFLk7B9.png?imageslim" alt="mark"></p><p>然后把特征交给某个机器学习算法，比如线性分类器。机器为这些特征调整找到合适的权值，将误差优化到最小。<br>在这个过程中一直在学习的其实是人类，而不是机器。机器仅仅做了一道数值优化的题目而已。<br>下面这张图很好地展示了这个过程中的比例：</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181111/75hF5GfEbH.png?imageslim" alt="mark"></p><p>而深度学习是表示学习的一部分，用来学习原始输入的多层特征表示：</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181111/Ghe5IafCEF.png?imageslim" alt="mark"></p><h2 id="为什么NLP难"><a href="#为什么NLP难" class="headerlink" title="为什么NLP难"></a>为什么NLP难</h2><p>人类语言是充满歧义的，不像编程语言那样明确。编程语言中有各种变量名，但人类语言中只有少数几个代词可以用，你得思考到底指代的是谁……</p><p>人类语言的解读依赖于现实世界、常识以及上下文。由于说话速度书写速度阅读速度的限制，人类语言非常简练，省略了大量背景知识。</p><h2 id="Deep-NLP-Deep-Learning-NLP"><a href="#Deep-NLP-Deep-Learning-NLP" class="headerlink" title="Deep NLP = Deep Learning + NLP"></a>Deep NLP = Deep Learning + NLP</h2><p>将自然语言处理的思想与表示学习结合起来，用深度学习的手法解决NLP目标。这提高了许多方面的效果：</p><ul><li>层次：语音、词汇、语法、语义</li><li>工具：词性标注、命名实体识别、句法\语义分析</li><li>应用：机器翻译、情感分析、客服系统、问答系统</li></ul><p>深度学习的一个魅力之处是，它提供了一套“宇宙通用”的框架解决了各种问题。虽然工具就那么几个，但在各行各业都适用。</p><h3 id="NLP表示层次：形态级别"><a href="#NLP表示层次：形态级别" class="headerlink" title="NLP表示层次：形态级别"></a>NLP表示层次：形态级别</h3><p>传统方法在形态级别的表示是词素：</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181112/4FhDDl1gik.png?imageslim" alt="mark"></p><p>深度学习中把词素也作为向量：</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181112/flch5ek6gj.png?imageslim" alt="mark"></p><p>多个词素向量构成相同纬度语义更丰富的词向量。</p><h3 id="NLP工具：句法分析"><a href="#NLP工具：句法分析" class="headerlink" title="NLP工具：句法分析"></a>NLP工具：句法分析</h3><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181112/953EejHdL4.png?imageslim" alt="mark"></p><h3 id="NLP语义层面的表示"><a href="#NLP语义层面的表示" class="headerlink" title="NLP语义层面的表示"></a>NLP语义层面的表示</h3><p>传统方法是手写大量的规则函数，叫做Lambda calculus：</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181112/F5k3IK8Bca.png?imageslim" alt="mark"></p><p>在深度学习中，每个句子、短语和逻辑表述都是向量。神经网络负责它们的合并。</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181112/jhBmc2ddED.png?imageslim" alt="mark"></p><h3 id="情感分析"><a href="#情感分析" class="headerlink" title="情感分析"></a>情感分析</h3><p>传统方法是请一两百个工人，手工搜集“情感极性词典”在词袋模型上做分类器。</p><p>深度学习复用了RNN来解决这个问题，它可以识别“反话”的情感极性：</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181112/fKIb87DdkD.png?imageslim" alt="mark"></p><p>注意这只是为了方便理解的示意图，并不是RNN的工作流程。私以为这张图放在这里不合适，可能会误导一部分人，以为神经网络就是这样的基于规则的“决策树”模型。</p><h3 id="客服系统"><a href="#客服系统" class="headerlink" title="客服系统"></a>客服系统</h3><p>最著名的例子得数GMail的自动回复：</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181112/BhhG1CaI8A.png?imageslim" alt="mark"></p><p>这是Neural Language Models的又一次成功应用，Neural Language Models是基于RNN的：</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181112/ef4LC6FBG1.png?imageslim" alt="mark"></p><h3 id="机器翻译"><a href="#机器翻译" class="headerlink" title="机器翻译"></a>机器翻译</h3><p>传统方法在许多层级上做了尝试，词语、语法、语义之类。这类方法试图找到一种世界通用的“国际语”（Interlingua）来作为原文和译文的桥梁。</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181112/26CfkGEekE.png?imageslim" alt="mark"></p><p>而Neural Machine Translation将原文映射为向量，由向量构建译文。也许可以说Neural Machine Translation的“国际语”是向量。</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181112/EFFK2L4liE.png?imageslim" alt="mark"></p><h2 id="结论：所有层级的表示都是向量"><a href="#结论：所有层级的表示都是向量" class="headerlink" title="结论：所有层级的表示都是向量"></a>结论：所有层级的表示都是向量</h2><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181112/bdGC8aC2jB.png?imageslim" alt="mark"></p><p>这可能是因为向量是最灵活的形式，它的维度是自由的，它可以组合成矩阵，或者更高阶的Tensor。事实上，在实践的时候向量和矩阵没什么本质区别，经常看到为了效率或单纯的美观而pack成矩阵unroll成向量的操作。</p><hr />]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电力消耗预测</title>
      <link href="/post/51fc5756.html"/>
      <url>/post/51fc5756.html</url>
      
        <content type="html"><![CDATA[<p><p class="description"></p><br><img src="https://" alt="" style="width:100%" /></p><span id="more"></span><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>企业用电需求预测一直是电力市场营销活动业务难点，大数据与云计算、人工智能等新技术相结合，给传统行业转型升级带来了新的机遇和思考。本项目主要用到开放扬中市高新区1000多家企业的历史用电量数据，通过模型算法预测该地区下一个月的每日总用电量。</p><h2 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h2><p>本项目主要用到开放扬中市高新区1000多家企业的历史用电量数据，直接在官网下载csv文件即可。</p><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190307112734.png" alt=""><br>从上面的图可以看到，原始数据主要由3个维度组成：user_id,record_date,power_consumption,分别对应企业ID，日期以及用电量</p><h3 id="日期格式转换"><a href="#日期格式转换" class="headerlink" title="日期格式转换"></a>日期格式转换</h3><p>因为原数据的日期是strting类型，所以我们需要把它格式转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;电力数据power_AI.csv&#x27;</span>)</span><br><span class="line">df = pd.read_csv(f)</span><br><span class="line">df[<span class="string">&#x27;record_date&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;record_date&#x27;</span>])</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190307113458.png" alt=""></p><h3 id="统计每日均值"><a href="#统计每日均值" class="headerlink" title="统计每日均值"></a>统计每日均值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">base_df = df[[&#x27;record_date&#x27;,&#x27;power_consumption&#x27;]].groupby(by=&#x27;record_date&#x27;).agg(&#x27;sum&#x27;)</span><br><span class="line">base_df = base_df.reset_index()</span><br><span class="line">base_df.head()</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190307114750.png" alt=""></p><h2 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h2><p>因为数据只有3个维度，可能会造成欠拟合的情况，所以我们利用日期构建一些特征。</p><h3 id="增加日期特征"><a href="#增加日期特征" class="headerlink" title="增加日期特征"></a>增加日期特征</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">base_df[<span class="string">&#x27;dow&#x27;</span>] = base_df[<span class="string">&#x27;record_date&#x27;</span>].apply(<span class="keyword">lambda</span> x: x.dayofweek)</span><br><span class="line">base_df[<span class="string">&#x27;doy&#x27;</span>] = base_df[<span class="string">&#x27;record_date&#x27;</span>].apply(<span class="keyword">lambda</span> x: x.dayofyear)</span><br><span class="line">base_df[<span class="string">&#x27;day&#x27;</span>] = base_df[<span class="string">&#x27;record_date&#x27;</span>].apply(<span class="keyword">lambda</span> x: x.day)</span><br><span class="line">base_df[<span class="string">&#x27;month&#x27;</span>] = base_df[<span class="string">&#x27;record_date&#x27;</span>].apply(<span class="keyword">lambda</span> x: x.month)</span><br><span class="line">base_df[<span class="string">&#x27;year&#x27;</span>] = base_df[<span class="string">&#x27;record_date&#x27;</span>].apply(<span class="keyword">lambda</span> x: x.year)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">map_season</span>(<span class="params">month</span>):</span><br><span class="line">    month_dic = &#123;<span class="number">1</span>:<span class="number">1</span>, <span class="number">2</span>:<span class="number">1</span>, <span class="number">3</span>:<span class="number">2</span>, <span class="number">4</span>:<span class="number">2</span>, <span class="number">5</span>:<span class="number">3</span>, <span class="number">6</span>:<span class="number">3</span>, <span class="number">7</span>:<span class="number">3</span>, <span class="number">8</span>:<span class="number">3</span>, <span class="number">9</span>:<span class="number">3</span>, <span class="number">10</span>:<span class="number">4</span>, <span class="number">11</span>:<span class="number">4</span>, <span class="number">12</span>:<span class="number">1</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> month_dic[month]</span><br><span class="line"></span><br><span class="line">base_df[<span class="string">&#x27;season&#x27;</span>] = base_df[<span class="string">&#x27;month&#x27;</span>].apply(<span class="keyword">lambda</span> x: map_season(x))</span><br><span class="line">base_df.head()</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190307120806.png" alt=""></p><h3 id="增加月度特征"><a href="#增加月度特征" class="headerlink" title="增加月度特征"></a>增加月度特征</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">base_df_stats = new_df = base_df[[<span class="string">&#x27;power_consumption&#x27;</span>,<span class="string">&#x27;year&#x27;</span>,<span class="string">&#x27;month&#x27;</span>]].groupby(by=[<span class="string">&#x27;year&#x27;</span>, <span class="string">&#x27;month&#x27;</span>]).agg([<span class="string">&#x27;mean&#x27;</span>, <span class="string">&#x27;std&#x27;</span>])</span><br><span class="line">base_df_stats.columns = base_df_stats.columns.droplevel(<span class="number">0</span>)</span><br><span class="line">base_df_stats = base_df_stats.reset_index()</span><br><span class="line">base_df_stats[<span class="string">&#x27;1_m_mean&#x27;</span>] = base_df_stats[<span class="string">&#x27;mean&#x27;</span>].shift(<span class="number">1</span>)</span><br><span class="line">base_df_stats[<span class="string">&#x27;2_m_mean&#x27;</span>] = base_df_stats[<span class="string">&#x27;mean&#x27;</span>].shift(<span class="number">2</span>)</span><br><span class="line">base_df_stats[<span class="string">&#x27;1_m_std&#x27;</span>] = base_df_stats[<span class="string">&#x27;std&#x27;</span>].shift(<span class="number">1</span>)</span><br><span class="line">base_df_stats[<span class="string">&#x27;2_m_std&#x27;</span>] = base_df_stats[<span class="string">&#x27;std&#x27;</span>].shift(<span class="number">2</span>)</span><br><span class="line">base_df_stats.head()</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190307141849.png" alt=""></p><h3 id="相关性检测"><a href="#相关性检测" class="headerlink" title="相关性检测"></a>相关性检测</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">sns.set_style(<span class="string">&#x27;darkgrid&#x27;</span>) <span class="comment">#设定绘图的背景样式</span></span><br><span class="line">sns.set_palette(<span class="string">&#x27;muted&#x27;</span>) <span class="comment">#设定图表的颜色板</span></span><br><span class="line">plt.style.use(<span class="string">&#x27;ggplot&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> mpl</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;FangSong&#x27;</span>] <span class="comment"># 指定默认字体</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span> <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题</span></span><br><span class="line">corrmat = data_df[internal_chars].corr() <span class="comment">#计算相关系数</span></span><br><span class="line">f , ax = plt.subplots(figsize = (<span class="number">10</span>,<span class="number">6</span>)) <span class="comment">#设置图标尺寸大小</span></span><br><span class="line">plt.xticks(rotation = <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">sns.heatmap(corrmat, square=<span class="literal">False</span>, linewidths=<span class="number">.8</span>, annot=<span class="literal">True</span>) <span class="comment">#设置热力图参数</span></span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190307143807.png" alt=""></p><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><h3 id="企业与用电量的关系"><a href="#企业与用电量的关系" class="headerlink" title="企业与用电量的关系"></a>企业与用电量的关系</h3><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190307144905.png" alt=""><br>可以看到ID为1416,174,175的企业用电量很大<br>如果有必要可以把这3个企业单独分为1类做处理。</p><h3 id="时间维度与用电量的关系"><a href="#时间维度与用电量的关系" class="headerlink" title="时间维度与用电量的关系"></a>时间维度与用电量的关系</h3><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190307150205.png" alt=""><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190307150226.png" alt=""><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190307150238.png" alt=""><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190307150250.png" alt=""><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190307150302.png" alt=""></p><h2 id="数据建模"><a href="#数据建模" class="headerlink" title="数据建模"></a>数据建模</h2><p>在这个项目中，我们主要用到XGboost这个算法模型</p><h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><p>首先我们用模型默认的参数进行预测<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">df_finall = pd.read_excel(<span class="string">&#x27;data_all.xlsx&#x27;</span>,sheet_name=<span class="string">&#x27;V2&#x27;</span>)<span class="comment">#加载数据</span></span><br><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> KFold, train_test_split</span><br><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> KFold, train_test_split</span><br><span class="line">X = df_finall.iloc[:,<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line">X[[<span class="string">&#x27;dow&#x27;</span>,<span class="string">&#x27;doy&#x27;</span>,<span class="string">&#x27;day&#x27;</span>,<span class="string">&#x27;month&#x27;</span>,<span class="string">&#x27;year&#x27;</span>,<span class="string">&#x27;season&#x27;</span>]] = X[[<span class="string">&#x27;dow&#x27;</span>,<span class="string">&#x27;doy&#x27;</span>,<span class="string">&#x27;day&#x27;</span>,<span class="string">&#x27;month&#x27;</span>,<span class="string">&#x27;year&#x27;</span>,<span class="string">&#x27;season&#x27;</span>]]\</span><br><span class="line">.astype(<span class="built_in">str</span>)</span><br><span class="line">y = df_finall.iloc[:,-<span class="number">1</span>]</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X.values, y.values, test_size=<span class="number">0.3</span>)</span><br><span class="line">xgb1 = XGBRegressor()</span><br><span class="line">xgb1.fit(X_train,y_train)</span><br><span class="line">test_predictions = xgb1.predict(X_test)</span><br><span class="line">r2 = metrics.r2_score(y_test, test_predictions)</span><br><span class="line">r2</span><br></pre></td></tr></table></figure><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/20190307152339.png" alt=""></p><h3 id="参数微调"><a href="#参数微调" class="headerlink" title="参数微调"></a>参数微调</h3><p>因为XGBoost自带的参数较多，所以我们采用网格搜索的方式对参数进行微调。</p><ul><li>Step 1: 选择一组初始参数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xgb1 = XGBRegressor(eta=<span class="number">0.01</span>, num_boost_round=<span class="number">50</span>, colsample_bytree=<span class="number">0.5</span>, subsample=<span class="number">0.5</span>,objective=<span class="string">&#x27;reg:linear&#x27;</span>,seed=<span class="number">27</span>)</span><br></pre></td></tr></table></figure></li><li>Step 2: 改变 <code>max_depth</code> 和 <code>min_child_weight</code>.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xgb_param_grid = &#123;<span class="string">&#x27;max_depth&#x27;</span>: <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">4</span>,<span class="number">9</span>)), <span class="string">&#x27;min_child_weight&#x27;</span>: <span class="built_in">list</span>((<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>))&#125;</span><br><span class="line">grid = GridSearchCV(XGBRegressor(eta=<span class="number">0.01</span>, num_boost_round=<span class="number">50</span>, colsample_bytree=<span class="number">0.5</span>, subsample=<span class="number">0.5</span>,objective=<span class="string">&#x27;reg:linear&#x27;</span>,seed=<span class="number">27</span>),</span><br><span class="line">                param_grid=xgb_param_grid, cv=<span class="number">5</span>)</span><br><span class="line">grid.fit(X_train, y_train)</span><br><span class="line">grid.grid_scores_, grid.best_params_, grid.best_score_</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">([mean: 0.66566, std: 0.11042, params: &#123;&#x27;max_depth&#x27;: 4, &#x27;min_child_weight&#x27;: 1&#125;,</span><br><span class="line">  mean: 0.65945, std: 0.10346, params: &#123;&#x27;max_depth&#x27;: 4, &#x27;min_child_weight&#x27;: 3&#125;,</span><br><span class="line">  mean: 0.65507, std: 0.08334, params: &#123;&#x27;max_depth&#x27;: 4, &#x27;min_child_weight&#x27;: 6&#125;,</span><br><span class="line">  mean: 0.67838, std: 0.09230, params: &#123;&#x27;max_depth&#x27;: 5, &#x27;min_child_weight&#x27;: 1&#125;,</span><br><span class="line">  mean: 0.65974, std: 0.09295, params: &#123;&#x27;max_depth&#x27;: 5, &#x27;min_child_weight&#x27;: 3&#125;,</span><br><span class="line">  mean: 0.65113, std: 0.08137, params: &#123;&#x27;max_depth&#x27;: 5, &#x27;min_child_weight&#x27;: 6&#125;,</span><br><span class="line">  mean: 0.68250, std: 0.08758, params: &#123;&#x27;max_depth&#x27;: 6, &#x27;min_child_weight&#x27;: 1&#125;,</span><br><span class="line">  mean: 0.66546, std: 0.10096, params: &#123;&#x27;max_depth&#x27;: 6, &#x27;min_child_weight&#x27;: 3&#125;,</span><br><span class="line">  mean: 0.65293, std: 0.09142, params: &#123;&#x27;max_depth&#x27;: 6, &#x27;min_child_weight&#x27;: 6&#125;,</span><br><span class="line">  mean: 0.67734, std: 0.08246, params: &#123;&#x27;max_depth&#x27;: 7, &#x27;min_child_weight&#x27;: 1&#125;,</span><br><span class="line">  mean: 0.66691, std: 0.09677, params: &#123;&#x27;max_depth&#x27;: 7, &#x27;min_child_weight&#x27;: 3&#125;,</span><br><span class="line">  mean: 0.66142, std: 0.08414, params: &#123;&#x27;max_depth&#x27;: 7, &#x27;min_child_weight&#x27;: 6&#125;,</span><br><span class="line">  mean: 0.67381, std: 0.11030, params: &#123;&#x27;max_depth&#x27;: 8, &#x27;min_child_weight&#x27;: 1&#125;,</span><br><span class="line">  mean: 0.67931, std: 0.09550, params: &#123;&#x27;max_depth&#x27;: 8, &#x27;min_child_weight&#x27;: 3&#125;,</span><br><span class="line">  mean: 0.66090, std: 0.08821, params: &#123;&#x27;max_depth&#x27;: 8, &#x27;min_child_weight&#x27;: 6&#125;],</span><br><span class="line"> &#123;&#x27;max_depth&#x27;: 6, &#x27;min_child_weight&#x27;: 1&#125;,</span><br><span class="line"> 0.6825025931707269)</span><br></pre></td></tr></table></figure>网格搜索发现的最佳结果:<br>{‘max_depth’: 6, ‘min_child_weight’: 1}</li><li>Step 3: 调节 <code>gamma</code> 降低模型过拟合风险.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xgb_param_grid = &#123;<span class="string">&#x27;gamma&#x27;</span>:[ <span class="number">0.01</span> * i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">5</span>)]&#125;</span><br><span class="line">grid = GridSearchCV(XGBRegressor(eta=<span class="number">0.01</span>, num_boost_round=<span class="number">50</span>, colsample_bytree=<span class="number">0.5</span>, subsample=<span class="number">0.5</span>,objective=<span class="string">&#x27;reg:linear&#x27;</span>,seed=<span class="number">27</span>,max_depth=<span class="number">7</span>,min_child_weight=<span class="number">1</span>),</span><br><span class="line">                param_grid=xgb_param_grid, cv=<span class="number">5</span>)</span><br><span class="line">grid.fit(X_train, y_train)</span><br><span class="line">grid.grid_scores_, grid.best_params_, grid.best_score_</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">([mean: 0.67462, std: 0.09512, params: &#123;&#x27;gamma&#x27;: 0.0&#125;,</span><br><span class="line">  mean: 0.67462, std: 0.09512, params: &#123;&#x27;gamma&#x27;: 0.01&#125;,</span><br><span class="line">  mean: 0.67462, std: 0.09512, params: &#123;&#x27;gamma&#x27;: 0.02&#125;,</span><br><span class="line">  mean: 0.67462, std: 0.09512, params: &#123;&#x27;gamma&#x27;: 0.03&#125;,</span><br><span class="line">  mean: 0.67462, std: 0.09512, params: &#123;&#x27;gamma&#x27;: 0.04&#125;],</span><br><span class="line"> &#123;&#x27;gamma&#x27;: 0.0&#125;,</span><br><span class="line"> 0.6746192263207629)</span><br></pre></td></tr></table></figure>网格搜索发现的最佳结果:<br>{‘gamma’: 0.0}</li><li>Step 4: 调节 <code>subsample</code> 和 <code>colsample_bytree</code> 改变数据采样策略.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xgb_param_grid = &#123;<span class="string">&#x27;subsample&#x27;</span>:[ <span class="number">0.1</span> * i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>,<span class="number">10</span>)],</span><br><span class="line">                      <span class="string">&#x27;colsample_bytree&#x27;</span>:[ <span class="number">0.1</span> * i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>,<span class="number">10</span>)]&#125;</span><br><span class="line">grid = GridSearchCV(XGBRegressor(eta=<span class="number">0.01</span>, num_boost_round=<span class="number">50</span>, colsample_bytree=<span class="number">0.5</span>, subsample=<span class="number">0.5</span>,objective=<span class="string">&#x27;reg:linear&#x27;</span>,seed=<span class="number">27</span>,max_depth=<span class="number">7</span>,</span><br><span class="line">                                 min_child_weight=<span class="number">1</span>,gamma=<span class="number">0</span>),</span><br><span class="line">                param_grid=xgb_param_grid, cv=<span class="number">5</span>)</span><br><span class="line">grid.fit(X_train, y_train)</span><br><span class="line">grid.grid_scores_, grid.best_params_, grid.best_score_</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">([mean: 0.67014, std: 0.13270, params: &#123;&#x27;colsample_bytree&#x27;: 0.6000000000000001, &#x27;subsample&#x27;: 0.6000000000000001&#125;,</span><br><span class="line">  mean: 0.67302, std: 0.10802, params: &#123;&#x27;colsample_bytree&#x27;: 0.6000000000000001, &#x27;subsample&#x27;: 0.7000000000000001&#125;,</span><br><span class="line">  mean: 0.66858, std: 0.11634, params: &#123;&#x27;colsample_bytree&#x27;: 0.6000000000000001, &#x27;subsample&#x27;: 0.8&#125;,</span><br><span class="line">  mean: 0.67034, std: 0.11901, params: &#123;&#x27;colsample_bytree&#x27;: 0.6000000000000001, &#x27;subsample&#x27;: 0.9&#125;,</span><br><span class="line">  mean: 0.66074, std: 0.12567, params: &#123;&#x27;colsample_bytree&#x27;: 0.7000000000000001, &#x27;subsample&#x27;: 0.6000000000000001&#125;,</span><br><span class="line">  mean: 0.67163, std: 0.11620, params: &#123;&#x27;colsample_bytree&#x27;: 0.7000000000000001, &#x27;subsample&#x27;: 0.7000000000000001&#125;,</span><br><span class="line">  mean: 0.67011, std: 0.11888, params: &#123;&#x27;colsample_bytree&#x27;: 0.7000000000000001, &#x27;subsample&#x27;: 0.8&#125;,</span><br><span class="line">  mean: 0.67345, std: 0.10611, params: &#123;&#x27;colsample_bytree&#x27;: 0.7000000000000001, &#x27;subsample&#x27;: 0.9&#125;,</span><br><span class="line">  mean: 0.67388, std: 0.11610, params: &#123;&#x27;colsample_bytree&#x27;: 0.8, &#x27;subsample&#x27;: 0.6000000000000001&#125;,</span><br><span class="line">  mean: 0.67462, std: 0.10752, params: &#123;&#x27;colsample_bytree&#x27;: 0.8, &#x27;subsample&#x27;: 0.7000000000000001&#125;,</span><br><span class="line">  mean: 0.68473, std: 0.10995, params: &#123;&#x27;colsample_bytree&#x27;: 0.8, &#x27;subsample&#x27;: 0.8&#125;,</span><br><span class="line">  mean: 0.69456, std: 0.08956, params: &#123;&#x27;colsample_bytree&#x27;: 0.8, &#x27;subsample&#x27;: 0.9&#125;,</span><br><span class="line">  mean: 0.66677, std: 0.11420, params: &#123;&#x27;colsample_bytree&#x27;: 0.9, &#x27;subsample&#x27;: 0.6000000000000001&#125;,</span><br><span class="line">  mean: 0.66556, std: 0.10918, params: &#123;&#x27;colsample_bytree&#x27;: 0.9, &#x27;subsample&#x27;: 0.7000000000000001&#125;,</span><br><span class="line">  mean: 0.67706, std: 0.11681, params: &#123;&#x27;colsample_bytree&#x27;: 0.9, &#x27;subsample&#x27;: 0.8&#125;,</span><br><span class="line">  mean: 0.67529, std: 0.11429, params: &#123;&#x27;colsample_bytree&#x27;: 0.9, &#x27;subsample&#x27;: 0.9&#125;],</span><br><span class="line"> &#123;&#x27;colsample_bytree&#x27;: 0.8, &#x27;subsample&#x27;: 0.9&#125;,</span><br><span class="line"> 0.6945571414092301)</span><br></pre></td></tr></table></figure>网格搜索发现的最佳结果:<br>{‘colsample_bytree’: 0.8, ‘subsample’: 0.9}</li><li>Step 5: 调节学习率 <code>learning_rate</code>.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xgb_param_grid = &#123;<span class="string">&#x27;learning_rate&#x27;</span>:[<span class="number">0.6</span>,<span class="number">0.5</span>,<span class="number">0.4</span>,<span class="number">0.3</span>,<span class="number">0.2</span>,<span class="number">0.1</span>,<span class="number">0.01</span>,<span class="number">0.001</span>]&#125;</span><br><span class="line">grid = GridSearchCV(XGBRegressor( num_boost_round=<span class="number">50</span>,objective=<span class="string">&#x27;reg:linear&#x27;</span>,seed=<span class="number">27</span>,max_depth=<span class="number">7</span>,</span><br><span class="line">                                 min_child_weight=<span class="number">1</span>,gamma=<span class="number">0</span>,colsample_bytree=<span class="number">0.8</span>,subsample=<span class="number">0.9</span>),param_grid=xgb_param_grid, cv=<span class="number">5</span>)</span><br><span class="line">grid.fit(X_train, y_train)</span><br><span class="line">grid.grid_scores_, grid.best_params_, grid.best_score_</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">([mean: 0.56345, std: 0.18185, params: &#123;&#x27;learning_rate&#x27;: 0.6&#125;,</span><br><span class="line">  mean: 0.60402, std: 0.16560, params: &#123;&#x27;learning_rate&#x27;: 0.5&#125;,</span><br><span class="line">  mean: 0.67215, std: 0.13258, params: &#123;&#x27;learning_rate&#x27;: 0.4&#125;,</span><br><span class="line">  mean: 0.63116, std: 0.13087, params: &#123;&#x27;learning_rate&#x27;: 0.3&#125;,</span><br><span class="line">  mean: 0.62305, std: 0.16146, params: &#123;&#x27;learning_rate&#x27;: 0.2&#125;,</span><br><span class="line">  mean: 0.69456, std: 0.08956, params: &#123;&#x27;learning_rate&#x27;: 0.1&#125;,</span><br><span class="line">  mean: -12.66985, std: 4.34214, params: &#123;&#x27;learning_rate&#x27;: 0.01&#125;,</span><br><span class="line">  mean: -77.40167, std: 26.16110, params: &#123;&#x27;learning_rate&#x27;: 0.001&#125;],</span><br><span class="line"> &#123;&#x27;learning_rate&#x27;: 0.1&#125;,</span><br><span class="line"> 0.6945571414092301)</span><br></pre></td></tr></table></figure>网格搜索发现的最佳结果:<br>{‘learning_rate’: 0.1}</li><li>step 6:调节<code>n_estimators</code>的棵数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xgb_param_grid = &#123;<span class="string">&#x27;n_estimators&#x27;</span>:[<span class="number">50</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">400</span>,<span class="number">500</span>]&#125;</span><br><span class="line">grid = GridSearchCV(XGBRegressor( learning_rate=<span class="number">0.1</span>,objective=<span class="string">&#x27;reg:linear&#x27;</span>,seed=<span class="number">27</span>,max_depth=<span class="number">7</span>,</span><br><span class="line">                                 min_child_weight=<span class="number">1</span>,gamma=<span class="number">0</span>,colsample_bytree=<span class="number">0.8</span>,subsample=<span class="number">0.9</span>),param_grid=xgb_param_grid, cv=<span class="number">5</span>)</span><br><span class="line">grid.fit(X_train, y_train)</span><br><span class="line">grid.grid_scores_, grid.best_params_, grid.best_score_</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">([mean: 0.69015, std: 0.08067, params: &#123;&#x27;n_estimators&#x27;: 50&#125;,</span><br><span class="line">  mean: 0.69456, std: 0.08956, params: &#123;&#x27;n_estimators&#x27;: 100&#125;,</span><br><span class="line">  mean: 0.69296, std: 0.09306, params: &#123;&#x27;n_estimators&#x27;: 200&#125;,</span><br><span class="line">  mean: 0.69270, std: 0.09327, params: &#123;&#x27;n_estimators&#x27;: 300&#125;,</span><br><span class="line">  mean: 0.69269, std: 0.09334, params: &#123;&#x27;n_estimators&#x27;: 400&#125;,</span><br><span class="line">  mean: 0.69270, std: 0.09335, params: &#123;&#x27;n_estimators&#x27;: 500&#125;],</span><br><span class="line"> &#123;&#x27;n_estimators&#x27;: 100&#125;,</span><br><span class="line"> 0.6945571414092301)</span><br></pre></td></tr></table></figure>网格搜索发现的最佳结果:<br>{‘n_estimators’: 100}<br>模型最终的参数为：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">XGBRegressor( learning_rate=0.1,</span><br><span class="line">               objective=&#x27;reg:linear&#x27;,</span><br><span class="line">               seed=27,max_depth=7,</span><br><span class="line">               min_child_weight=1,</span><br><span class="line">               gamma=0,</span><br><span class="line">               colsample_bytree=0.8,</span><br><span class="line">               subsample=0.9)</span><br></pre></td></tr></table></figure>最终评分：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xgb3 = XGBRegressor( learning_rate=<span class="number">0.1</span>,objective=<span class="string">&#x27;reg:linear&#x27;</span>,seed=<span class="number">27</span>,max_depth=<span class="number">7</span>,</span><br><span class="line">                                 min_child_weight=<span class="number">1</span>,gamma=<span class="number">0</span>,colsample_bytree=<span class="number">0.8</span>,subsample=<span class="number">0.9</span>)</span><br><span class="line">xgb3.fit(X_train,y_train)</span><br><span class="line">test_predictions = xgb3.predict(X_test)</span><br><span class="line">r2 = metrics.r2_score(y_test, test_predictions)</span><br><span class="line">r2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.7133043132603486</span><br></pre></td></tr></table></figure><hr /></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习-决策树&amp;随机森林算法笔记与实战</title>
      <link href="/post/364f0264.html"/>
      <url>/post/364f0264.html</url>
      
        <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%" /></p><span id="more"></span><h2 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h2><ul><li>决策树：从根节点开始一步步走到叶子节点（决策）</li><li>所有的数据最终都会落到叶子节点，既可以做分类也可以做回归</li></ul><h3 id="树的组成"><a href="#树的组成" class="headerlink" title="树的组成"></a>树的组成</h3><ul><li>根节点：第一个选择点</li><li>非叶子节点与分支：中间过程</li><li>叶子节点：最终的决策结果</li></ul><h3 id="决策树的训练与测试"><a href="#决策树的训练与测试" class="headerlink" title="决策树的训练与测试"></a>决策树的训练与测试</h3><ul><li>训练阶段：从给定的训练集构造出来一棵树（从跟节点开始选择特征， 如何进行特征切分）</li><li>测试阶段：根据构造出来的树模型从上到下去走一遍就好了</li><li>一旦构造好了决策树，那么分类或者预测任务就很简单了，只需要走一遍 就可以了，那么难点就在于如何构造出来一颗树，这就没那么容易了，需 要考虑的问题还有很多的！</li></ul><h3 id="如何切分特征（选择节点）"><a href="#如何切分特征（选择节点）" class="headerlink" title="如何切分特征（选择节点）"></a>如何切分特征（选择节点）</h3><ul><li>问题：根节点的选择该用哪个特征呢？接下来呢？如何切分呢？</li><li>想象一下：我们的目标应该是根节点就像一个老大似的能更好的切分数据 （分类的效果更好），根节点下面的节点自然就是二当家了。</li><li>目标：通过一种衡量标准，来计算通过不同特征进行分支选择后的分类 情况，找出来最好的那个当成根节点，以此类推。</li></ul><h3 id="衡量标准-熵"><a href="#衡量标准-熵" class="headerlink" title="衡量标准-熵"></a>衡量标准-熵</h3><ul><li>熵：熵是表示随机变量不确定性的度量 （解释：说白了就是物体内部的混乱程度，比如杂货市场里面什么都有 那肯定混乱呀，专卖店里面只卖一个牌子的那就稳定多啦）</li><li>公式：H(X)=- ∑ pi * logpi, i=1,2, … , n</li><li>一个栗子： A集合[1,1,1,1,1,1,1,1,2,2] <pre><code>      B集合[1,2,3,4,5,6,7,8,9,1]</code></pre>显然A集合的熵值要低，因为A里面只有两种类别，相对稳定一些 而B中类别太多了，熵值就会大很多。（在分类任务中我们希望通过 节点分支后数据类别的熵值大还是小呢？）</li></ul><h3 id="衡量标准-熵-1"><a href="#衡量标准-熵-1" class="headerlink" title="衡量标准-熵"></a>衡量标准-熵</h3><ul><li><p>熵：不确定性越大，得到的熵值也就越大<br>当p=0或p=1时，H(p)=0,随机变量完全没有不确定性<br>当p=0.5时，H(p)=1,此时随机变量的不确定性最大</p></li><li><p>信息增益：表示特征X使得类Y的不确定性减少的程度。 （分类后的专一性，希望分类后的结果是同类在一起）</p></li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181015/Ddlh1mI2C2.png?imageslim" alt="mark"></p><h3 id="决策树构造实例"><a href="#决策树构造实例" class="headerlink" title="决策树构造实例"></a>决策树构造实例</h3><p>数据：14天打球情况<br>特征：4种环境变化<br>目标：构造决策树</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181015/8b7iji2662.png?imageslim" alt="mark"></p><p>划分方式：4种<br>问题：谁当根节点呢？<br>依据：信息增益</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181015/J5mJ0BfHJ2.png?imageslim" alt="mark"></p><p>在历史数据中（14天）有9天打球，5天不打球，所以此时的熵应为：</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181015/7f759EB6bd.png?imageslim" alt="mark"></p><p>4个特征逐一分析，先从outlook特征开始：<br>Outlook = sunny时，熵值为0.971<br>Outlook = overcast时，熵值为0<br>Outlook = rainy时，熵值为0.971</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181015/1CdmaCmI8a.png?imageslim" alt="mark"></p><p>根据数据统计，outlook取值分别为sunny,overcast,rainy的概率分别为： 5/14, 4/14, 5/14<br>熵值计算：5/14 <em> 0.971 + 4/14 </em> 0 + 5/14 * 0.971 = 0.693<br>（gain(temperature)=0.029 gain(humidity)=0.152 gain(windy)=0.048）<br>信息增益：系统的熵值从原始的0.940下降到了0.693，增益为0.247<br>同样的方式可以计算出其他特征的信息增益，那么我们选择最大的那个 就可以啦，相当于是遍历了一遍特征，找出来了大当家，然后再其余的 中继续通过信息增益找二当家！</p><h3 id="决策树算法"><a href="#决策树算法" class="headerlink" title="决策树算法"></a>决策树算法</h3><ul><li>ID3：信息增益</li><li>C4.5：信息增益率</li><li>CART：使用GINI系数来当做衡量标准</li><li>GINI系数：和熵的衡量标准类似，计算方式不相同</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181016/EF2GjH5aH1.png?imageslim" alt="mark"></p><h3 id="决策树剪枝策略"><a href="#决策树剪枝策略" class="headerlink" title="决策树剪枝策略"></a>决策树剪枝策略</h3><p>为什么要剪枝：决策树过拟合风险很大，理论上可以完全分得开数据 （想象一下，如果树足够庞大，每个叶子节点不就一个数据了嘛）<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181016/JcchdK1JcH.png?imageslim" alt="mark"></p><p>剪枝策略：预剪枝，后剪枝</p><ul><li><p>预剪枝：边建立决策树边进行剪枝的操作（更实用）<br>限制深度，叶子节点个数 叶子节点样本数，信息增益量等</p></li><li><p>后剪枝：当建立完决策树后来进行剪枝操作<br>通过一定的衡量标准<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181016/Eg79EDG7b4.png?imageslim" alt="mark"></p></li></ul><h2 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h2><p>随机森林是一种集成算法，是Bagging模型( bootstrap aggregation)的一种典型算法，随机指的是数据采样随机，特征选择随机。森林指的是很多个决策树并行放在一起。</p><h3 id="构造树模型"><a href="#构造树模型" class="headerlink" title="构造树模型"></a>构造树模型</h3><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181016/AmaHLH3K9g.png?imageslim" alt="mark"></p><p>由于二重随机性，使得每个树基本上都不会一样，最终的结果也会不一样</p><h3 id="随机森林优势"><a href="#随机森林优势" class="headerlink" title="随机森林优势"></a>随机森林优势</h3><ul><li>它能够处理很高维度（feature很多）的数据，并且不用做特征选择</li><li>在训练完后，它能够给出哪些feature比较重要</li><li>容易做成并行化方法，速度比较快</li><li>可以进行可视化展示，便于分析</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/181016/bAK3LL09Ba.png?imageslim" alt="mark"></p><hr />]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask入门-搭建图书管理项目</title>
      <link href="/post/67c145d8.html"/>
      <url>/post/67c145d8.html</url>
      
        <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%" /><br>在使用了一段django之后发现django太过于冗余，而简洁的Flask貌似更适合我。<br><span id="more"></span></p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>在这里推介大家使用pipenv这个虚拟环境</p><ul><li>安装pipenv<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pipenv</span><br></pre></td></tr></table></figure></li><li><p>建立虚拟环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install </span><br></pre></td></tr></table></figure><p>然后在这个文件夹内会创建2个文件<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180916/h16IGI1kEL.png?imageslim" alt="mark"></p></li><li><p>启动虚拟环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv shell</span><br></pre></td></tr></table></figure></li><li><p>安装flask</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install flask</span><br></pre></td></tr></table></figure><p>打开pycharm，把刚刚搭建的虚拟环境配置到其中。</p></li></ul><p>到这里，虚拟环境就已经配置完成啦！</p><h2 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h2><p>在图管理这个项目中需要用到Mysql这个数据库</p><h3 id="导入SQLALchemy扩展"><a href="#导入SQLALchemy扩展" class="headerlink" title="导入SQLALchemy扩展"></a>导入SQLALchemy扩展</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="comment">## 数据库配置：数据库地址/关闭自动跟踪修改</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;mysql://root:root@127.0.0.1/flask_books&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>]=<span class="literal">False</span></span><br></pre></td></tr></table></figure><p>需要注意的是在使用flask_sqlalchemy的时候可能会有<strong>ImportError: No module named MySQLdb</strong></p><p>这里有个解决的办法就是到 <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#">https://www.lfd.uci.edu/~gohlke/pythonlibs/#</a> 这里下载<strong>mysqlclient</strong>然后自行安装。</p><h3 id="创建db对象-并配置参数"><a href="#创建db对象-并配置参数" class="headerlink" title="创建db对象,并配置参数"></a>创建db对象,并配置参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 数据库配置：数据库地址/关闭自动跟踪修改</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;mysql://root:root@127.0.0.1/flask_books&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>]=<span class="literal">False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建数据库-amp-添加数据"><a href="#创建数据库-amp-添加数据" class="headerlink" title="创建数据库&amp;添加数据"></a>创建数据库&amp;添加数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">db.drop_all()</span><br><span class="line">db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成数据</span></span><br><span class="line">au1 = Author(name=<span class="string">&#x27;老王&#x27;</span>)</span><br><span class="line">au2 = Author(name=<span class="string">&#x27;老惠&#x27;</span>)</span><br><span class="line">au3 = Author(name=<span class="string">&#x27;老刘&#x27;</span>)</span><br><span class="line">db.session.add_all([au1,au2,au3])</span><br><span class="line">db.session.commit()</span><br><span class="line"></span><br><span class="line">bk1 = Book(name= <span class="string">&#x27;老王回忆录&#x27;</span>,author_id=au1.<span class="built_in">id</span>)</span><br><span class="line">bk2 = Book(name=<span class="string">&#x27;我读书少，你别骗我&#x27;</span>, author_id=au1.<span class="built_in">id</span>)</span><br><span class="line">bk3 = Book(name=<span class="string">&#x27;如何才能让自己更骚&#x27;</span>, author_id=au2.<span class="built_in">id</span>)</span><br><span class="line">bk4 = Book(name=<span class="string">&#x27;怎样征服美丽少女&#x27;</span>, author_id=au3.<span class="built_in">id</span>)</span><br><span class="line">bk5 = Book(name=<span class="string">&#x27;如何征服英俊少男&#x27;</span>, author_id=au3.<span class="built_in">id</span>)</span><br><span class="line">db.session.add_all([bk1,bk2,bk3,bk4,bk5])</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><h2 id="添加书和作者模型"><a href="#添加书和作者模型" class="headerlink" title="添加书和作者模型"></a>添加书和作者模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##a.模型继承ab.Model</span></span><br><span class="line"><span class="comment">##b.__tablename__表名</span></span><br><span class="line"><span class="comment">##c.db.Column:字段</span></span><br><span class="line"><span class="comment">##d.relationship :关系引用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(db.Model):</span><br><span class="line">    <span class="comment"># 表名</span></span><br><span class="line"></span><br><span class="line">    __tablename__ = <span class="string">&#x27;authors&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#字段</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer,primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">16</span>),unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#关系引用</span></span><br><span class="line">    books = db.relationship(<span class="string">&#x27;Book&#x27;</span>,backref=<span class="string">&#x27;author&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Author:%s&#x27;</span> % self.name</span><br><span class="line"></span><br><span class="line"><span class="comment">##书籍模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;books&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer,primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">16</span>) , unique=<span class="literal">True</span>)</span><br><span class="line">    author_id = db.Column(db.Integer,db.ForeignKey(<span class="string">&#x27;authors.id&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Book:%s %s&#x27;</span> % (self.name,self.author_id)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用模板显示数据库查询的数据"><a href="#使用模板显示数据库查询的数据" class="headerlink" title="使用模板显示数据库查询的数据"></a>使用模板显示数据库查询的数据</h2><h3 id="查询所有的作者信息，让信息传递给模板"><a href="#查询所有的作者信息，让信息传递给模板" class="headerlink" title="查询所有的作者信息，让信息传递给模板"></a>查询所有的作者信息，让信息传递给模板</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">authors = Author.query.<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;books.html&#x27;</span>,authors = authors)</span><br></pre></td></tr></table></figure><h3 id="模板中按照格式，依次for循环作者和书籍（作者获取书籍，用的是关系引用）"><a href="#模板中按照格式，依次for循环作者和书籍（作者获取书籍，用的是关系引用）" class="headerlink" title="模板中按照格式，依次for循环作者和书籍（作者获取书籍，用的是关系引用）"></a>模板中按照格式，依次for循环作者和书籍（作者获取书籍，用的是关系引用）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">#先遍历作者，然后在作者里面遍历书籍#&#125;</span></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;% <span class="keyword">for</span> author <span class="keyword">in</span> authors %&#125;</span><br><span class="line">&lt;li&gt;&#123;&#123; author.name &#125;&#125;&lt;a href=<span class="string">&quot;&#123;&#123; url_for(&quot;</span>delete_autho<span class="string">r&quot;,author_id = author.id) &#125;&#125;&quot;</span>&gt;删除&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">    &#123;% <span class="keyword">for</span> book <span class="keyword">in</span> author.books %&#125;</span><br><span class="line">            &lt;li&gt;&#123;&#123; book.name &#125;&#125; &lt;a href=<span class="string">&quot;&#123;&#123; url_for(&quot;</span>delete_book<span class="string">&quot;,book_id = book.id) &#125;&#125;&quot;</span>&gt;删除&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">            &lt;li&gt;无&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h3 id="使用WTF显示表单"><a href="#使用WTF显示表单" class="headerlink" title="使用WTF显示表单"></a>使用WTF显示表单</h3><h3 id="自定义表单类"><a href="#自定义表单类" class="headerlink" title="自定义表单类"></a>自定义表单类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField,SubmitField</span><br><span class="line"></span><br><span class="line"><span class="comment">##自定义表单类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorForm</span>(<span class="title class_ inherited__">FlaskForm</span>):</span><br><span class="line">    author = StringField(<span class="string">&#x27;作者&#x27;</span>,validators=[DataRequired()])</span><br><span class="line">    book = StringField(<span class="string">&#x27;书籍&#x27;</span>, validators=[DataRequired()])</span><br><span class="line">    submit = SubmitField(<span class="string">&#x27;提交&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="模板中显示"><a href="#模板中显示" class="headerlink" title="模板中显示"></a>模板中显示</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.csrf_token() &#125;&#125;</span><br><span class="line">    &#123;&#123; form.author.label &#125;&#125;&#123;&#123; form.author &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.book.label &#125;&#125;&#123;&#123; form.book &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.submit &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;#  显示消息闪现的内容 #&#125;</span><br><span class="line">    &#123;% for message in get_flashed_messages() %&#125;</span><br><span class="line">        &#123;&#123; message &#125;&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="消息闪现：secret-key-csrf-token"><a href="#消息闪现：secret-key-csrf-token" class="headerlink" title="消息闪现：secret_key/csrf_token"></a>消息闪现：secret_key/csrf_token</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> flash</span><br><span class="line">app.secret_key=<span class="string">&#x27;baidu&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>secret_key的作用</li></ul><p>引用一段 Flask Web Development 中的内容:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SECRET_KEY 配置变量是通用密钥, 可在 Flask 和多个第三方扩展中使用. </span><br><span class="line">如其名所示, 加密的强度取决于变量值的机密度. </span><br><span class="line">不同的程序要使用不同的密钥, 而且要保证其他人不知道你所用的字符串.</span><br></pre></td></tr></table></figure><br>SECRET_KEY 的作用主要是提供一个值做各种 HASH, 我没有实际研究过源码, 不同框架和第三方库的功能也不尽相同, 我不能给出准确的答案, 但是主要的作用应该是在其加密过程中作为算法的一个参数(salt 或其他). 所以这个值的复杂度也就影响到了数据传输和存储时的复杂度.</p><ul><li>csrf_token()<br>简单说来，使用它可以方便我们构建表单和验证表单，具体用法这里不做赘述<br>详细说明以及用法请到 <a href="https://blog.csdn.net/baidu_35085676/article/details/78254954">https://blog.csdn.net/baidu_35085676/article/details/78254954</a></li></ul><h2 id="实现相关的增删逻辑"><a href="#实现相关的增删逻辑" class="headerlink" title="实现相关的增删逻辑"></a>实现相关的增删逻辑</h2><h3 id="增加书籍"><a href="#增加书籍" class="headerlink" title="增加书籍"></a>增加书籍</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">验证逻辑：</span></span><br><span class="line"><span class="string">1.调用WTF的函数实现验证</span></span><br><span class="line"><span class="string">2.验证通过获取数据</span></span><br><span class="line"><span class="string">3.判断作者是否存在</span></span><br><span class="line"><span class="string">4.如果作者存在，判断书籍是否存在，没有重复书籍，添加数据，如果重复就提示错误</span></span><br><span class="line"><span class="string">5.如果作者不存在，添加作者和书籍</span></span><br><span class="line"><span class="string">6.验证不通过就提示错误</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.调用WTF的函数实现验证</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> author_form.validate_on_submit():</span><br><span class="line">    <span class="comment">#2.验证通过获取数据</span></span><br><span class="line">    author_name = author_form.author.data</span><br><span class="line">    book_name = author_form.book.data</span><br><span class="line"></span><br><span class="line">    <span class="comment">#3.判断作者是否存在</span></span><br><span class="line">    author = Author.query.filter_by(name = author_name).first()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#4.如果作者存在</span></span><br><span class="line">    <span class="keyword">if</span> author:</span><br><span class="line">        <span class="comment">#判断书籍是否存在，没有重复书籍，添加数据</span></span><br><span class="line">        book = Book.query.filter_by(name=book_name).first()</span><br><span class="line">        <span class="keyword">if</span> book:</span><br><span class="line">            flash(<span class="string">&#x27;已存在同名书籍&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                new_book = Book(name=book_name,author_id=author.<span class="built_in">id</span>)</span><br><span class="line">                db.session.add(new_book)</span><br><span class="line">                db.session.commit(  )</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(e)</span><br><span class="line">                flash(<span class="string">&#x27;添加书籍失败&#x27;</span>)</span><br><span class="line">                db.session.rollback() <span class="comment">#回滚</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#5.如果作者不存在，添加作者和书籍</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            new_author = Author(name=author_name)</span><br><span class="line">            db.session.add(new_author)</span><br><span class="line">            db.session.commit()</span><br><span class="line"></span><br><span class="line">            new_book=Book(name=book_name,author_id=new_author.<span class="built_in">id</span>)</span><br><span class="line">            db.session.add(new_book)</span><br><span class="line">            db.session.commit()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            flash(<span class="string">&#x27;添加作者和书籍失败&#x27;</span>)</span><br><span class="line">            db.session.rollback()</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        flash(<span class="string">&#x27;参数不全&#x27;</span>)</span><br><span class="line"></span><br><span class="line">authors = Author.query.<span class="built_in">all</span>()</span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;books.html&#x27;</span>,authors = authors,form=author_form)</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180917/FHhd4F3HH9.png?imageslim" alt="mark"></p><h3 id="删除书籍"><a href="#删除书籍" class="headerlink" title="删除书籍"></a>删除书籍</h3><p>删除书籍— 网页中删除 —点击需要发送书籍的ID—路由需要接受参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/delete_book/&lt;book_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_book</span>(<span class="params">book_id</span>):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.查询数据库，是否有该ID的书，如果有就删除，没有就提示错误</span></span><br><span class="line">    book = Book.query.get(book_id)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.如果有就删除</span></span><br><span class="line">    <span class="keyword">if</span> book:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            db.session.delete(book)</span><br><span class="line">            db.session.commit()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            flash(<span class="string">&#x27;删除书籍出错&#x27;</span>)</span><br><span class="line">            db.SessionExtension.rollback()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 3.没有提示错误</span></span><br><span class="line">        flash(<span class="string">&#x27;书籍找不到&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect:重定向，需要传入网络/路由地址</span></span><br><span class="line">    <span class="comment"># url_for(&#x27;index&#x27;):需要传入视图函数名，返回该视图函数对应的路由地址</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="删除作者"><a href="#删除作者" class="headerlink" title="删除作者"></a>删除作者</h3><p>删除作者具体的思路跟删除书籍差不多<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/delete_author/&lt;author_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_author</span>(<span class="params">author_id</span>):</span><br><span class="line">    <span class="comment"># 查询数据库，是否有该ID的作者，如果有就删除(先删书，再删作者)，没有就提示错误</span></span><br><span class="line">    <span class="comment"># 1.查询数据库</span></span><br><span class="line">    author = Author.query.get(author_id)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.如果有就删除(先删书，再删作者)</span></span><br><span class="line">    <span class="keyword">if</span> author:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#查询之后直接删除</span></span><br><span class="line">            Book.query.filter_by(author_id=author_id).delete()</span><br><span class="line"></span><br><span class="line">            <span class="comment">#删除作者</span></span><br><span class="line">            db.session.delete(author)</span><br><span class="line">            db.session.commit()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            flash(<span class="string">&#x27;删除作者出错&#x27;</span>)</span><br><span class="line">            db.session.rollback()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flash(<span class="string">&#x27;作者找不到&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br></pre></td></tr></table></figure></p><p>到这里一个简单的图书管理网站就已经做好啦，完整的项目代码：</p><p><a href="https://github.com/dik111/Flask_book_project">https://github.com/dik111/Flask_book_project</a></p><hr />]]></content>
      
      
      <categories>
          
          <category> 网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站搭建 </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django入门-搭建字数统计网站</title>
      <link href="/post/147ab0e.html"/>
      <url>/post/147ab0e.html</url>
      
        <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%" /><br>最近工作需要在数据分析系统中增加一些机器学习有关的工具，因为部门里面有些人不会python,为了方便大家使用，所以用django搭建一个网站。<br><span id="more"></span></p><h2 id="安装django"><a href="#安装django" class="headerlink" title="安装django"></a>安装django</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django</span><br></pre></td></tr></table></figure><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject wordcount2</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180902/0B9d0edHHL.png?imageslim" alt="mark"></p><h2 id="启动本地服务器"><a href="#启动本地服务器" class="headerlink" title="启动本地服务器"></a>启动本地服务器</h2><p>进入新建的项目文件夹</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180902/1DBC7LcK1J.png?imageslim" alt="mark"><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180902/2fF6g5mimC.png?imageslim" alt="mark"><br>如果你看到这个页面，就表示你的django安装成功啦！</p><h2 id="新建主页"><a href="#新建主页" class="headerlink" title="新建主页"></a>新建主页</h2><ul><li><p>在wordcount2文件夹中新建templates文件夹，用于存放html文件<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180902/BDF4550hfh.png?imageslim" alt="mark"></p></li><li><p>在templates文件夹中新建home.html文件<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180902/kKGJEDL16j.png?imageslim" alt="mark"></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>字数统计<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>字数统计<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;100&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;25&quot;</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span>在此输入文本<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;统计&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;about&quot;</span>&gt;</span>关于本页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置settings.py文件<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180902/k8Ic1F6kBA.png?imageslim" alt="mark"></li></ul><p>在这里我们需要配置settings.py文件，用来告诉django，我们的html文件在哪。</p><ul><li>新增function.py文件</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180902/K1H2KJChIF.png?imageslim" alt="mark"></p><p>在wordcount2文件夹中新增function.py文件，并且新增home函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span>  render(request,<span class="string">&#x27;home.html&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="render函数："><a href="#render函数：" class="headerlink" title="render函数："></a>render函数：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">request: 是一个固定参数, 没什么好讲的。</span><br><span class="line"></span><br><span class="line">template_name: templates 中定义的文件, 要注意路径名. 比如<span class="string">&#x27;templates\polls\index.html&#x27;</span>, 参数就要写‘polls\index.html’</span><br><span class="line"></span><br><span class="line">context: 要传入文件中用于渲染呈现的数据, 默认是字典格式</span><br><span class="line"></span><br><span class="line">content_type: 生成的文档要使用的MIME 类型。默认为DEFAULT_CONTENT_TYPE 设置的值。</span><br><span class="line"></span><br><span class="line">status: http的响应代码,默认是<span class="number">200.</span></span><br><span class="line"></span><br><span class="line">using: 用于加载模板使用的模板引擎的名称。</span><br></pre></td></tr></table></figure><ul><li>配置在urls.py文件</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180902/ca2i3H6Khd.png?imageslim" alt="mark"><br>在urls.py文件中，需要我们配置网站地址以及映射的函数。</p><p>在这里首页已经配置完成啦！<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180902/CbI35ciFmi.png?imageslim" alt="mark"></p><h2 id="增加统计结果网页"><a href="#增加统计结果网页" class="headerlink" title="增加统计结果网页"></a>增加统计结果网页</h2><p>当用户把需要统计的文字填入文字框中，并且按统计按钮之后，我们的页面需要跳转到统计结果的页面中。</p><ul><li><p>配置home.html文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>字数统计<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>字数统计<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;count&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;100&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;25&quot;</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span>在此输入文本<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;统计&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;about&quot;</span>&gt;</span>关于本页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在form标签中添加action=”count”</p></li><li><p>增加count.html文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>统计结果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>统计结果，总字数为&#123;&#123;count&#125;&#125;字<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>你的文本<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">&#123;&#123;text&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置urls.py文件</p></li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180902/lb0k2d8dHi.png?imageslim" alt="mark"></p><ul><li>在function中新增count函数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count</span>(<span class="params">request</span>):</span><br><span class="line">    user_text = request.GET[<span class="string">&#x27;text&#x27;</span>] <span class="comment">##获取用户输入的文字</span></span><br><span class="line">    total_count = <span class="built_in">len</span>(user_text)  <span class="comment">##统计字数</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;count.html&#x27;</span>,&#123;<span class="string">&#x27;count&#x27;</span>:total_count,<span class="string">&#x27;text&#x27;</span>:user_text&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>在这里需要注意的是我们通过render函数向html传递参数的时候需要以字典的形式传递。<br><strong>{‘count’:total_count,’text’:user_text}</strong></p><p>如果没有出错的话，当你点击统计之后会跳转到这个页面<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180902/lD873LF5H4.png?imageslim" alt="mark"></p><h3 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h3><p>完整的count函数代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count</span>(<span class="params">request</span>):</span><br><span class="line">    user_text = request.GET[<span class="string">&#x27;text&#x27;</span>]</span><br><span class="line">    user_text1 = request.GET[<span class="string">&#x27;text&#x27;</span>]</span><br><span class="line">    user_text = re.findall(<span class="string">&#x27;[\u4e00-\u9fa5]&#x27;</span>, user_text, re.S) <span class="comment">##用正则表达式去掉符号以及数字</span></span><br><span class="line">    total_count=<span class="built_in">len</span>(user_text)</span><br><span class="line"></span><br><span class="line">    word_dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> user_text:</span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> word_dict:</span><br><span class="line">            word_dict[word] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            word_dict[word] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    dataframe = pd.DataFrame(<span class="built_in">list</span>(word_dict.keys()), columns=[<span class="string">&#x27;字&#x27;</span>])</span><br><span class="line">    dataframe[<span class="string">&#x27;频次&#x27;</span>] = pd.DataFrame(<span class="built_in">list</span>(word_dict.values()))</span><br><span class="line">    dataframe.sort_values(<span class="string">&#x27;频次&#x27;</span>, inplace=<span class="literal">True</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">    old_width = pd.get_option(<span class="string">&#x27;display.max_colwidth&#x27;</span>) <span class="comment">##因为dataframe太长的话会显示不全，所以需要新增以下代码</span></span><br><span class="line">    pd.set_option(<span class="string">&#x27;display.max_colwidth&#x27;</span>, -<span class="number">1</span>)</span><br><span class="line">    dataframe = dataframe.to_html(escape=<span class="literal">False</span>, index=<span class="literal">False</span>, sparsify=<span class="literal">True</span>, border=<span class="number">0</span>, index_names=<span class="literal">False</span>, header=<span class="literal">False</span>)</span><br><span class="line">    pd.set_option(<span class="string">&#x27;display.max_colwidth&#x27;</span>, old_width)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request , <span class="string">&#x27;count.html&#x27;</span>,&#123;<span class="string">&#x27;count&#x27;</span>:total_count , <span class="string">&#x27;text&#x27;</span>:user_text1,<span class="string">&#x27;dict&#x27;</span>:dataframe&#125;)</span><br></pre></td></tr></table></figure><p>上面的代码就是把用户输入的文字通过循环的方式统计字数，然后把字典转换成dataframe,传递给html。</p><ul><li>完整的count.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>统计结果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>统计结果，总字数为&#123;&#123;count&#125;&#125;字<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>你的文本<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">&#123;&#123;text&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;% autoescape off %&#125;</span><br><span class="line">&#123;&#123;dict&#125;&#125;</span><br><span class="line">&#123;% endautoescape %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;..&quot;</span>&gt;</span>回到主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="关于django自动转义"><a href="#关于django自动转义" class="headerlink" title="关于django自动转义"></a>关于django自动转义</h3><p>Django的模板中会对HTML标签和JS等语法标签进行自动转义，原因显而易见，这样是为了安全。但是有的时候我们可能不希望这些HTML元素被转义，比如我们做一个内容管理系统，后台添加的文章中是经过修饰的，这些修饰可能是通过一个类似于FCKeditor编辑加注了HTML修饰符的文本，如果自动转义的话显示的就是保护HTML标签的源文件。为了在Django中关闭HTML的自动转义有两种方式，如果是一个单独的变量我们可以通过过滤器“|safe”的方式告诉Django这段代码是安全的不必转义。比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;p&gt;这行代表会被自动转义&lt;/p&gt;: &#123;&#123; data &#125;&#125;</span><br><span class="line">&lt;p&gt;这行代表不会被自动转义&lt;/p&gt;: &#123;&#123; data|safe &#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中第二行我们关闭了Django的自动转义。<br>我们还可以通过<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%autoescape off%&#125;</span><br></pre></td></tr></table></figure><br>的方式关闭整段代码的自动转义，比如下面这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% autoescape off %&#125;</span><br><span class="line">    Hello &#123;&#123; name &#125;&#125;</span><br><span class="line">&#123;% endautoescape %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="增加about页面"><a href="#增加about页面" class="headerlink" title="增加about页面"></a>增加about页面</h2><p>我们需要新增一个about页面用于告诉用户，我们这个页面是用来干什么的,步骤与之前的都差不多。</p><ul><li><p>增加about.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>关于本页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>关于本页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>本网站可以统计字数，并且会按频次降序排列<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;..&quot;</span>&gt;</span>回到主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置urls.py文件<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180902/mEG20dic17.png?imageslim" alt="mark"> </p></li><li><p>配置function文件，新增about函数</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">about</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request ,<span class="string">&#x27;about.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180902/FdjaaGjf1L.png?imageslim" alt="mark"></p><p>在这里一个简单的字数统计网站就搭建好啦！<br>完整项目代码:<a href="https://github.com/dik111/word_count">https://github.com/dik111/word_count</a></p><hr />]]></content>
      
      
      <categories>
          
          <category> 网站搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站搭建 </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李宏毅机器学习笔记-4 Brief Introduction of Deep Learning；深度学习简介</title>
      <link href="/post/35481ce.html"/>
      <url>/post/35481ce.html</url>
      
        <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%" /></p><span id="more"></span><h1 id="Three-Steps-for-Deep-Learning"><a href="#Three-Steps-for-Deep-Learning" class="headerlink" title="Three Steps for Deep Learning"></a>Three Steps for Deep Learning</h1><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180730/5E3a3iA3ma.png?imageslim" alt="mark"></p><h2 id="Step-1-Neural-Network"><a href="#Step-1-Neural-Network" class="headerlink" title="Step 1: Neural Network"></a>Step 1: Neural Network</h2><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180730/h2B725DEj7.png?imageslim" alt="mark"></p><h2 id="1212"><a href="#1212" class="headerlink" title="1212"></a>1212</h2><hr />]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李宏毅机器学习笔记-3 Classification,Logistic Regression</title>
      <link href="/post/58693219.html"/>
      <url>/post/58693219.html</url>
      
        <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%" /></p><span id="more"></span><h1 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h1><p>分类算法在我们日常生活中随处可见：</p><ul><li>Credit Scoring<br>Input: income, savings, profession, age, past financial history ……<br>Output: accept or refuse</li><li>Medical Diagnosis<br>Input: current symptoms, age, gender, past medical history ……<br>Output: which kind of diseases</li><li>Handwritten character recognition<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180728/AkGlIbdGgc.png?imageslim" alt="mark"></li><li>Face recognition<br>Input: image of a face<br>output: person</li></ul><h2 id="Example-Application"><a href="#Example-Application" class="headerlink" title="Example Application"></a>Example Application</h2><p>在这节课程中，李宏毅老师通过宝可梦的HP值，Attack值，SP Atk值，SP Def值，Speed值等一系列值来预测宝可梦属于哪种类型。<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180728/8099K1GAfJ.png?imageslim" alt="mark"></p><h2 id="How-to-do-Classification"><a href="#How-to-do-Classification" class="headerlink" title="How to do Classification?"></a>How to do Classification?</h2><ul><li>Traning data for Classification<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180728/c26cgkJhEK.png?imageslim" alt="mark"></li></ul><h3 id="Classification-as-Regression"><a href="#Classification-as-Regression" class="headerlink" title="Classification as Regression?"></a>Classification as Regression?</h3><p>Binary classification as example<br>Training: Class 1 means the target is 1; Class 2 means the target is -1<br>Testing: closer to 1 → class 1; closer to -1 → class 2 </p><h2 id="Ideal-Alternatives-理想的替代品"><a href="#Ideal-Alternatives-理想的替代品" class="headerlink" title="Ideal Alternatives(理想的替代品)"></a>Ideal Alternatives(理想的替代品)</h2><ul><li>Function (Model):<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180728/egL5b6jCl3.png?imageslim" alt="mark"></li><li>Loss function:<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180728/f61LhjE1D9.png?imageslim" alt="mark"></li><li>Find the best funcion:<br>Example:Perceptron , SVM<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180728/ldDGiKk3Ei.png?imageslim" alt="mark"><br>在这里我们用线性回归算法进行分类，我们把接近-1的数据定义为class2,把接近1的数据定义为class1，以此作为分类，可以看到当数据远大于1时，绿色的直线慢慢往紫色的直线靠近了，因此在某种情况下，用线性回归进行分类可能会不太准确。<h2 id="Naive-Bayes"><a href="#Naive-Bayes" class="headerlink" title="Naive Bayes"></a>Naive Bayes</h2><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180728/cAl19gA77A.png?imageslim" alt="mark"><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180728/690BGedG7C.png?imageslim" alt="mark"><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180728/dmikm1mgLD.png?imageslim" alt="mark"><br>其中 <strong>mean μ</strong> 和 <strong>covariance matrix ∑</strong> 是决定形状的两个因素，而不同的参数，会有不同的形状：<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180728/dj87mK6dmc.png?imageslim" alt="mark"></li></ul><h2 id="Probability-from-Class"><a href="#Probability-from-Class" class="headerlink" title="Probability from Class"></a>Probability from Class</h2><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180729/h0m7DD8CmL.png?imageslim" alt="mark"></p><h3 id="那如何找到这个Gaussion-function呢？"><a href="#那如何找到这个Gaussion-function呢？" class="headerlink" title="那如何找到这个Gaussion function呢？"></a>那如何找到这个Gaussion function呢？</h3><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180729/jD3Eg7eici.png?imageslim" alt="mark"><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180729/L1cLAB0cDK.png?imageslim" alt="mark"></p><h2 id="Summery"><a href="#Summery" class="headerlink" title="Summery"></a>Summery</h2><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180729/DF3L2L9aFA.png?imageslim" alt="mark"></p><h2 id="Probability-Distribution"><a href="#Probability-Distribution" class="headerlink" title="Probability Distribution"></a>Probability Distribution</h2><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180729/2FHlmfB0FI.png?imageslim" alt="mark"></p><h1 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h1><h2 id="The-steps-of-Logistic-Regression"><a href="#The-steps-of-Logistic-Regression" class="headerlink" title="The steps of Logistic Regression"></a>The steps of Logistic Regression</h2><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180729/C3kCa0d4Cd.png?imageslim" alt="mark"><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180729/a7F5I1i9FJ.png?imageslim" alt="mark"><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180729/9A96DEL9IL.png?imageslim" alt="mark"></p><h2 id="Logistic-Regression-VS-Linear-Regression"><a href="#Logistic-Regression-VS-Linear-Regression" class="headerlink" title="Logistic Regression VS Linear Regression"></a>Logistic Regression VS Linear Regression</h2><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180729/cB393jDfIJ.png?imageslim" alt="mark"></p><h2 id="为什么不能用Logistic-Regression-Square-Error"><a href="#为什么不能用Logistic-Regression-Square-Error" class="headerlink" title="为什么不能用Logistic Regression+Square Error"></a>为什么不能用Logistic Regression+Square Error</h2><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180729/f9kHgKj4Bd.png?imageslim" alt="mark"></p><h2 id="Cross-Entropy-v-s-Square-Error"><a href="#Cross-Entropy-v-s-Square-Error" class="headerlink" title="Cross Entropy v.s. Square Error"></a>Cross Entropy v.s. Square Error</h2><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180729/B8aFe713FJ.png?imageslim" alt="mark"></p><h2 id="Discriminative（Logstic）-v-s-Generative（Gaussion）"><a href="#Discriminative（Logstic）-v-s-Generative（Gaussion）" class="headerlink" title="Discriminative（Logstic） v.s. Generative（Gaussion）"></a>Discriminative（Logstic） v.s. Generative（Gaussion）</h2><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180729/BjFceKIEFF.png?imageslim" alt="mark"><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180729/bkh0iBek86.png?imageslim" alt="mark"><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180729/GGegFb7ECH.png?imageslim" alt="mark"></p><h2 id="Multi-class-Classification"><a href="#Multi-class-Classification" class="headerlink" title="Multi-class Classification"></a>Multi-class Classification</h2><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180729/74i9FEki8K.png?imageslim" alt="mark"><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180729/KHa7mdjfg4.png?imageslim" alt="mark"></p><h2 id="Limitation-of-Logistic-Regression"><a href="#Limitation-of-Logistic-Regression" class="headerlink" title="Limitation of Logistic Regression"></a>Limitation of Logistic Regression</h2><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180729/2C76EfHHIk.png?imageslim" alt="mark"><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180729/AadIi6ge6E.png?imageslim" alt="mark"><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180729/7bB6beKdgH.png?imageslim" alt="mark"><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180729/181m216d0J.png?imageslim" alt="mark"><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180729/1I8ACL4525.png?imageslim" alt="mark"><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180729/bF173Hj86c.png?imageslim" alt="mark"></p><hr />]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梯度下降算法实战</title>
      <link href="/post/d10058c2.html"/>
      <url>/post/d10058c2.html</url>
      
        <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%" /><br>在上一篇文章中，我们了解了梯度下降算法的原理，那么在这一篇文章中，我们将结合李宏毅机器学习入门的课后作业1，用python来实现梯度下降。<br><span id="more"></span></p><p><em>课后作业1内容&amp;数据集链接地址：<a href="https://ntumlta.github.io/2017fall-ml-hw1">https://ntumlta.github.io/2017fall-ml-hw1</a></em></p><h2 id="载入数据"><a href="#载入数据" class="headerlink" title="载入数据"></a>载入数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">sns.set_style(<span class="string">&#x27;darkgrid&#x27;</span>) <span class="comment">#设定绘图的背景样式</span></span><br><span class="line">sns.set_palette(<span class="string">&#x27;muted&#x27;</span>) <span class="comment">#设定图表的颜色板</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> SGDRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;train.csv&#x27;</span>,encoding=<span class="string">&#x27;big5&#x27;</span>)<span class="comment">#用pandas读取csv文件</span></span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180629/ii813hcGJa.png?imageslim" alt="mark"><br>可以看到tranning set由这样的数据组成，我们的目标就是通过AMB_TEMP,CH4等一系列数据，预估出PM2.5的值。</p><h2 id="数据清洗-amp-处理"><a href="#数据清洗-amp-处理" class="headerlink" title="数据清洗&amp;处理"></a>数据清洗&amp;处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> data[<span class="string">&#x27;datetime&#x27;</span>] <span class="comment">#删除无用指标datetime</span></span><br><span class="line"><span class="keyword">del</span> data[<span class="string">&#x27;item&#x27;</span>]<span class="comment">#删除无用指标item</span></span><br><span class="line">data.set_index([<span class="string">&#x27;obvservations&#x27;</span>],inplace=<span class="literal">True</span>) </span><br><span class="line">data6 = pd.DataFrame()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">240</span>):<span class="comment">#数据处理</span></span><br><span class="line">    data3 = data.iloc[i*<span class="number">18</span>:(i+<span class="number">1</span>)*<span class="number">18</span>,:]</span><br><span class="line">    data4 = data.iloc[(i+<span class="number">1</span>)*<span class="number">18</span>:(i+<span class="number">2</span>)*<span class="number">18</span>,:]</span><br><span class="line">    data5 = pd.concat([data3,data4],axis=<span class="number">1</span>)</span><br><span class="line">    data6 = pd.concat([data5,data6],axis = <span class="number">1</span>)</span><br><span class="line">data7 = data6.T</span><br><span class="line">data8 = data7.dropna(how = <span class="string">&#x27;all&#x27;</span>)</span><br><span class="line"><span class="keyword">del</span> data8[<span class="string">&#x27;RAINFALL&#x27;</span>]</span><br><span class="line">data9 = pd.DataFrame(data8,dtype=<span class="string">&#x27;float&#x27;</span>)</span><br></pre></td></tr></table></figure><p>经过一番处理之后，数据变成了这样的形式：<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180629/2DEL9GHGEC.png?imageslim" alt="mark"></p><h2 id="描述性分析"><a href="#描述性分析" class="headerlink" title="描述性分析"></a>描述性分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;AMB_TEMP&#x27;</span>)</span><br><span class="line">plt.scatter(data9[<span class="string">&#x27;AMB_TEMP&#x27;</span>],data9[<span class="string">&#x27;PM2.5&#x27;</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;CH4&#x27;</span>)</span><br><span class="line">plt.scatter(data9[<span class="string">&#x27;CH4&#x27;</span>],data9[<span class="string">&#x27;PM2.5&#x27;</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;CO&#x27;</span>)</span><br><span class="line">plt.scatter(data9[<span class="string">&#x27;CO&#x27;</span>],data9[<span class="string">&#x27;PM2.5&#x27;</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;NMHC&#x27;</span>)</span><br><span class="line">plt.scatter(data9[<span class="string">&#x27;NMHC&#x27;</span>],data9[<span class="string">&#x27;PM2.5&#x27;</span>])</span><br></pre></td></tr></table></figure><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180629/Bk1jclj7G8.png?imageslim" alt="mark"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;NO&#x27;</span>)</span><br><span class="line">plt.scatter(data9[<span class="string">&#x27;NO&#x27;</span>],data9[<span class="string">&#x27;PM2.5&#x27;</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;NO2&#x27;</span>)</span><br><span class="line">plt.scatter(data9[<span class="string">&#x27;NO2&#x27;</span>],data9[<span class="string">&#x27;PM2.5&#x27;</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;NOx&#x27;</span>)</span><br><span class="line">plt.scatter(data9[<span class="string">&#x27;NOx&#x27;</span>],data9[<span class="string">&#x27;PM2.5&#x27;</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;O3&#x27;</span>)</span><br><span class="line">plt.scatter(data9[<span class="string">&#x27;O3&#x27;</span>],data9[<span class="string">&#x27;PM2.5&#x27;</span>])</span><br></pre></td></tr></table></figure><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180629/IFImJ61K72.png?imageslim" alt="mark"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;WD_HR&#x27;</span>)</span><br><span class="line">plt.scatter(data9[<span class="string">&#x27;WD_HR&#x27;</span>],data9[<span class="string">&#x27;PM2.5&#x27;</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;WIND_DIREC&#x27;</span>)</span><br><span class="line">plt.scatter(data9[<span class="string">&#x27;WIND_DIREC&#x27;</span>],data9[<span class="string">&#x27;PM2.5&#x27;</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;WIND_SPEED&#x27;</span>)</span><br><span class="line">plt.scatter(data9[<span class="string">&#x27;WIND_SPEED&#x27;</span>],data9[<span class="string">&#x27;PM2.5&#x27;</span>])</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;WS_HR&#x27;</span>)</span><br><span class="line">plt.scatter(data9[<span class="string">&#x27;WS_HR&#x27;</span>],data9[<span class="string">&#x27;PM2.5&#x27;</span>])</span><br></pre></td></tr></table></figure><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180629/66EJIbmCIA.png?imageslim" alt="mark"></p><ul><li>相关度计算<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">internal_chars =[<span class="string">&#x27;AMB_TEMP&#x27;</span>,<span class="string">&#x27;CH4&#x27;</span>,<span class="string">&#x27;CO&#x27;</span>,<span class="string">&#x27;NMHC&#x27;</span>,<span class="string">&#x27;NO&#x27;</span>,<span class="string">&#x27;NO2&#x27;</span>,<span class="string">&#x27;NOx&#x27;</span>,<span class="string">&#x27;O3&#x27;</span>,<span class="string">&#x27;PM10&#x27;</span>,<span class="string">&#x27;PM2.5&#x27;</span>,<span class="string">&#x27;RH&#x27;</span>,<span class="string">&#x27;SO2&#x27;</span>,<span class="string">&#x27;THC&#x27;</span>,<span class="string">&#x27;WD_HR&#x27;</span>,<span class="string">&#x27;WIND_DIREC&#x27;</span>,<span class="string">&#x27;WIND_SPEED&#x27;</span>,<span class="string">&#x27;WS_HR&#x27;</span>,]</span><br><span class="line">corrmat = data9[internal_chars].corr() <span class="comment">#计算相关系数</span></span><br><span class="line">f , ax = plt.subplots(figsize = (<span class="number">20</span>,<span class="number">12</span>)) <span class="comment">#设置图标尺寸大小</span></span><br><span class="line">plt.xticks(rotation = <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">sns.heatmap(corrmat, square=<span class="literal">False</span>, linewidths=<span class="number">.8</span>, annot=<span class="literal">True</span>) <span class="comment">#设置热力图参数</span></span><br></pre></td></tr></table></figure><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180629/19I32HD7Ae.png?imageslim" alt="mark"><h2 id="建模分析-预测PM2-5"><a href="#建模分析-预测PM2-5" class="headerlink" title="建模分析-预测PM2.5"></a>建模分析-预测PM2.5</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">X = data9[[<span class="string">&#x27;PM10&#x27;</span>,<span class="string">&#x27;NO2&#x27;</span>]]</span><br><span class="line">y = data9[[<span class="string">&#x27;PM2.5&#x27;</span>]]</span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">X = scaler.fit_transform(X)</span><br><span class="line">y = scaler.fit_transform(y)</span><br><span class="line">X_train,X_test,y_train,y_test = train_test_split(X,y,random_state=<span class="number">1</span>)</span><br><span class="line">clf = SGDRegressor(loss=<span class="string">&#x27;epsilon_insensitive&#x27;</span>,alpha=<span class="number">0.01</span>,penalty=<span class="string">&#x27;l2&#x27;</span>,max_iter=<span class="number">10000</span>,shuffle=<span class="literal">True</span>,n_iter=np.ceil(<span class="number">10</span>**<span class="number">6</span>/<span class="number">8622</span>))</span><br><span class="line">clf.fit(X_train,y_train)</span><br><span class="line">clf.score(X,y)</span><br><span class="line"></span><br></pre></td></tr></table></figure>其中loss = ‘epsilon_insensitive’ 表示用的最小二乘法，alpha = 0.01表示为初始的步长,max_iter=10000表示最大的迭代次数。最后模型的评分为0.62分，可能是数据量有点太少了，在以后的文章中，会继续把它优化！<hr /></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李宏毅机器学习笔记-2 （Regression：Case Study ；回归：案例研究）</title>
      <link href="/post/d5efc714.html"/>
      <url>/post/d5efc714.html</url>
      
        <content type="html"><![CDATA[<p class="description"></p><span id="more"></span><h2 id="Regression-pokemons"><a href="#Regression-pokemons" class="headerlink" title="Regression-pokemons"></a>Regression-pokemons</h2><p>李老师在这一节课程开始介绍了用Regression，预测预测宝可梦（<br>pokemons）进化后过的CP值（战斗力）。<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180626/DbEKa15F6H.png?imageslim" alt="mark"><br>我们的目标是找出上帝函数’f’,通过imput一只宝可梦进化前的cp值，output他进化后的cp值。</p><h2 id="Step1-选择Model"><a href="#Step1-选择Model" class="headerlink" title="Step1 选择Model"></a>Step1 选择Model</h2><p>在这里李老师建立以个Linear model:<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> y = b + w * x</span><br><span class="line">它是infinite的……</span><br><span class="line">可能为f1: y = <span class="number">10.0</span> + <span class="number">9.0</span> ∙ x</span><br><span class="line">可能为f2: y = <span class="number">9.8</span> + <span class="number">9.2</span> ∙ x</span><br><span class="line">可能为f3: y = - <span class="number">0.8</span> - <span class="number">1.2</span> ∙ x</span><br><span class="line">……  </span><br></pre></td></tr></table></figure><br>不同的b和w都会得到不同的f，而我们的目标就是找出一个最合适的f。</p><h2 id="Step2-Goodness-of-function"><a href="#Step2-Goodness-of-function" class="headerlink" title="Step2 Goodness of function"></a>Step2 Goodness of function</h2><p>当我们将准备好的training data（已知10个宝可梦的进化情况），建立一个二维坐标轴。<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180627/ag4Ch54Im0.png?imageslim" alt="mark"></p><p>通过上图可以看出，似乎有一个函数能够拟合这些坐标点，而这就是我们想要的，为了选出最契合的 f ，我们要建立一个Loss function L ，也就是函数的函数。</p><ul><li>如果我们将 f 的 w 和 b 作为两轴，则在下图中每一点都代表一个 function f ，而颜色代表output的大小，也就代表该function f 参数的好坏。易理解，smallest点做对应的函数 f 就是我们想要的。</li></ul><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180627/f9FiG60Ab3.png?imageslim" alt="mark"></p><h2 id="Step3-Best-Function"><a href="#Step3-Best-Function" class="headerlink" title="Step3 Best Function"></a>Step3 Best Function</h2><p>在lossfuction建立之后，我们需要通过这些这些lossfuction找到最合适的Best fuction,在这里，我们通过线性代数的基本公式来直接计算出最佳的w和b。</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180627/BhlKFH27KE.png?imageslim" alt="mark"><br>这种方法适用于单一特征的问题，但现实中，我们的问题往往是涉及到多个特征的，这时，则需要我们用更有效fuction,这里，李老师介绍了梯度下降法进行计算。<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180627/j68LdEI3dI.png?imageslim" alt="mark"><br>首先我们需要随机选取一个w0,计算其斜率，如果为正，则减小w，如果为负，则增大w。而这有另一个问题，每次要增加或减少多少w值呢，有两个因素影响。第一，即微分值，如果微分值很大或很小，表示此处非常陡峭，那么证明距离最低点还有很远的距离，所以移动的距离就很大。第二个因素是我们事先自主定义的常数项 η 值，即步长。<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180627/c0fikGF2DA.png?imageslim" alt="mark"></p><p>经过无数次迭代之后，参数会经过无数次更新，最终到达一个最低值。而当我们有多个feature时，即不仅有w和b时，同样不会影响梯度下降过程，其原理为：</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180627/i3eBFegkbg.png?imageslim" alt="mark"></p><h2 id="How’s-the-results"><a href="#How’s-the-results" class="headerlink" title="How’s the results?"></a>How’s the results?</h2><p>经过上面的步骤后，我们得到了一个函数f，但我们发现并不是所有数据都能很好的拟合函数，这就会造成很大的预测不准的情况，通过Loss Function也能看出，最优解的值依然很大，测试数据的表现也不好，所以我们就要想办法优化。</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180627/9IKDCEfK56.png?imageslim" alt="mark"></p><p>很容易想到，刚刚我们用了一次方程作为model，二次方程会不会更好一些呢，三次方程、四次方程呢？于是我们做了以下实验，用同样的方法，放到多次方程中。</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180627/L4Gh3cgfm7.png?imageslim" alt="mark"><br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180627/Ae4g6bEfKK.png?imageslim" alt="mark"></p><h2 id="overfitting"><a href="#overfitting" class="headerlink" title="overfitting"></a>overfitting</h2><p>从上面的4幅图可以看出，虽然我们增加了函数次数后，可以使得training set 的error越来越小，但是test set的error并没有随着次数的增大而减小，甚至到5次时，结果大大超出了我们的预估，那么这种现象就叫做overfitting。</p><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180627/C7C7Ad87eD.png?imageslim" alt="mark"></p><p>由此可见，fuction并不是越复杂越好，我们需要根据实际情况来选择合适的fuction，而对于overfitting的应对办法，我们一般采用以下方法来解决：</p><ul><li>增加新特征，可以考虑加入进特征组合、高次特征，来增大假设空间;</li><li>尝试非线性模型，比如核SVM 、决策树、DNN等模型;</li><li>如果有正则项可以较小正则项参数 λ</li><li>Boosting ,Boosting 往往会有较小的 Bias，比如 Gradient Boosting 等.</li></ul><h2 id="underfitting"><a href="#underfitting" class="headerlink" title="underfitting"></a>underfitting</h2><p><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180627/DHJj85dL4K.png?imageslim" alt="mark"><br>有过拟合当然也少不了欠拟合了，对于欠拟合,我们一般采用以下方法解决：</p><ul><li>增加新特征，可以考虑加入进特征组合、高次特征，来增大假设空间;</li><li>尝试非线性模型，比如核SVM 、决策树、DNN等模型;</li><li>如果有正则项可以较小正则项参数 λ.</li><li>Boosting ,Boosting 往往会有较小的 Bias，比如 Gradient Boosting 等.</li></ul><h2 id="交叉检验"><a href="#交叉检验" class="headerlink" title="交叉检验"></a>交叉检验</h2><p>当数据比较少是，留出一部分做交叉检验可能比较奢侈，还有只执行一次训练-测试来评估模型，会带有一些随机性，这些缺点都可以通过交叉检验克服，交叉检验对数据的划分如下：<br><img src="https://dik111-1258101294.cos.ap-guangzhou.myqcloud.com/blog/180627/Cc02gFb7aE.png?imageslim" alt="mark"></p><h3 id="交叉检验的步骤："><a href="#交叉检验的步骤：" class="headerlink" title="交叉检验的步骤："></a>交叉检验的步骤：</h3><ol><li>将数据分类训练集、验证集、测试集；</li><li>选择模型和训练参数；</li><li>使用训练集训练模型，在验证集中评估模型；</li><li>针对不同的模型，重复2）- 3）的过程；</li><li>选择最佳模型，使用训练集和验证集一起训练模型；</li><li>使用测试集来最终测评模型。</li></ol><h2 id="关于正则"><a href="#关于正则" class="headerlink" title="关于正则"></a>关于正则</h2><p>在模型的损失函数中引入正则项，可用来防止过拟合，于是得到的优化形式如下：</p><script type="math/tex; mode=display">w^*=argminwL(y,f(w,x))+λΩ(w)</script><p>这里 Ω(w) 即为正则项， λ  则为正则项的参数，通常为 Lp 的形式，即：</p><script type="math/tex; mode=display">Ω(w)=||w||^p</script><p>实际应用中比较多的是 L1 与 L2 正则，L1 正则是 L0 正则的凸近似，这里 L0 正则即为权重参数 w 中值为 0 的个数，但是求解 L0 正则是个NP 难题，所以往往使用 L1 正则来近似 L0 , 来使得某些特征权重为 0 ，这样便得到了稀疏的的权重参数 w。</p><p>在下一篇的文章我会结合李宏毅老师的课后作业，用python实现梯度下降算法，敬请期待！</p><p>相关参考：<br><a href="https://blog.csdn.net/soulmeetliang/article/details/72619885">https://blog.csdn.net/soulmeetliang/article/details/72619885</a><br><a href="https://www.cnblogs.com/ooon/p/5715918.html">https://www.cnblogs.com/ooon/p/5715918.html</a></p><hr />]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas入门简介</title>
      <link href="/post/64c18871.html"/>
      <url>/post/64c18871.html</url>
      
        <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%" /></p><span id="more"></span><h2 id="Pandas简介"><a href="#Pandas简介" class="headerlink" title="Pandas简介"></a>Pandas简介</h2><p>pandas 是基于NumPy 的一种工具，该工具是为了解决数据分析任务而创建的。pandas提供了大量能使我们快速便捷地处理数据的函数和方法。你很快就会发现，它是使Python成为强大而高效的数据分析环境的重要因素之一。<br>pandas主要使用的是两个数据结构Series和Dataframe,我们先导入它们以及相关模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series, DataFrame</span><br></pre></td></tr></table></figure><h2 id="Pandas数据结构：Series"><a href="#Pandas数据结构：Series" class="headerlink" title="Pandas数据结构：Series"></a>Pandas数据结构：Series</h2><p>一般来说，Series可以被认为是一维数组，Series与一维数组最主要的区别是Series具有索引（index），可以与另一个程序中常见的数据结构联系起来。</p><h3 id="Series的创建"><a href="#Series的创建" class="headerlink" title="Series的创建"></a>Series的创建</h3><p>创建Series的基本格式是s = Series(data, index=index, name=name)，下面给出几个创建Series的例子。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = np.random.randn(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span> （<span class="string">&quot;a is an array:&quot;</span>）</span><br><span class="line"><span class="built_in">print</span> （a）</span><br><span class="line">s = Series(a)</span><br><span class="line"><span class="built_in">print</span> （<span class="string">&quot;s is a Series:&quot;</span>）</span><br><span class="line"><span class="built_in">print</span> （s）</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a is an array:</span><br><span class="line">[-1.24962807 -0.85316907  0.13032511 -0.19088881  0.40475505]</span><br><span class="line">s is a Series:</span><br><span class="line">0   -1.249628</span><br><span class="line">1   -0.853169</span><br><span class="line">2    0.130325</span><br><span class="line">3   -0.190889</span><br><span class="line">4    0.404755</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><p>在创建Series时可以添加index，而且可以使用Series.index查看具体的index，但是需要注意的一点是，当从数组创建Series时，若指定index，那么index长度要和data的长度一致：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = Series(np.random.randn(<span class="number">5</span>), index = [<span class="string">&#x27;a&#x27;</span> , <span class="string">&#x27;b&#x27;</span> , <span class="string">&#x27;c&#x27;</span> , <span class="string">&#x27;d&#x27;</span> , <span class="string">&#x27;e&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="built_in">print</span>(s.index)</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a   -0.566972</span><br><span class="line">b   -0.426072</span><br><span class="line">c    0.787193</span><br><span class="line">d    0.526550</span><br><span class="line">e   -1.271557</span><br><span class="line">dtype: float64</span><br><span class="line">Index([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;], dtype=&#x27;object&#x27;)</span><br></pre></td></tr></table></figure></p><p>Series还可以从字典（dict）创建：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span> : <span class="number">0.</span> , <span class="string">&#x27;b&#x27;</span> : <span class="number">1.</span> , <span class="string">&#x27;c&#x27;</span> : <span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;d is a dict:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">s = Series(d)</span><br><span class="line"><span class="built_in">print</span>( <span class="string">&quot;s is a Series:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d is a dict:</span><br><span class="line">&#123;&#x27;a&#x27;: 0.0, &#x27;b&#x27;: 1.0, &#x27;c&#x27;: 2&#125;</span><br><span class="line">s is a Series:</span><br><span class="line">a    0.0</span><br><span class="line">b    1.0</span><br><span class="line">c    2.0</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p><h1 id=""><a href="#" class="headerlink" title="#"></a>#</h1><hr />]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
